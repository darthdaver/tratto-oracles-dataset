[ {
  "id" : 7342,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@param <O> the type of object in the output collection",
  "methodJavadoc" : "    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */",
  "methodSourceCode" : "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection){\n    if (inputIterator != null && transformer != null) {\n        while (inputIterator.hasNext()) {\n            final I item = inputIterator.next();\n            final O value = transformer.transform(item);\n            outputCollection.add(value);\n        }\n    }\n    return outputCollection;\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "inputIterator", "java.util.Iterator", "Iterator<? extends I>" ], [ "transformer", "org.apache.commons.collections4.Transformer", "Transformer<? super I, ? extends O>" ], [ "outputCollection", "", "Collection" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hasNext", "java.util", "Iterator", "public abstract boolean hasNext()" ], [ "next", "java.util", "Iterator", "public abstract E next()" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7343,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@param <R> the type of the output collection",
  "methodJavadoc" : "    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */",
  "methodSourceCode" : "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection){\n    if (inputIterator != null && transformer != null) {\n        while (inputIterator.hasNext()) {\n            final I item = inputIterator.next();\n            final O value = transformer.transform(item);\n            outputCollection.add(value);\n        }\n    }\n    return outputCollection;\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "inputIterator", "java.util.Iterator", "Iterator<? extends I>" ], [ "transformer", "org.apache.commons.collections4.Transformer", "Transformer<? super I, ? extends O>" ], [ "outputCollection", "", "Collection" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "hasNext", "java.util", "Iterator", "public abstract boolean hasNext()" ], [ "next", "java.util", "Iterator", "public abstract E next()" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7362,
  "oracle" : "this.checkIndexBounds(index);",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@throws IndexOutOfBoundsException if the index is invalid",
  "methodJavadoc" : "    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */",
  "methodSourceCode" : "public static <T> T get(final Iterator<T> iterator, final int index){\n    return IteratorUtils.get(iterator, index);\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "4.1", "double" ] ],
  "tokensMethodArguments" : [ [ "iterator", "java.util.Iterator", "Iterator<T>" ], [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "next", "java.util", "Iterator", "public abstract E next()" ], [ "hasNext", "java.util", "Iterator", "public abstract boolean hasNext()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7363,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@throws IllegalArgumentException if the object type is invalid",
  "methodJavadoc" : "    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */",
  "methodSourceCode" : "public static <T> T get(final Iterator<T> iterator, final int index){\n    return IteratorUtils.get(iterator, index);\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "4.1", "double" ] ],
  "tokensMethodArguments" : [ [ "iterator", "java.util.Iterator", "Iterator<T>" ], [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "next", "java.util", "Iterator", "public abstract E next()" ], [ "hasNext", "java.util", "Iterator", "public abstract boolean hasNext()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7369,
  "oracle" : "this.checkIndexBounds(index);",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@throws IndexOutOfBoundsException if the index is invalid",
  "methodJavadoc" : "    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */",
  "methodSourceCode" : "public static <T> T get(final Iterable<T> iterable, final int index){\n    return IterableUtils.get(iterable, index);\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "4.1", "double" ] ],
  "tokensMethodArguments" : [ [ "iterable", "java.lang.Iterable", "Iterable<T>" ], [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7373,
  "oracle" : "this.checkIndexBounds(index);",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@throws IndexOutOfBoundsException if the index is invalid",
  "methodJavadoc" : "    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */",
  "methodSourceCode" : "public static Object get(final Object object, final int index){\n    int i = index;\n    if (i < 0) {\n        throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n    }\n    if (object instanceof Map<?, ?>) {\n        final Map<?, ?> map = (Map<?, ?>) object;\n        final Iterator<?> iterator = map.entrySet().iterator();\n        return IteratorUtils.get(iterator, i);\n    } else if (object instanceof Object[]) {\n        return ((Object[]) object)[i];\n    } else if (object instanceof Iterator<?>) {\n        final Iterator<?> it = (Iterator<?>) object;\n        return IteratorUtils.get(it, i);\n    } else if (object instanceof Iterable<?>) {\n        final Iterable<?> iterable = (Iterable<?>) object;\n        return IterableUtils.get(iterable, i);\n    } else if (object instanceof Collection<?>) {\n        final Iterator<?> iterator = ((Collection<?>) object).iterator();\n        return IteratorUtils.get(iterator, i);\n    } else if (object instanceof Enumeration<?>) {\n        final Enumeration<?> it = (Enumeration<?>) object;\n        return EnumerationUtils.get(it, i);\n    } else if (object == null) {\n        throw new IllegalArgumentException(\"Unsupported object type: null\");\n    } else {\n        try {\n            return Array.get(object, i);\n        } catch (final IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n        }\n    }\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "object", "java.lang", "Object" ], [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7379,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@return the object at the specified index",
  "methodJavadoc" : "    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */",
  "methodSourceCode" : "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index){\n    checkIndexBounds(index);\n    return get(map.entrySet(), index);\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "map", "java.util.Map", "Map<K, V>" ], [ "index", "", "int" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "getKey", "java.util", "Map.Entry", "public abstract K getKey()" ], [ "setValue", "java.util", "Map.Entry", "public abstract V setValue(V arg0)" ], [ "equals", "java.util", "Map.Entry", "public abstract boolean equals(Object arg0)" ], [ "getValue", "java.util", "Map.Entry", "public abstract V getValue()" ], [ "hashCode", "java.util", "Map.Entry", "public abstract int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7381,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@throws IllegalArgumentException thrown if object is not recognised",
  "methodJavadoc" : "    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */",
  "methodSourceCode" : "public static int size(final Object object){\n    if (object == null) {\n        return 0;\n    }\n    int total = 0;\n    if (object instanceof Map<?, ?>) {\n        total = ((Map<?, ?>) object).size();\n    } else if (object instanceof Collection<?>) {\n        total = ((Collection<?>) object).size();\n    } else if (object instanceof Iterable<?>) {\n        total = IterableUtils.size((Iterable<?>) object);\n    } else if (object instanceof Object[]) {\n        total = ((Object[]) object).length;\n    } else if (object instanceof Iterator<?>) {\n        total = IteratorUtils.size((Iterator<?>) object);\n    } else if (object instanceof Enumeration<?>) {\n        final Enumeration<?> it = (Enumeration<?>) object;\n        while (it.hasMoreElements()) {\n            total++;\n            it.nextElement();\n        }\n    } else {\n        try {\n            total = Array.getLength(object);\n        } catch (final IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n        }\n    }\n    return total;\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "3.1", "double" ] ],
  "tokensMethodArguments" : [ [ "object", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7383,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@throws IllegalArgumentException thrown if object is not recognised",
  "methodJavadoc" : "    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */",
  "methodSourceCode" : "public static boolean sizeIsEmpty(final Object object){\n    if (object == null) {\n        return true;\n    } else if (object instanceof Collection<?>) {\n        return ((Collection<?>) object).isEmpty();\n    } else if (object instanceof Iterable<?>) {\n        return IterableUtils.isEmpty((Iterable<?>) object);\n    } else if (object instanceof Map<?, ?>) {\n        return ((Map<?, ?>) object).isEmpty();\n    } else if (object instanceof Object[]) {\n        return ((Object[]) object).length == 0;\n    } else if (object instanceof Iterator<?>) {\n        return ((Iterator<?>) object).hasNext() == false;\n    } else if (object instanceof Enumeration<?>) {\n        return ((Enumeration<?>) object).hasMoreElements() == false;\n    } else {\n        try {\n            return Array.getLength(object) == 0;\n        } catch (final IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n        }\n    }\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "3.2", "double" ] ],
  "tokensMethodArguments" : [ [ "object", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7406,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@param collection the collection whose contents are the target of the #retailAll operation",
  "methodJavadoc" : "    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */",
  "methodSourceCode" : "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain){\n    return ListUtils.retainAll(collection, retain);\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "1", "int" ], [ "3.2", "double" ], [ "\"s contained in <code>retain</code>. If it\"", "String" ] ],
  "tokensMethodArguments" : [ [ "collection", "java.util.Collection", "Collection<C>" ], [ "retain", "java.util.Collection", "Collection<?>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "addAll", "java.util", "Collection", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "parallelStream", "java.util", "Collection", "public default Stream<E> parallelStream()" ], [ "toArray", "java.util", "Collection", "public abstract Object[] toArray()" ], [ "containsAll", "java.util", "Collection", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "remove", "java.util", "Collection", "public abstract boolean remove(Object arg0)" ], [ "isEmpty", "java.util", "Collection", "public abstract boolean isEmpty()" ], [ "equals", "java.util", "Collection", "public abstract boolean equals(Object arg0)" ], [ "removeAll", "java.util", "Collection", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "toArray", "java.util", "Collection", "public default <T> T[] toArray(IntFunction<T[]> arg0)" ], [ "retainAll", "java.util", "Collection", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "spliterator", "java.util", "Collection", "public default Spliterator<E> spliterator()" ], [ "add", "java.util", "Collection", "public abstract boolean add(E arg0)" ], [ "stream", "java.util", "Collection", "public default Stream<E> stream()" ], [ "size", "java.util", "Collection", "public abstract int size()" ], [ "contains", "java.util", "Collection", "public abstract boolean contains(Object arg0)" ], [ "iterator", "java.util", "Collection", "public abstract Iterator<E> iterator()" ], [ "toArray", "java.util", "Collection", "public abstract <T> T[] toArray(T[] arg0)" ], [ "removeIf", "java.util", "Collection", "public default boolean removeIf(Predicate<? super E> arg0)" ], [ "hashCode", "java.util", "Collection", "public abstract int hashCode()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7418,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "CollectionUtils",
  "javadocTag" : "@param <E> the type of object the {@link Collection} contains",
  "methodJavadoc" : "    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */",
  "methodSourceCode" : "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator){\n    final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n\n        public EquatorWrapper<E> transform(E input) {\n            return new EquatorWrapper<E>(equator, input);\n        }\n    };\n    final Set<EquatorWrapper<E>> removeSet = collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n    final List<E> list = new ArrayList<E>();\n    for (final E element : collection) {\n        if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n            list.add(element);\n        }\n    }\n    return list;\n}",
  "classJavadoc" : "/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.bag.HashBag;\nimport org.apache.commons.collections4.collection.PredicatedCollection;\nimport org.apache.commons.collections4.collection.SynchronizedCollection;\nimport org.apache.commons.collections4.collection.TransformedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;\nimport org.apache.commons.collections4.collection.UnmodifiableCollection;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.iterators.CollatingIterator;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\n/**\n * Provides utility methods and decorators for {@link Collection} instances.\n * <p>\n * Various utility methods might put the input objects into a Set/Map/Bag. In case\n * the input objects override {@link Object#equals(Object)}, it is mandatory that\n * the general contract of the {@link Object#hashCode()} method is maintained.\n * <p>\n * NOTE: From 4.0, method parameters will take {@link Iterable} objects when possible.\n *\n * @since 1.0\n * @version $Id: CollectionUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class CollectionUtils {\n\n    /**\n     * Helper class to easily access cardinality properties of two collections.\n     * @param <O>  the element type\n     */\n    private static class CardinalityHelper<O> {\n\n        /** Contains the cardinality for each object in collection A. */\n        final Map<O, Integer> cardinalityA;\n\n        /** Contains the cardinality for each object in collection B. */\n        final Map<O, Integer> cardinalityB;\n\n        /**\n         * Create a new CardinalityHelper for two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public CardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            cardinalityA = CollectionUtils.<O>getCardinalityMap(a);\n            cardinalityB = CollectionUtils.<O>getCardinalityMap(b);\n        }\n\n        /**\n         * Returns the maximum frequency of an object.\n         * @param obj  the object\n         * @return the maximum frequency of the object\n         */\n        public final int max(final Object obj) {\n            return Math.max(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the minimum frequency of an object.\n         * @param obj  the object\n         * @return the minimum frequency of the object\n         */\n        public final int min(final Object obj) {\n            return Math.min(freqA(obj), freqB(obj));\n        }\n\n        /**\n         * Returns the frequency of this object in collection A.\n         * @param obj  the object\n         * @return the frequency of the object in collection A\n         */\n        public int freqA(final Object obj) {\n            return getFreq(obj, cardinalityA);\n        }\n\n        /**\n         * Returns the frequency of this object in collection B.\n         * @param obj  the object\n         * @return the frequency of the object in collection B\n         */\n        public int freqB(final Object obj) {\n            return getFreq(obj, cardinalityB);\n        }\n\n        private final int getFreq(final Object obj, final Map<?, Integer> freqMap) {\n            final Integer count = freqMap.get(obj);\n            if (count != null) {\n                return count.intValue();\n            }\n            return 0;\n        }\n    }\n\n    /**\n     * Helper class for set-related operations, e.g. union, subtract, intersection.\n     * @param <O>  the element type\n     */\n    private static class SetOperationCardinalityHelper<O> extends CardinalityHelper<O> implements Iterable<O> {\n\n        /** Contains the unique elements of the two collections. */\n        private final Set<O> elements;\n\n        /** Output collection. */\n        private final List<O> newList;\n\n        /**\n         * Create a new set operation helper from the two collections.\n         * @param a  the first collection\n         * @param b  the second collection\n         */\n        public SetOperationCardinalityHelper(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n            super(a, b);\n            elements = new HashSet<O>();\n            addAll(elements, a);\n            addAll(elements, b);\n            // the resulting list must contain at least each unique element, but may grow\n            newList = new ArrayList<O>(elements.size());\n        }\n\n        public Iterator<O> iterator() {\n            return elements.iterator();\n        }\n\n        /**\n         * Add the object {@code count} times to the result collection.\n         * @param obj  the object to add\n         * @param count  the count\n         */\n        public void setCardinality(final O obj, final int count) {\n            for (int i = 0; i < count; i++) {\n                newList.add(obj);\n            }\n        }\n\n        /**\n         * Returns the resulting collection.\n         * @return the result\n         */\n        public Collection<O> list() {\n            return newList;\n        }\n\n    }\n\n    /**\n     * An empty unmodifiable collection.\n     * The JDK provides empty Set and List implementations which could be used for\n     * this purpose. However they could be cast to Set or List which might be\n     * undesirable. This implementation only implements Collection.\n     */\n    @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n    public static final Collection EMPTY_COLLECTION =\n        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n\n    /**\n     * <code>CollectionUtils</code> should not normally be instantiated.\n     */\n    private CollectionUtils() {}\n\n    /**\n     * Returns the immutable EMPTY_COLLECTION with generic type safety.\n     *\n     * @see #EMPTY_COLLECTION\n     * @since 4.0\n     * @param <T> the element type\n     * @return immutable empty collection\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyCollection() {\n        return EMPTY_COLLECTION;\n    }\n\n    /**\n     * Returns an immutable empty collection if the argument is <code>null</code>,\n     * or the argument itself otherwise.\n     *\n     * @param <T> the element type\n     * @param collection the collection, possibly <code>null</code>\n     * @return an empty collection if the argument is <code>null</code>\n     */\n    @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n    public static <T> Collection<T> emptyIfNull(final Collection<T> collection) {\n        return collection == null ? EMPTY_COLLECTION : collection;\n    }\n\n    /**\n     * Returns a {@link Collection} containing the union of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the maximum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the union of the two collections\n     * @see Collection#addAll\n     */\n    public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the intersection of the given\n     * {@link Iterable}s.\n     * <p>\n     * The cardinality of each element in the returned {@link Collection} will\n     * be equal to the minimum of the cardinality of that element in the two\n     * given {@link Iterable}s.\n     *\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the intersection of the two collections\n     * @see Collection#retainAll\n     * @see #containsAny\n     */\n    public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a {@link Collection} containing the exclusive disjunction\n     * (symmetric difference) of the given {@link Iterable}s.\n     * <p>\n     * The cardinality of each element <i>e</i> in the returned\n     * {@link Collection} will be equal to\n     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n     * <p>\n     * This is equivalent to\n     * {@code {@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})}\n     * or\n     * {@code {@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})}.\n\n     * @param a the first collection, must not be null\n     * @param b the second collection, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return the symmetric difference of the two collections\n     */\n    public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (final O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj) - helper.min(obj));\n        }\n        return helper.list();\n    }\n\n    /**\n     * Returns a new {@link Collection} containing {@code <i>a</i> - <i>b</i>}.\n     * The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * will be the cardinality of <i>e</i> in <i>a</i> minus the cardinality\n     * of <i>e</i> in <i>b</i>, or zero, whichever is greater.\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        final Predicate<O> p = TruePredicate.truePredicate();\n        return subtract(a, b, p);\n    }\n\n    /**\n     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n     * condition, <i>p</i> are subtracted from <i>a</i>.\n     *\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n     *\n     * @param a  the collection to subtract from, must not be null\n     * @param b  the collection to subtract, must not be null\n     * @param p  the condition used to determine which elements of <i>b</i> are\n     *        subtracted.\n     * @param <O> the generic type that is able to represent the types contained\n     *        in both input collections.\n     * @return a new collection with the results\n     * @since 4.0\n     * @see Collection#removeAll\n     */\n    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n                                             final Iterable<? extends O> b,\n                                             final Predicate<O> p) {\n        final ArrayList<O> list = new ArrayList<O>();\n        final HashBag<O> bag = new HashBag<O>();\n        for (final O element : b) {\n            if (p.evaluate(element)) {\n                bag.add(element);\n            }\n        }\n        for (final O element : a) {\n            if (!bag.remove(element, 1)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Returns <code>true</code> iff all elements of {@code coll2} are also contained\n     * in {@code coll1}. The cardinality of values in {@code coll2} is not taken into account,\n     * which is the same behavior as {@link Collection#containsAll(Collection)}.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> has the same cardinality as\n     * the set of unique values from {@code coll2}. In case {@code coll2} is empty, {@code true}\n     * will be returned.\n     * <p>\n     * This method is intended as a replacement for {@link Collection#containsAll(Collection)}\n     * with a guaranteed runtime complexity of {@code O(n + m)}. Depending on the type of\n     * {@link Collection} provided, this method will be much faster than calling\n     * {@link Collection#containsAll(Collection)} instead, though this will come at the\n     * cost of an additional space complexity O(n).\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections has the same cardinality\n     *   as the set of unique elements from the second collection\n     * @since 4.0\n     */\n    public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll2.isEmpty()) {\n            return true;\n        } else {\n            final Iterator<?> it = coll1.iterator();\n            final Set<Object> elementsAlreadySeen = new HashSet<Object>();\n            for (final Object nextElement : coll2) {\n                if (elementsAlreadySeen.contains(nextElement)) {\n                    continue;\n                }\n\n                boolean foundCurrentElement = false;\n                while (it.hasNext()) {\n                    final Object p = it.next();\n                    elementsAlreadySeen.add(p);\n                    if (nextElement == null ? p == null : nextElement.equals(p)) {\n                        foundCurrentElement = true;\n                        break;\n                    }\n                }\n\n                if (foundCurrentElement) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Returns <code>true</code> iff at least one element is in both collections.\n     * <p>\n     * In other words, this method returns <code>true</code> iff the\n     * {@link #intersection} of <i>coll1</i> and <i>coll2</i> is not empty.\n     *\n     * @param coll1  the first collection, must not be null\n     * @param coll2  the second collection, must not be null\n     * @return <code>true</code> iff the intersection of the collections is non-empty\n     * @since 2.1\n     * @see #intersection\n     */\n    public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2) {\n        if (coll1.size() < coll2.size()) {\n            for (final Object aColl1 : coll1) {\n                if (coll2.contains(aColl1)) {\n                    return true;\n                }\n            }\n        } else {\n            for (final Object aColl2 : coll2) {\n                if (coll1.contains(aColl2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a {@link Map} mapping each unique element in the given\n     * {@link Collection} to an {@link Integer} representing the number\n     * of occurrences of that element in the {@link Collection}.\n     * <p>\n     * Only those elements present in the collection will appear as\n     * keys in the map.\n     *\n     * @param <O>  the type of object in the returned {@link Map}. This is a super type of <I>.\n     * @param coll  the collection to get the cardinality map for, must not be null\n     * @return the populated cardinality map\n     */\n    public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll) {\n        final Map<O, Integer> count = new HashMap<O, Integer>();\n        for (final O obj : coll) {\n            final Integer c = count.get(obj);\n            if (c == null) {\n                count.put(obj, Integer.valueOf(1));\n            } else {\n                count.put(obj, Integer.valueOf(c.intValue() + 1));\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less than or\n     * equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i>\n     * in <i>a</i>.\n     *\n     * @param a the first (sub?) collection, must not be null\n     * @param b the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n     * @see #isProperSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isSubCollection(final Collection<?> a, final Collection<?> b) {\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        for (final Object obj : a) {\n            if (helper.freqA(obj) > helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>,\n     * that is, iff the cardinality of <i>e</i> in <i>a</i> is less\n     * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i>, and there is at least one\n     * element <i>f</i> such that the cardinality of <i>f</i> in <i>b</i>\n     * is strictly greater than the cardinality of <i>f</i> in <i>a</i>.\n     * <p>\n     * The implementation assumes\n     * <ul>\n     *    <li><code>a.size()</code> and <code>b.size()</code> represent the\n     *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n     *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n     * </ul>\n     *\n     * @param a  the first (sub?) collection, must not be null\n     * @param b  the second (super?) collection, must not be null\n     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n     * @see #isSubCollection\n     * @see Collection#containsAll\n     */\n    public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     *\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     */\n    public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b) {\n        if(a.size() != b.size()) {\n            return false;\n        }\n        final CardinalityHelper<Object> helper = new CardinalityHelper<Object>(a, b);\n        if(helper.cardinalityA.size() != helper.cardinalityB.size()) {\n            return false;\n        }\n        for( final Object obj : helper.cardinalityA.keySet()) {\n            if(helper.freqA(obj) != helper.freqB(obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns {@code true} iff the given {@link Collection}s contain\n     * exactly the same elements with exactly the same cardinalities.\n     * <p>\n     * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n     * equal to the cardinality of <i>e</i> in <i>b</i>,\n     * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n     * <p>\n     * <b>Note:</b> from version 4.1 onwards this method requires the input\n     * collections and equator to be of compatible type (using bounded wildcards).\n     * Providing incompatible arguments (e.g. by casting to their rawtypes)\n     * will result in a {@code ClassCastException} thrown at runtime.\n     *\n     * @param <E>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param equator  the Equator used for testing equality\n     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n     * @throws NullPointerException if the equator is null\n     * @since 4.0\n     */\n    public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                final Collection<? extends E> b,\n                                                final Equator<? super E> equator) {\n        if (equator == null) {\n            throw new NullPointerException(\"Equator must not be null.\");\n        }\n\n        if(a.size() != b.size()) {\n            return false;\n        }\n\n        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n        final Transformer<E, ?> transformer = new Transformer() {\n            public EquatorWrapper<?> transform(final Object input) {\n                return new EquatorWrapper(equator, input);\n            }\n        };\n\n        return isEqualCollection(collect(a, transformer), collect(b, transformer));\n    }\n\n    /**\n     * Wraps another object and uses the provided Equator to implement\n     * {@link #equals(Object)} and {@link #hashCode()}.\n     * <p>\n     * This class can be used to store objects into a Map.\n     *\n     * @param <O>  the element type\n     * @since 4.0\n     */\n    private static class EquatorWrapper<O> {\n        private final Equator<? super O> equator;\n        private final O object;\n\n        public EquatorWrapper(final Equator<? super O> equator, final O object) {\n            this.equator = equator;\n            this.object = object;\n        }\n\n        public O getObject() {\n            return object;\n        }\n\n        @Override\n        public boolean equals(final Object obj) {\n            if (!(obj instanceof EquatorWrapper)) {\n                return false;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n            return equator.equate(object, otherObj.getObject());\n        }\n\n        @Override\n        public int hashCode() {\n            return equator.hash(object);\n        }\n    }\n\n    /**\n     * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n     *\n     * @param obj the object to find the cardinality of\n     * @param coll the {@link Iterable} to search\n     * @param <O> the type of object that the {@link Iterable} may contain.\n     * @return the the number of occurrences of obj in coll\n     * @throws NullPointerException if coll is null\n     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n     *   Be aware that the order of parameters has changed.\n     */\n    @Deprecated\n    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"coll must not be null.\");\n        }\n        return IterableUtils.frequency(coll, obj);\n    }\n\n    /**\n     * Finds the first element in the given collection which matches the given predicate.\n     * <p>\n     * If the input collection or predicate is null, or no element of the collection\n     * matches the predicate, null is returned.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to search, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the first element of the collection which matches the predicate or null if none could be found\n     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @deprecated since 4.1, use {@link IterableUtils#forEach(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n        if (closure != null) {\n            IterableUtils.forEach(collection, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterator} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return closure\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEach(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n        if (closure != null) {\n            IteratorUtils.forEach(iterator, closure);\n        }\n        return closure;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param <C>  the closure type\n     * @param collection  the collection to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either collection or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#forEachButLast(Iterable, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection,\n                                                                      final C closure) {\n        return closure != null ? IterableUtils.forEachButLast(collection, closure) : null;\n    }\n\n    /**\n     * Executes the given closure on each but the last element in the collection.\n     * <p>\n     * If the input collection or closure is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param <C>  the closure type\n     * @param iterator  the iterator to get the input from, may be null\n     * @param closure  the closure to perform, may be null\n     * @return the last element in the collection, or null if either iterator or closure is null\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IteratorUtils#forEachButLast(Iterator, Closure)} instead\n     */\n    @Deprecated\n    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n        return closure != null ? IteratorUtils.forEachButLast(iterator, closure) : null;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns false, remove the element.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        boolean result = false;\n        if (collection != null && predicate != null) {\n            for (final Iterator<T> it = collection.iterator(); it.hasNext();) {\n                if (!predicate.evaluate(it.next())) {\n                    it.remove();\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Filter the collection by applying a Predicate to each element. If the\n     * predicate returns true, remove the element.\n     * <p>\n     * This is equivalent to <pre>filter(collection, PredicateUtils.notPredicate(predicate))</pre>\n     * if predicate is != null.\n     * <p>\n     * If the input collection or predicate is null, there is no change made.\n     *\n     * @param <T>  the type of object the {@link Iterable} contains\n     * @param collection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use as a filter, may be null\n     * @return true if the collection is modified by this call, false otherwise.\n     */\n    public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate) {\n        return filter(collection, predicate == null ? null : PredicateUtils.notPredicate(predicate));\n    }\n\n    /**\n     * Transform the collection by applying a Transformer to each element.\n     * <p>\n     * If the input collection or transformer is null, there is no change made.\n     * <p>\n     * This routine is best for Lists, for which set() is used to do the\n     * transformations \"in place.\" For other Collections, clear() and addAll()\n     * are used to replace elements.\n     * <p>\n     * If the input collection controls its input, such as a Set, and the\n     * Transformer creates duplicates (or are otherwise invalid), the collection\n     * may reduce in size due to calling this method.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the {@link Collection} to get the input from, may be null\n     * @param transformer  the transformer to perform, may be null\n     */\n    public static <C> void transform(final Collection<C> collection,\n                                     final Transformer<? super C, ? extends C> transformer) {\n\n        if (collection != null && transformer != null) {\n            if (collection instanceof List<?>) {\n                final List<C> list = (List<C>) collection;\n                for (final ListIterator<C> it = list.listIterator(); it.hasNext();) {\n                    it.set(transformer.transform(it.next()));\n                }\n            } else {\n                final Collection<C> resultCollection = collect(collection, transformer);\n                collection.clear();\n                collection.addAll(resultCollection);\n            }\n        }\n    }\n\n    /**\n     * Counts the number of elements in the input collection that match the\n     * predicate.\n     * <p>\n     * A <code>null</code> collection or predicate matches no elements.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return the number of matches for the predicate in the collection\n     * @deprecated since 4.1, use {@link IterableUtils#countMatches(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? 0 : (int) IterableUtils.countMatches(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for at least one element of a\n     * collection.\n     * <p>\n     * A <code>null</code> collection or predicate returns false.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if at least one element of the collection matches the predicate\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n    }\n\n    /**\n     * Answers true if a predicate is true for every element of a\n     * collection.\n     * <p>\n     * A <code>null</code> predicate returns false.<br/>\n     * A <code>null</code> or empty collection returns true.\n     *\n     * @param <C>  the type of object the {@link Iterable} contains\n     * @param input  the {@link Iterable} to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @return true if every element of the collection matches the predicate or if the\n     * collection is empty, false otherwise\n     * @since 4.0\n     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n     */\n    @Deprecated\n    public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate into an output collection.\n     * <p>\n     * A <code>null</code> predicate matches no elements.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n                                           final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return select(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from input collection which match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input collection or predicate is null, there is no change to the\n     * output collection.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return the outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection into an output and rejected collection,\n     * based on the evaluation of the given predicate.\n     * <p>\n     * Elements matching the predicate are added to the <code>outputCollection</code>,\n     * all other elements are added to the <code>rejectedCollection</code>.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code> or <code>rejectedCollection</code>.\n     * <p>\n     * Note: calling the method is equivalent to the following code snippet:\n     * <pre>\n     *   select(inputCollection, predicate, outputCollection);\n     *   selectRejected(inputCollection, predicate, rejectedCollection);\n     * </pre>\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output selected elements into, may not be null if the\n     *   inputCollection and predicate are not null\n     * @param rejectedCollection  the collection to output rejected elements into, may not be null if the\n     *   inputCollection or predicate are not null\n     * @return the outputCollection\n     * @since 4.1\n     */\n    public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, R outputCollection, R rejectedCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O element : inputCollection) {\n                if (predicate.evaluate(element)) {\n                    outputCollection.add(element);\n                } else {\n                    rejectedCollection.add(element);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate into an output collection.\n     * <p>\n     * If the input predicate is <code>null</code>, the result is an empty\n     * list.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param predicate  the predicate to use, may be null\n     * @return the elements <b>not</b> matching the predicate (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n                                                   final Predicate<? super O> predicate) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return selectRejected(inputCollection, predicate, answer);\n    }\n\n    /**\n     * Selects all elements from inputCollection which don't match the given\n     * predicate and adds them to outputCollection.\n     * <p>\n     * If the input predicate is <code>null</code>, no elements are added to\n     * <code>outputCollection</code>.\n     *\n     * @param <O>  the type of object the {@link Iterable} contains\n     * @param <R>  the type of the output {@link Collection}\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param predicate  the predicate to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n     *   and predicate or not null\n     * @return outputCollection\n     */\n    public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection,\n            final Predicate<? super O> predicate, final R outputCollection) {\n\n        if (inputCollection != null && predicate != null) {\n            for (final O item : inputCollection) {\n                if (!predicate.evaluate(item)) {\n                    outputCollection.add(item);\n                }\n            }\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Returns a new Collection containing all elements of the input collection\n     * transformed by the given transformer.\n     * <p>\n     * If the input collection or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputCollection  the collection to get the input from, may not be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     * @throws NullPointerException if the input collection is null\n     */\n    public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n        return collect(inputCollection, transformer, answer);\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, the result is an empty list.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @return the transformed result (new list)\n     */\n    public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n                                               final Transformer<? super I, ? extends O> transformer) {\n        return collect(inputIterator, transformer, new ArrayList<O>());\n    }\n\n    /**\n     * Transforms all elements from input collection with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input collection or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputCollection  the collection to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputCollection\n     *   and transformer are not null\n     * @return the output collection with the transformed input added\n     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputCollection != null) {\n            return collect(inputCollection.iterator(), transformer, outputCollection);\n        }\n        return outputCollection;\n    }\n\n    /**\n     * Transforms all elements from the input iterator with the given transformer\n     * and adds them to the output collection.\n     * <p>\n     * If the input iterator or transformer is null, there is no change to the\n     * output collection.\n     *\n     * @param <I>  the type of object in the input collection\n     * @param <O>  the type of object in the output collection\n     * @param <R>  the type of the output collection\n     * @param inputIterator  the iterator to get the input from, may be null\n     * @param transformer  the transformer to use, may be null\n     * @param outputCollection  the collection to output into, may not be null if inputIterator\n     *   and transformer are not null\n     * @return the outputCollection with the transformed input added\n     * @throws NullPointerException if the output collection is null and both, inputIterator and\n     *   transformer are not null\n     */\n    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n            final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n        if (inputIterator != null && transformer != null) {\n            while (inputIterator.hasNext()) {\n                final I item = inputIterator.next();\n                final O value = transformer.transform(item);\n                outputCollection.add(value);\n            }\n        }\n        return outputCollection;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Adds an element to the collection unless the element is null.\n     *\n     * @param <T>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param object  the object to add, if null it will not be added\n     * @return true if the collection changed\n     * @throws NullPointerException if the collection is null\n     * @since 3.2\n     */\n    public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n        if (collection == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        return object != null && collection.add(object);\n    }\n\n    /**\n     * Adds all elements in the {@link Iterable} to the given collection. If the\n     * {@link Iterable} is a {@link Collection} then it is cast and will be\n     * added using {@link Collection#addAll(Collection)} instead of iterating.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterable  the iterable of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n        if (iterable instanceof Collection<?>) {\n            return collection.addAll((Collection<? extends C>) iterable);\n        }\n        return addAll(collection, iterable.iterator());\n    }\n\n    /**\n     * Adds all elements in the iteration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param iterator  the iterator of elements to add, must not be null\n     * @return a boolean indicating whether the collection has changed or not.\n     * @throws NullPointerException if the collection or iterator is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n        boolean changed = false;\n        while (iterator.hasNext()) {\n            changed |= collection.add(iterator.next());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the enumeration to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param enumeration  the enumeration of elements to add, must not be null\n     * @return {@code true} if the collections was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or enumeration is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n        boolean changed = false;\n        while (enumeration.hasMoreElements()) {\n            changed |= collection.add(enumeration.nextElement());\n        }\n        return changed;\n    }\n\n    /**\n     * Adds all elements in the array to the given collection.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to add to, must not be null\n     * @param elements  the array of elements to add, must not be null\n     * @return {@code true} if the collection was changed, {@code false} otherwise\n     * @throws NullPointerException if the collection or array is null\n     */\n    public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n        boolean changed = false;\n        for (final C element : elements) {\n            changed |= collection.add(element);\n        }\n        return changed;\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * The Iterator is advanced to <code>index</code> (or to the end, if\n     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n     *\n     * @param iterator  the iterator to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterator}\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     * @deprecated since 4.1, use {@code IteratorUtils.get(Iterator, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterator<T> iterator, final int index) {\n        return IteratorUtils.get(iterator, index);\n    }\n\n    /**\n     * Ensures an index is not negative.\n     * @param index the index to check.\n     * @throws IndexOutOfBoundsException if the index is negative.\n     */\n    static void checkIndexBounds(final int index) {\n        if (index < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in the <code>iterable</code>'s {@link Iterator}, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element.\n     * <p>\n     * If the {@link Iterable} is a {@link List}, then it will use {@link List#get(int)}.\n     *\n     * @param iterable  the {@link Iterable} to get a value from\n     * @param index  the index to get\n     * @param <T> the type of object in the {@link Iterable}.\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @deprecated since 4.1, use {@code IterableUtils.get(Iterable, int)} instead\n     */\n    @Deprecated\n    public static <T> T get(final Iterable<T> iterable, final int index) {\n        return IterableUtils.get(iterable, index);\n    }\n\n    /**\n     * Returns the <code>index</code>-th value in <code>object</code>, throwing\n     * <code>IndexOutOfBoundsException</code> if there is no such element or\n     * <code>IllegalArgumentException</code> if <code>object</code> is not an\n     * instance of one of the supported types.\n     * <p>\n     * The supported types, and associated semantics are:\n     * <ul>\n     * <li> Map -- the value returned is the <code>Map.Entry</code> in position\n     *      <code>index</code> in the map's <code>entrySet</code> iterator,\n     *      if there is such an entry.</li>\n     * <li> List -- this method is equivalent to the list's get method.</li>\n     * <li> Array -- the <code>index</code>-th array entry is returned,\n     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n     *      is thrown.</li>\n     * <li> Collection -- the value returned is the <code>index</code>-th object\n     *      returned by the collection's default iterator, if there is such an element.</li>\n     * <li> Iterator or Enumeration -- the value returned is the\n     *      <code>index</code>-th object in the Iterator/Enumeration, if there\n     *      is such an element.  The Iterator/Enumeration is advanced to\n     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n     *      number of entries) as a side effect of this method.</li>\n     * </ul>\n     *\n     * @param object  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     * @throws IllegalArgumentException if the object type is invalid\n     */\n    public static Object get(final Object object, final int index) {\n        int i = index;\n        if (i < 0) {\n            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + i);\n        }\n        if (object instanceof Map<?,?>) {\n            final Map<?, ?> map = (Map<?, ?>) object;\n            final Iterator<?> iterator = map.entrySet().iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object)[i];\n        } else if (object instanceof Iterator<?>) {\n            final Iterator<?> it = (Iterator<?>) object;\n            return IteratorUtils.get(it, i);\n        } else if (object instanceof Iterable<?>) {\n            final Iterable<?> iterable = (Iterable<?>) object;\n            return IterableUtils.get(iterable, i);\n        } else if (object instanceof Collection<?>) {\n            final Iterator<?> iterator = ((Collection<?>) object).iterator();\n            return IteratorUtils.get(iterator, i);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            return EnumerationUtils.get(it, i);\n        } else if (object == null) {\n            throw new IllegalArgumentException(\"Unsupported object type: null\");\n        } else {\n            try {\n                return Array.get(object, i);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    /**\n     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n     *\n     * @param <K>  the key type in the {@link Map}\n     * @param <V>  the key type in the {@link Map}\n     * @param map  the object to get a value from\n     * @param index  the index to get\n     * @return the object at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     */\n    public static <K,V> Map.Entry<K, V> get(final Map<K,V> map, final int index) {\n        checkIndexBounds(index);\n        return get(map.entrySet(), index);\n    }\n\n    /**\n     * Gets the size of the collection/iterator specified.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - the collection size\n     * <li>Map - the map size\n     * <li>Array - the array size\n     * <li>Iterator - the number of elements remaining in the iterator\n     * <li>Enumeration - the number of elements remaining in the enumeration\n     * </ul>\n     *\n     * @param object  the object to get the size of, may be null\n     * @return the size of the specified collection or 0 if the object was null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.1\n     */\n    public static int size(final Object object) {\n        if (object == null) {\n            return 0;\n        }\n        int total = 0;\n        if (object instanceof Map<?,?>) {\n            total = ((Map<?, ?>) object).size();\n        } else if (object instanceof Collection<?>) {\n            total = ((Collection<?>) object).size();\n        } else if (object instanceof Iterable<?>) {\n            total = IterableUtils.size((Iterable<?>) object);\n        } else if (object instanceof Object[]) {\n            total = ((Object[]) object).length;\n        } else if (object instanceof Iterator<?>) {\n            total = IteratorUtils.size((Iterator<?>) object);\n        } else if (object instanceof Enumeration<?>) {\n            final Enumeration<?> it = (Enumeration<?>) object;\n            while (it.hasMoreElements()) {\n                total++;\n                it.nextElement();\n            }\n        } else {\n            try {\n                total = Array.getLength(object);\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Checks if the specified collection/array/iterator is empty.\n     * <p>\n     * This method can handles objects as follows\n     * <ul>\n     * <li>Collection - via collection isEmpty\n     * <li>Map - via map isEmpty\n     * <li>Array - using array size\n     * <li>Iterator - via hasNext\n     * <li>Enumeration - via hasMoreElements\n     * </ul>\n     * <p>\n     * Note: This method is named to avoid clashing with\n     * {@link #isEmpty(Collection)}.\n     *\n     * @param object  the object to get the size of, may be null\n     * @return true if empty or null\n     * @throws IllegalArgumentException thrown if object is not recognised\n     * @since 3.2\n     */\n    public static boolean sizeIsEmpty(final Object object) {\n        if (object == null) {\n            return true;\n        } else if (object instanceof Collection<?>) {\n            return ((Collection<?>) object).isEmpty();\n        } else if (object instanceof Iterable<?>) {\n            return IterableUtils.isEmpty((Iterable<?>) object);\n        } else if (object instanceof Map<?, ?>) {\n            return ((Map<?, ?>) object).isEmpty();\n        } else if (object instanceof Object[]) {\n            return ((Object[]) object).length == 0;\n        } else if (object instanceof Iterator<?>) {\n            return ((Iterator<?>) object).hasNext() == false;\n        } else if (object instanceof Enumeration<?>) {\n            return ((Enumeration<?>) object).hasMoreElements() == false;\n        } else {\n            try {\n                return Array.getLength(object) == 0;\n            } catch (final IllegalArgumentException ex) {\n                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Null-safe check if the specified collection is empty.\n     * <p>\n     * Null returns true.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if empty or null\n     * @since 3.2\n     */\n    public static boolean isEmpty(final Collection<?> coll) {\n        return coll == null || coll.isEmpty();\n    }\n\n    /**\n     * Null-safe check if the specified collection is not empty.\n     * <p>\n     * Null returns false.\n     *\n     * @param coll  the collection to check, may be null\n     * @return true if non-null and non-empty\n     * @since 3.2\n     */\n    public static boolean isNotEmpty(final Collection<?> coll) {\n        return !isEmpty(coll);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Reverses the order of the given array.\n     *\n     * @param array  the array to reverse\n     */\n    public static void reverseArray(final Object[] array) {\n        int i = 0;\n        int j = array.length - 1;\n        Object tmp;\n\n        while (j > i) {\n            tmp = array[j];\n            array[j] = array[i];\n            array[i] = tmp;\n            j--;\n            i++;\n        }\n    }\n\n    /**\n     * Returns true if no more elements can be added to the Collection.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * full status. If the collection does not implement this interface then\n     * false is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return true if the BoundedCollection is full\n     * @throws NullPointerException if the collection is null\n     */\n    public static boolean isFull(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).isFull();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.isFull();\n        } catch (final IllegalArgumentException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the maximum number of elements that the Collection can contain.\n     * <p>\n     * This method uses the {@link BoundedCollection} interface to determine the\n     * maximum size. If the collection does not implement this interface then\n     * -1 is returned.\n     * <p>\n     * The collection does not have to implement this interface directly.\n     * If the collection has been decorated using the decorators subpackage\n     * then these will be removed to access the BoundedCollection.\n     *\n     * @param coll  the collection to check\n     * @return the maximum size of the BoundedCollection, -1 if no maximum size\n     * @throws NullPointerException if the collection is null\n     */\n    public static int maxSize(final Collection<? extends Object> coll) {\n        if (coll == null) {\n            throw new NullPointerException(\"The collection must not be null\");\n        }\n        if (coll instanceof BoundedCollection) {\n            return ((BoundedCollection<?>) coll).maxSize();\n        }\n        try {\n            final BoundedCollection<?> bcoll =\n                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n            return bcoll.maxSize();\n        } catch (final IllegalArgumentException ex) {\n            return -1;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n                                                                    Iterable<? extends O> b) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the natural ordering of the elements is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection is null\n     * @since 4.0\n     */\n    public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n                                                                    final Iterable<? extends O> b,\n                                                                    final boolean includeDuplicates) {\n        return collate(a, b, ComparatorUtils.<O>naturalComparator(), includeDuplicates);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c) {\n        return collate(a, b, c, true);\n    }\n\n    /**\n     * Merges two sorted Collections, a and b, into a single, sorted List\n     * such that the ordering of the elements according to Comparator c is retained.\n     * <p>\n     * Uses the standard O(n) merge algorithm for combining two sorted lists.\n     *\n     * @param <O>  the element type\n     * @param a  the first collection, must not be null\n     * @param b  the second collection, must not be null\n     * @param c  the comparator to use for the merge.\n     * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n     *   they will be removed in the output collection\n     * @return a new sorted List, containing the elements of Collection a and b\n     * @throws NullPointerException if either collection or the comparator is null\n     * @since 4.0\n     */\n    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n\n        if (a == null || b == null) {\n            throw new NullPointerException(\"The collections must not be null\");\n        }\n        if (c == null) {\n            throw new NullPointerException(\"The comparator must not be null\");\n        }\n\n        // if both Iterables are a Collection, we can estimate the size\n        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n\n        final Iterator<O> iterator = new CollatingIterator<O>(c, a.iterator(), b.iterator());\n        if (includeDuplicates) {\n            return IteratorUtils.toList(iterator, totalSize);\n        } else {\n            final ArrayList<O> mergedList = new ArrayList<O>(totalSize);\n\n            O lastItem = null;\n            while (iterator.hasNext()) {\n                final O item = iterator.next();\n                if (lastItem == null || !lastItem.equals(item)) {\n                    mergedList.add(item);\n                }\n                lastItem = item;\n            }\n\n            mergedList.trimToSize();\n            return mergedList;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a {@link Collection} of all the permutations of the input collection.\n     * <p>\n     * NOTE: the number of permutations of a given collection is equal to n!, where\n     * n is the size of the collection. Thus, the resulting collection will become\n     * <b>very</b> large for collections &gt; 10 (e.g. 10! = 3628800, 15! = 1307674368000).\n     * <p>\n     * For larger collections it is advised to use a {@link PermutationIterator} to\n     * iterate over all permutations.\n     *\n     * @see PermutationIterator\n     *\n     * @param <E>  the element type\n     * @param collection  the collection to create permutations for, may not be null\n     * @return an unordered collection of all permutations of the input collection\n     * @throws NullPointerException if collection is null\n     * @since 4.0\n     */\n    public static <E> Collection<List<E>> permutations(final Collection<E> collection) {\n        final PermutationIterator<E> it = new PermutationIterator<E>(collection);\n        final Collection<List<E>> result = new LinkedList<List<E>>();\n        while (it.hasNext()) {\n            result.add(it.next());\n        }\n        return result;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a collection containing all the elements in <code>collection</code>\n     * that are also in <code>retain</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>retain</code> does not contain <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>retain</code>. If it's contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>retain</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection whose contents are the target of the #retailAll operation\n     * @param retain  the collection containing the elements to be retained in the returned collection\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 3.2\n     */\n    public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain) {\n        return ListUtils.retainAll(collection, retain);\n    }\n\n    /**\n     * Returns a collection containing all the elements in\n     * <code>collection</code> that are also in <code>retain</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>retain</code> does not contain <code>e</code>, in which case\n     * the cardinality is zero. This method is useful if you do not wish to\n     * modify the collection <code>c</code> and thus cannot call\n     * <code>c.retainAll(retain);</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>retain</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection whose contents are the target of the {@code retainAll} operation\n     * @param retain the collection containing the elements to be retained in the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * that occur at least once in <code>retain</code> according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> retainAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> retain,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> retainSet =\n                collect(retain, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (retainSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Removes the elements in <code>remove</code> from <code>collection</code>. That is, this\n     * method returns a collection containing all the elements in <code>c</code>\n     * that are not in <code>remove</code>. The cardinality of an element <code>e</code>\n     * in the returned collection is the same as the cardinality of <code>e</code>\n     * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n     * case the cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n     * <p>\n     * This implementation iterates over <code>collection</code>, checking each element in\n     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n     * to the returned list. As a consequence, it is advised to use a collection type for\n     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n     * {@link Collection#contains(Object)}.\n     *\n     * @param <E>  the type of object the {@link Collection} contains\n     * @param collection  the collection from which items are removed (in the returned collection)\n     * @param remove  the items to be removed from the returned <code>collection</code>\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n     * any elements that also occur in <code>remove</code>.\n     * @throws NullPointerException if either parameter is null\n     * @since 4.0 (method existed in 3.2 but was completely broken)\n     */\n    public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove) {\n        return ListUtils.removeAll(collection, remove);\n  }\n\n    /**\n     * Removes all elements in <code>remove</code> from <code>collection</code>.\n     * That is, this method returns a collection containing all the elements in\n     * <code>collection</code> that are not in <code>remove</code>. The\n     * cardinality of an element <code>e</code> in the returned collection is\n     * the same as the cardinality of <code>e</code> in <code>collection</code>\n     * unless <code>remove</code> contains <code>e</code>, in which case the\n     * cardinality is zero. This method is useful if you do not wish to modify\n     * the collection <code>c</code> and thus cannot call\n     * <code>collection.removeAll(remove)</code>.\n     * <p>\n     * Moreover this method uses an {@link Equator} instead of\n     * {@link Object#equals(Object)} to determine the equality of the elements\n     * in <code>collection</code> and <code>remove</code>. Hence this method is\n     * useful in cases where the equals behavior of an object needs to be\n     * modified without changing the object itself.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection the collection from which items are removed (in the returned collection)\n     * @param remove the items to be removed from the returned collection\n     * @param equator the Equator used for testing equality\n     * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n     * except any element that if equal according to the <code>equator</code>\n     * @throws NullPointerException if any of the parameters is null\n     * @since 4.1\n     */\n    public static <E> Collection<E> removeAll(final Iterable<E> collection,\n                                              final Iterable<? extends E> remove,\n                                              final Equator<? super E> equator) {\n\n        final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {\n            public EquatorWrapper<E> transform(E input) {\n                return new EquatorWrapper<E>(equator, input);\n            }\n        };\n\n        final Set<EquatorWrapper<E>> removeSet =\n                collect(remove, transformer, new HashSet<EquatorWrapper<E>>());\n\n        final List<E> list = new ArrayList<E>();\n        for (final E element : collection) {\n            if (!removeSet.contains(new EquatorWrapper<E>(equator, element))) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a synchronized collection backed by the given collection.\n     * <p>\n     * You must manually synchronize on the returned buffer's iterator to\n     * avoid non-deterministic behavior:\n     *\n     * <pre>\n     * Collection c = CollectionUtils.synchronizedCollection(myCollection);\n     * synchronized (c) {\n     *     Iterator i = c.iterator();\n     *     while (i.hasNext()) {\n     *         process (i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to synchronize, must not be null\n     * @return a synchronized collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> synchronizedCollection(final Collection<C> collection) {\n        return SynchronizedCollection.synchronizedCollection(collection);\n    }\n\n    /**\n     * Returns an unmodifiable collection backed by the given collection.\n     * <p>\n     * This method uses the implementation in the decorators subpackage.\n     *\n     * @param <C>  the type of object the {@link Collection} contains\n     * @param collection  the collection to make unmodifiable, must not be null\n     * @return an unmodifiable collection backed by the given collection\n     * @throws NullPointerException if the collection is null\n     * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n     */\n    @Deprecated\n    public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection) {\n        return UnmodifiableCollection.unmodifiableCollection(collection);\n    }\n\n    /**\n     * Returns a predicated (validating) collection backed by the given collection.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to the collection.\n     * Trying to add an invalid object results in an IllegalArgumentException.\n     * It is important not to use the original collection after invoking this method,\n     * as it is a backdoor for adding invalid objects.\n     *\n     * @param <C> the type of objects in the Collection.\n     * @param collection  the collection to predicate, must not be null\n     * @param predicate  the predicate for the collection, must not be null\n     * @return a predicated collection backed by the given collection\n     * @throws NullPointerException if the Collection is null\n     */\n    public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                         final Predicate<? super C> predicate) {\n        return PredicatedCollection.predicatedCollection(collection, predicate);\n    }\n\n    /**\n     * Returns a transformed bag backed by the given collection.\n     * <p>\n     * Each object is passed through the transformer as it is added to the\n     * Collection. It is important not to use the original collection after invoking this\n     * method, as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified collection will not be transformed.\n     * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n     *\n     * @param <E> the type of object the {@link Collection} contains\n     * @param collection  the collection to predicate, must not be null\n     * @param transformer  the transformer for the collection, must not be null\n     * @return a transformed collection backed by the given collection\n     * @throws NullPointerException if the Collection or Transformer is null\n     */\n    public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n            final Transformer<? super E, ? extends E> transformer) {\n        return TransformedCollection.transformingCollection(collection, transformer);\n    }\n\n    /**\n     * Extract the lone element of the specified Collection.\n     * @param <E> collection type\n     * @param collection to read\n     * @return sole member of collection\n     * @throws NullPointerException if collection is null\n     * @throws IllegalArgumentException if collection is empty or contains more than one element\n     * @since 4.0\n     */\n    public static <E> E extractSingleton(final Collection<E> collection) {\n        if (collection == null) {\n            throw new NullPointerException(\"Collection must not be null.\");\n        }\n        if (collection.size() != 1) {\n            throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n        }\n        return collection.iterator().next();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "4.1", "double" ] ],
  "tokensMethodArguments" : [ [ "collection", "java.lang.Iterable", "Iterable<E>" ], [ "remove", "java.lang.Iterable", "Iterable<? extends E>" ], [ "equator", "org.apache.commons.collections4.Equator", "Equator<? super E>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ], [ "equate", "org.apache.commons.collections4", "Equator", "public abstract boolean equate(T arg0, T arg1)" ], [ "hash", "org.apache.commons.collections4", "Equator", "public abstract int hash(T arg0)" ], [ "size", "java.util", "Collection", "public abstract int size()" ], [ "retainAll", "java.util", "Collection", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "iterator", "java.util", "Collection", "public abstract Iterator<E> iterator()" ], [ "toArray", "java.util", "Collection", "public default <T> T[] toArray(IntFunction<T[]> arg0)" ], [ "hashCode", "java.util", "Collection", "public abstract int hashCode()" ], [ "removeAll", "java.util", "Collection", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "addAll", "java.util", "Collection", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "removeIf", "java.util", "Collection", "public default boolean removeIf(Predicate<? super E> arg0)" ], [ "contains", "java.util", "Collection", "public abstract boolean contains(Object arg0)" ], [ "containsAll", "java.util", "Collection", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "spliterator", "java.util", "Collection", "public default Spliterator<E> spliterator()" ], [ "add", "java.util", "Collection", "public abstract boolean add(E arg0)" ], [ "equals", "java.util", "Collection", "public abstract boolean equals(Object arg0)" ], [ "toArray", "java.util", "Collection", "public abstract Object[] toArray()" ], [ "isEmpty", "java.util", "Collection", "public abstract boolean isEmpty()" ], [ "parallelStream", "java.util", "Collection", "public default Stream<E> parallelStream()" ], [ "remove", "java.util", "Collection", "public abstract boolean remove(Object arg0)" ], [ "stream", "java.util", "Collection", "public default Stream<E> stream()" ], [ "toArray", "java.util", "Collection", "public abstract <T> T[] toArray(T[] arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 7438,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "ListValuedMap",
  "javadocTag" : "@throws UnsupportedOperationException if the map is unmodifiable",
  "methodJavadoc" : "    /**\n     * Removes all values associated with the specified key.\n     * <p>\n     * The returned list <i>may</i> be modifiable, but updates will not be\n     * propagated to this list-valued map. In case no mapping was stored for the\n     * specified key, an empty, unmodifiable list will be returned.\n     *\n     * @param key  the key to remove values from\n     * @return the {@code List} of values removed, implementations\n     *   typically return an empty, unmodifiable {@code List} for no mapping found\n     * @throws UnsupportedOperationException if the map is unmodifiable\n     * @throws NullPointerException if the key is null and null keys are invalid\n     */",
  "methodSourceCode" : "List<V> remove(Object key);",
  "classJavadoc" : "/**\n * Defines a map that holds a list of values against each key.\n * <p>\n * A {@code ListValuedMap} is a Map with slightly different semantics:\n * <ul>\n *   <li>Putting a value into the map will add the value to a {@link List} at that key.</li>\n *   <li>Getting a value will return a {@link List}, holding all the values put to that key.</li>\n * </ul>\n *\n * @since 4.1\n * @version $Id: ListValuedMap.java 1685299 2015-06-13 18:27:11Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.List;\n\n/**\n * Defines a map that holds a list of values against each key.\n * <p>\n * A {@code ListValuedMap} is a Map with slightly different semantics:\n * <ul>\n *   <li>Putting a value into the map will add the value to a {@link List} at that key.</li>\n *   <li>Getting a value will return a {@link List}, holding all the values put to that key.</li>\n * </ul>\n *\n * @since 4.1\n * @version $Id: ListValuedMap.java 1685299 2015-06-13 18:27:11Z tn $\n */\npublic interface ListValuedMap<K, V> extends MultiValuedMap<K, V> {\n\n    /**\n     * Gets the list of values associated with the specified key.\n     * <p>\n     * This method will return an <b>empty</b> list if\n     * {@link #containsKey(Object)} returns {@code false}. Changes to the\n     * returned list will update the underlying {@code ListValuedMap} and\n     * vice-versa.\n     *\n     * @param key  the key to retrieve\n     * @return the {@code List} of values, implementations should return an\n     *   empty {@code List} for no mapping\n     * @throws NullPointerException if the key is null and null keys are invalid\n     */\n    @Override\n    List<V> get(K key);\n\n    /**\n     * Removes all values associated with the specified key.\n     * <p>\n     * The returned list <i>may</i> be modifiable, but updates will not be\n     * propagated to this list-valued map. In case no mapping was stored for the\n     * specified key, an empty, unmodifiable list will be returned.\n     *\n     * @param key  the key to remove values from\n     * @return the {@code List} of values removed, implementations\n     *   typically return an empty, unmodifiable {@code List} for no mapping found\n     * @throws UnsupportedOperationException if the map is unmodifiable\n     * @throws NullPointerException if the key is null and null keys are invalid\n     */\n    @Override\n    List<V> remove(Object key);\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "key", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "putAll", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean putAll(MultiValuedMap<? extends K, ? extends V> arg0)" ], [ "putAll", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean putAll(Map<? extends K, ? extends V> arg0)" ], [ "containsMapping", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean containsMapping(Object arg0, Object arg1)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "mapIterator", "org.apache.commons.collections4", "MultiValuedMap", "public abstract MapIterator<K, V> mapIterator()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "remove", "org.apache.commons.collections4", "ListValuedMap", "List<V> remove(Object key)" ], [ "size", "org.apache.commons.collections4", "MultiValuedMap", "public abstract int size()" ], [ "keySet", "org.apache.commons.collections4", "MultiValuedMap", "public abstract Set<K> keySet()" ], [ "asMap", "org.apache.commons.collections4", "MultiValuedMap", "public abstract Map<K, Collection<V>> asMap()" ], [ "entries", "org.apache.commons.collections4", "MultiValuedMap", "public abstract Collection<Map.Entry<K, V>> entries()" ], [ "keys", "org.apache.commons.collections4", "MultiValuedMap", "public abstract MultiSet<K> keys()" ], [ "containsKey", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean containsKey(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "get", "org.apache.commons.collections4", "ListValuedMap", "List<V> get(K key)" ], [ "putAll", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean putAll(K arg0, Iterable<? extends V> arg1)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "containsValue", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean containsValue(Object arg0)" ], [ "removeMapping", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean removeMapping(Object arg0, Object arg1)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean isEmpty()" ], [ "remove", "org.apache.commons.collections4", "MultiValuedMap", "public abstract Collection<V> remove(Object arg0)" ], [ "put", "org.apache.commons.collections4", "MultiValuedMap", "public abstract boolean put(K arg0, V arg1)" ], [ "get", "org.apache.commons.collections4", "MultiValuedMap", "public abstract Collection<V> get(K arg0)" ], [ "values", "org.apache.commons.collections4", "MultiValuedMap", "public abstract Collection<V> values()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toArray", "java.util", "List", "public abstract Object[] toArray()" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator()" ], [ "indexOf", "java.util", "List", "public abstract int indexOf(Object arg0)" ], [ "remove", "java.util", "List", "public abstract E remove(int arg0)" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(int arg0, Collection<? extends E> arg1)" ], [ "subList", "java.util", "List", "public abstract List<E> subList(int arg0, int arg1)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator(int arg0)" ], [ "set", "java.util", "List", "public abstract E set(int arg0, E arg1)" ], [ "removeAll", "java.util", "List", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "contains", "java.util", "List", "public abstract boolean contains(Object arg0)" ], [ "get", "java.util", "List", "public abstract E get(int arg0)" ], [ "lastIndexOf", "java.util", "List", "public abstract int lastIndexOf(Object arg0)" ], [ "spliterator", "java.util", "List", "public default Spliterator<E> spliterator()" ], [ "equals", "java.util", "List", "public abstract boolean equals(Object arg0)" ], [ "size", "java.util", "List", "public abstract int size()" ], [ "containsAll", "java.util", "List", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "retainAll", "java.util", "List", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "isEmpty", "java.util", "List", "public abstract boolean isEmpty()" ], [ "hashCode", "java.util", "List", "public abstract int hashCode()" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "remove", "java.util", "List", "public abstract boolean remove(Object arg0)" ], [ "add", "java.util", "List", "public abstract boolean add(E arg0)" ], [ "toArray", "java.util", "List", "public abstract <T> T[] toArray(T[] arg0)" ], [ "iterator", "java.util", "List", "public abstract Iterator<E> iterator()" ], [ "removeAll", "java.util", "Collection", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "size", "java.util", "Collection", "public abstract int size()" ], [ "spliterator", "java.util", "Collection", "public default Spliterator<E> spliterator()" ], [ "retainAll", "java.util", "Collection", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "addAll", "java.util", "Collection", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "iterator", "java.util", "Collection", "public abstract Iterator<E> iterator()" ], [ "toArray", "java.util", "Collection", "public abstract Object[] toArray()" ], [ "contains", "java.util", "Collection", "public abstract boolean contains(Object arg0)" ], [ "containsAll", "java.util", "Collection", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "toArray", "java.util", "Collection", "public abstract <T> T[] toArray(T[] arg0)" ], [ "removeIf", "java.util", "Collection", "public default boolean removeIf(Predicate<? super E> arg0)" ], [ "isEmpty", "java.util", "Collection", "public abstract boolean isEmpty()" ], [ "stream", "java.util", "Collection", "public default Stream<E> stream()" ], [ "remove", "java.util", "Collection", "public abstract boolean remove(Object arg0)" ], [ "parallelStream", "java.util", "Collection", "public default Stream<E> parallelStream()" ], [ "add", "java.util", "Collection", "public abstract boolean add(E arg0)" ], [ "toArray", "java.util", "Collection", "public default <T> T[] toArray(IntFunction<T[]> arg0)" ], [ "equals", "java.util", "Collection", "public abstract boolean equals(Object arg0)" ], [ "hashCode", "java.util", "Collection", "public abstract int hashCode()" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]