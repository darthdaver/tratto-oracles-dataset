[
    {
        "id": 18946,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "NelderMeadSimplex",
        "javadocTag": "@throws org.apache.commons.math3.exception.DimensionMismatchException if there is a dimension mismatch in the reference simplex.",
        "methodJavadoc": "    /**\n     * Build a Nelder-Mead simplex with specified coefficients.\n     *\n     * @param referenceSimplex Reference simplex. See\n     * {@link AbstractSimplex#AbstractSimplex(double[][])}.\n     * @param rho Reflection coefficient.\n     * @param khi Expansion coefficient.\n     * @param gamma Contraction coefficient.\n     * @param sigma Shrinkage coefficient.\n     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n     * if the reference simplex does not contain at least one point.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if there is a dimension mismatch in the reference simplex.\n     */",
        "methodSourceCode": "public NelderMeadSimplex(final double[][] referenceSimplex, final double rho, final double khi, final double gamma, final double sigma){\n    super(referenceSimplex);\n    this.rho = rho;\n    this.khi = khi;\n    this.gamma = gamma;\n    this.sigma = sigma;\n}",
        "classJavadoc": "/**\n * This class implements the Nelder-Mead simplex algorithm.\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.Comparator;\n\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.analysis.MultivariateFunction;\n\n/**\n * This class implements the Nelder-Mead simplex algorithm.\n *\n * @since 3.0\n */\npublic class NelderMeadSimplex extends AbstractSimplex {\n    /** Default value for {@link #rho}: {@value}. */\n    private static final double DEFAULT_RHO = 1;\n    /** Default value for {@link #khi}: {@value}. */\n    private static final double DEFAULT_KHI = 2;\n    /** Default value for {@link #gamma}: {@value}. */\n    private static final double DEFAULT_GAMMA = 0.5;\n    /** Default value for {@link #sigma}: {@value}. */\n    private static final double DEFAULT_SIGMA = 0.5;\n    /** Reflection coefficient. */\n    private final double rho;\n    /** Expansion coefficient. */\n    private final double khi;\n    /** Contraction coefficient. */\n    private final double gamma;\n    /** Shrinkage coefficient. */\n    private final double sigma;\n\n    /**\n     * Build a Nelder-Mead simplex with default coefficients.\n     * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5\n     * for both gamma and sigma.\n     *\n     * @param n Dimension of the simplex.\n     */\n    public NelderMeadSimplex(final int n) {\n        this(n, 1d);\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with default coefficients.\n     * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5\n     * for both gamma and sigma.\n     *\n     * @param n Dimension of the simplex.\n     * @param sideLength Length of the sides of the default (hypercube)\n     * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.\n     */\n    public NelderMeadSimplex(final int n, double sideLength) {\n        this(n, sideLength,\n             DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with specified coefficients.\n     *\n     * @param n Dimension of the simplex. See\n     * {@link AbstractSimplex#AbstractSimplex(int,double)}.\n     * @param sideLength Length of the sides of the default (hypercube)\n     * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.\n     * @param rho Reflection coefficient.\n     * @param khi Expansion coefficient.\n     * @param gamma Contraction coefficient.\n     * @param sigma Shrinkage coefficient.\n     */\n    public NelderMeadSimplex(final int n, double sideLength,\n                             final double rho, final double khi,\n                             final double gamma, final double sigma) {\n        super(n, sideLength);\n\n        this.rho = rho;\n        this.khi = khi;\n        this.gamma = gamma;\n        this.sigma = sigma;\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with specified coefficients.\n     *\n     * @param n Dimension of the simplex. See\n     * {@link AbstractSimplex#AbstractSimplex(int)}.\n     * @param rho Reflection coefficient.\n     * @param khi Expansion coefficient.\n     * @param gamma Contraction coefficient.\n     * @param sigma Shrinkage coefficient.\n     */\n    public NelderMeadSimplex(final int n,\n                             final double rho, final double khi,\n                             final double gamma, final double sigma) {\n        this(n, 1d, rho, khi, gamma, sigma);\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with default coefficients.\n     * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5\n     * for both gamma and sigma.\n     *\n     * @param steps Steps along the canonical axes representing box edges.\n     * They may be negative but not zero. See\n     */\n    public NelderMeadSimplex(final double[] steps) {\n        this(steps, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with specified coefficients.\n     *\n     * @param steps Steps along the canonical axes representing box edges.\n     * They may be negative but not zero. See\n     * {@link AbstractSimplex#AbstractSimplex(double[])}.\n     * @param rho Reflection coefficient.\n     * @param khi Expansion coefficient.\n     * @param gamma Contraction coefficient.\n     * @param sigma Shrinkage coefficient.\n     * @throws IllegalArgumentException if one of the steps is zero.\n     */\n    public NelderMeadSimplex(final double[] steps,\n                             final double rho, final double khi,\n                             final double gamma, final double sigma) {\n        super(steps);\n\n        this.rho = rho;\n        this.khi = khi;\n        this.gamma = gamma;\n        this.sigma = sigma;\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with default coefficients.\n     * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5\n     * for both gamma and sigma.\n     *\n     * @param referenceSimplex Reference simplex. See\n     * {@link AbstractSimplex#AbstractSimplex(double[][])}.\n     */\n    public NelderMeadSimplex(final double[][] referenceSimplex) {\n        this(referenceSimplex, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);\n    }\n\n    /**\n     * Build a Nelder-Mead simplex with specified coefficients.\n     *\n     * @param referenceSimplex Reference simplex. See\n     * {@link AbstractSimplex#AbstractSimplex(double[][])}.\n     * @param rho Reflection coefficient.\n     * @param khi Expansion coefficient.\n     * @param gamma Contraction coefficient.\n     * @param sigma Shrinkage coefficient.\n     * @throws org.apache.commons.math3.exception.NotStrictlyPositiveException\n     * if the reference simplex does not contain at least one point.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if there is a dimension mismatch in the reference simplex.\n     */\n    public NelderMeadSimplex(final double[][] referenceSimplex,\n                             final double rho, final double khi,\n                             final double gamma, final double sigma) {\n        super(referenceSimplex);\n\n        this.rho = rho;\n        this.khi = khi;\n        this.gamma = gamma;\n        this.sigma = sigma;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public void iterate(final MultivariateFunction evaluationFunction,\n                        final Comparator<PointValuePair> comparator) {\n        // The simplex has n + 1 points if dimension is n.\n        final int n = getDimension();\n\n        // Interesting values.\n        final PointValuePair best = getPoint(0);\n        final PointValuePair secondBest = getPoint(n - 1);\n        final PointValuePair worst = getPoint(n);\n        final double[] xWorst = worst.getPointRef();\n\n        // Compute the centroid of the best vertices (dismissing the worst\n        // point at index n).\n        final double[] centroid = new double[n];\n        for (int i = 0; i < n; i++) {\n            final double[] x = getPoint(i).getPointRef();\n            for (int j = 0; j < n; j++) {\n                centroid[j] += x[j];\n            }\n        }\n        final double scaling = 1.0 / n;\n        for (int j = 0; j < n; j++) {\n            centroid[j] *= scaling;\n        }\n\n        // compute the reflection point\n        final double[] xR = new double[n];\n        for (int j = 0; j < n; j++) {\n            xR[j] = centroid[j] + rho * (centroid[j] - xWorst[j]);\n        }\n        final PointValuePair reflected\n            = new PointValuePair(xR, evaluationFunction.value(xR), false);\n\n        if (comparator.compare(best, reflected) <= 0 &&\n            comparator.compare(reflected, secondBest) < 0) {\n            // Accept the reflected point.\n            replaceWorstPoint(reflected, comparator);\n        } else if (comparator.compare(reflected, best) < 0) {\n            // Compute the expansion point.\n            final double[] xE = new double[n];\n            for (int j = 0; j < n; j++) {\n                xE[j] = centroid[j] + khi * (xR[j] - centroid[j]);\n            }\n            final PointValuePair expanded\n                = new PointValuePair(xE, evaluationFunction.value(xE), false);\n\n            if (comparator.compare(expanded, reflected) < 0) {\n                // Accept the expansion point.\n                replaceWorstPoint(expanded, comparator);\n            } else {\n                // Accept the reflected point.\n                replaceWorstPoint(reflected, comparator);\n            }\n        } else {\n            if (comparator.compare(reflected, worst) < 0) {\n                // Perform an outside contraction.\n                final double[] xC = new double[n];\n                for (int j = 0; j < n; j++) {\n                    xC[j] = centroid[j] + gamma * (xR[j] - centroid[j]);\n                }\n                final PointValuePair outContracted\n                    = new PointValuePair(xC, evaluationFunction.value(xC), false);\n                if (comparator.compare(outContracted, reflected) <= 0) {\n                    // Accept the contraction point.\n                    replaceWorstPoint(outContracted, comparator);\n                    return;\n                }\n            } else {\n                // Perform an inside contraction.\n                final double[] xC = new double[n];\n                for (int j = 0; j < n; j++) {\n                    xC[j] = centroid[j] - gamma * (centroid[j] - xWorst[j]);\n                }\n                final PointValuePair inContracted\n                    = new PointValuePair(xC, evaluationFunction.value(xC), false);\n\n                if (comparator.compare(inContracted, worst) < 0) {\n                    // Accept the contraction point.\n                    replaceWorstPoint(inContracted, comparator);\n                    return;\n                }\n            }\n\n            // Perform a shrink.\n            final double[] xSmallest = getPoint(0).getPointRef();\n            for (int i = 1; i <= n; i++) {\n                final double[] x = getPoint(i).getPoint();\n                for (int j = 0; j < n; j++) {\n                    x[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n                }\n                setPoint(i, new PointValuePair(x, Double.NaN, false));\n            }\n            evaluate(evaluationFunction, comparator);\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "3",
                "int"
            ],
            [
                "3",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "referenceSimplex",
                "",
                "double[][]"
            ],
            [
                "rho",
                "",
                "double"
            ],
            [
                "khi",
                "",
                "double"
            ],
            [
                "gamma",
                "",
                "double"
            ],
            [
                "sigma",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getDimension",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "AbstractSimplex",
                "public int getDimension()"
            ],
            [
                "getPoint",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "AbstractSimplex",
                "public PointValuePair getPoint(int arg0)"
            ],
            [
                "getPoints",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "AbstractSimplex",
                "public PointValuePair[] getPoints()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getSize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "AbstractSimplex",
                "public int getSize()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "",
                "double[][]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[][]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[][]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[][]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[][]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "length",
                "",
                "double[][]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 18953,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@throws TooManyEvaluationsException if the maximal number of\nevaluations is exceeded.",
        "methodJavadoc": "    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */",
        "methodSourceCode": "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException{\n    // Set up base class and perform computation.\n    return super.optimize(optData);\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "optData",
                "org.apache.commons.math3.optim",
                "OptimizationData[]"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "getPoint",
                "org.apache.commons.math3.optim",
                "PointValuePair",
                "public double[] getPoint()"
            ],
            [
                "getPointRef",
                "org.apache.commons.math3.optim",
                "PointValuePair",
                "public double[] getPointRef()"
            ],
            [
                "getValue",
                "org.apache.commons.math3.util",
                "Pair",
                "public V getValue()"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Pair",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "org.apache.commons.math3.util",
                "Pair",
                "public int hashCode()"
            ],
            [
                "getKey",
                "org.apache.commons.math3.util",
                "Pair",
                "public K getKey()"
            ],
            [
                "toString",
                "org.apache.commons.math3.util",
                "Pair",
                "public String toString()"
            ],
            [
                "getFirst",
                "org.apache.commons.math3.util",
                "Pair",
                "public K getFirst()"
            ],
            [
                "getSecond",
                "org.apache.commons.math3.util",
                "Pair",
                "public V getSecond()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ],
            [
                "length",
                "org.apache.commons.math3.optim",
                "OptimizationData[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 18968,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@param vals History queue.",
        "methodJavadoc": "    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */",
        "methodSourceCode": "private static void push(double[] vals, double val){\n    for (int i = vals.length - 1; i > 0; i--) {\n        vals[i] = vals[i - 1];\n    }\n    vals[0] = val;\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "vals",
                "",
                "double[]"
            ],
            [
                "val",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ],
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 18982,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@return the matrix where the elements of m and n are element-wise multiplied.",
        "methodJavadoc": "    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */",
        "methodSourceCode": "private static RealMatrix times(final RealMatrix m, final RealMatrix n){\n    final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n    for (int r = 0; r < m.getRowDimension(); r++) {\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n        }\n    }\n    return new Array2DRowRealMatrix(d, false);\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "m",
                "org.apache.commons.math3.linear",
                "RealMatrix"
            ],
            [
                "n",
                "org.apache.commons.math3.linear",
                "RealMatrix"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int[] arg0, int[] arg1) throws NullArgumentException, NoDataException, OutOfRangeException"
            ],
            [
                "getNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getNorm()"
            ],
            [
                "getEntry",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getEntry(int arg0, int arg1) throws OutOfRangeException"
            ],
            [
                "copy",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix copy()"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector operate(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "scalarMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarMultiply(double arg0)"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "add",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix add(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "transpose",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix transpose()"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix preMultiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "getData",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[][] getData()"
            ],
            [
                "createMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix createMatrix(int arg0, int arg1) throws NotStrictlyPositiveException"
            ],
            [
                "getTrace",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getTrace() throws NonSquareMatrixException"
            ],
            [
                "getColumn",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getColumn(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] operate(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getRowMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getRowMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "getRow",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getRow(int arg0) throws OutOfRangeException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector preMultiply(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "subtract",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix subtract(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getColumnVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getColumnVector(int arg0) throws OutOfRangeException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] preMultiply(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "getFrobeniusNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getFrobeniusNorm()"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "scalarAdd",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarAdd(double arg0)"
            ],
            [
                "getRowVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getRowVector(int arg0) throws OutOfRangeException"
            ],
            [
                "getColumnMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getColumnMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int arg0, int arg1, int arg2, int arg3) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "power",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix power(int arg0) throws NotPositiveException, NonSquareMatrixException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix multiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "isSquare",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract boolean isSquare()"
            ],
            [
                "getRowDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getRowDimension()"
            ],
            [
                "getColumnDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getColumnDimension()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 18983,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@param m Input matrix 1.",
        "methodJavadoc": "    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */",
        "methodSourceCode": "private static RealMatrix divide(final RealMatrix m, final RealMatrix n){\n    final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n    for (int r = 0; r < m.getRowDimension(); r++) {\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n        }\n    }\n    return new Array2DRowRealMatrix(d, false);\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "m",
                "org.apache.commons.math3.linear",
                "RealMatrix"
            ],
            [
                "n",
                "org.apache.commons.math3.linear",
                "RealMatrix"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "getColumnVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getColumnVector(int arg0) throws OutOfRangeException"
            ],
            [
                "getEntry",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getEntry(int arg0, int arg1) throws OutOfRangeException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "createMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix createMatrix(int arg0, int arg1) throws NotStrictlyPositiveException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getRow",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getRow(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "getRowVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getRowVector(int arg0) throws OutOfRangeException"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int arg0, int arg1, int arg2, int arg3) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "add",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix add(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "copy",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix copy()"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix preMultiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "multiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix multiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "power",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix power(int arg0) throws NotPositiveException, NonSquareMatrixException"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int[] arg0, int[] arg1) throws NullArgumentException, NoDataException, OutOfRangeException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] preMultiply(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getNorm()"
            ],
            [
                "getData",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[][] getData()"
            ],
            [
                "scalarAdd",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarAdd(double arg0)"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector operate(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "transpose",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix transpose()"
            ],
            [
                "getFrobeniusNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getFrobeniusNorm()"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix subtract(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "getColumnMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getColumnMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector preMultiply(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "getTrace",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getTrace() throws NonSquareMatrixException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getColumn",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getColumn(int arg0) throws OutOfRangeException"
            ],
            [
                "scalarMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarMultiply(double arg0)"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] operate(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "getRowMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getRowMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "getColumnDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getColumnDimension()"
            ],
            [
                "getRowDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getRowDimension()"
            ],
            [
                "isSquare",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract boolean isSquare()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 19005,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@return n-by-m matrix of 0 values out of diagonal, and 1 values on\nthe diagonal.",
        "methodJavadoc": "    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */",
        "methodSourceCode": "private static RealMatrix eye(int n, int m){\n    final double[][] d = new double[n][m];\n    for (int r = 0; r < n; r++) {\n        if (r < m) {\n            d[r][r] = 1;\n        }\n    }\n    return new Array2DRowRealMatrix(d, false);\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "n",
                "",
                "int"
            ],
            [
                "m",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "power",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix power(int arg0) throws NotPositiveException, NonSquareMatrixException"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int arg0, int arg1, int arg2, int arg3) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getTrace",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getTrace() throws NonSquareMatrixException"
            ],
            [
                "copy",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix copy()"
            ],
            [
                "getColumnMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getColumnMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "multiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix multiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] preMultiply(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix preMultiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector operate(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector preMultiply(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "getColumn",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getColumn(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "add",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix add(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "getRowMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getRowMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getEntry",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getEntry(int arg0, int arg1) throws OutOfRangeException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "getRow",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getRow(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "transpose",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix transpose()"
            ],
            [
                "scalarMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarMultiply(double arg0)"
            ],
            [
                "getData",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[][] getData()"
            ],
            [
                "getNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getNorm()"
            ],
            [
                "getFrobeniusNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getFrobeniusNorm()"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getColumnVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getColumnVector(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int[] arg0, int[] arg1) throws NullArgumentException, NoDataException, OutOfRangeException"
            ],
            [
                "subtract",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix subtract(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "createMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix createMatrix(int arg0, int arg1) throws NotStrictlyPositiveException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "scalarAdd",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarAdd(double arg0)"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] operate(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "getRowVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getRowVector(int arg0) throws OutOfRangeException"
            ],
            [
                "getColumnDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getColumnDimension()"
            ],
            [
                "getRowDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getRowDimension()"
            ],
            [
                "isSquare",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract boolean isSquare()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 19010,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@param n Number of row replicates.",
        "methodJavadoc": "    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */",
        "methodSourceCode": "private static RealMatrix repmat(final RealMatrix mat, int n, int m){\n    final int rd = mat.getRowDimension();\n    final int cd = mat.getColumnDimension();\n    final double[][] d = new double[n * rd][m * cd];\n    for (int r = 0; r < n * rd; r++) {\n        for (int c = 0; c < m * cd; c++) {\n            d[r][c] = mat.getEntry(r % rd, c % cd);\n        }\n    }\n    return new Array2DRowRealMatrix(d, false);\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "mat",
                "org.apache.commons.math3.linear",
                "RealMatrix"
            ],
            [
                "n",
                "",
                "int"
            ],
            [
                "m",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int arg0, int arg1, int arg2, int arg3) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getRowVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getRowVector(int arg0) throws OutOfRangeException"
            ],
            [
                "getTrace",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getTrace() throws NonSquareMatrixException"
            ],
            [
                "getRowMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getRowMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "multiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix multiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "add",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix add(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "getEntry",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getEntry(int arg0, int arg1) throws OutOfRangeException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "getRow",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getRow(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] operate(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] preMultiply(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "getFrobeniusNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getFrobeniusNorm()"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix preMultiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "subtract",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix subtract(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "getColumnMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getColumnMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "scalarAdd",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarAdd(double arg0)"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector preMultiply(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "copy",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix copy()"
            ],
            [
                "getData",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[][] getData()"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "createMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix createMatrix(int arg0, int arg1) throws NotStrictlyPositiveException"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector operate(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int[] arg0, int[] arg1) throws NullArgumentException, NoDataException, OutOfRangeException"
            ],
            [
                "transpose",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix transpose()"
            ],
            [
                "getColumnVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getColumnVector(int arg0) throws OutOfRangeException"
            ],
            [
                "power",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix power(int arg0) throws NotPositiveException, NonSquareMatrixException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "scalarMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarMultiply(double arg0)"
            ],
            [
                "getNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getNorm()"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "getColumn",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getColumn(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getColumnDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getColumnDimension()"
            ],
            [
                "isSquare",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract boolean isSquare()"
            ],
            [
                "getRowDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getRowDimension()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 19015,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@param step Step size.",
        "methodJavadoc": "    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */",
        "methodSourceCode": "private static RealMatrix sequence(double start, double end, double step){\n    final int size = (int) ((end - start) / step + 1);\n    final double[][] d = new double[size][1];\n    double value = start;\n    for (int r = 0; r < size; r++) {\n        d[r][0] = value;\n        value += step;\n    }\n    return new Array2DRowRealMatrix(d, false);\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "start",
                "",
                "double"
            ],
            [
                "end",
                "",
                "double"
            ],
            [
                "step",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "scalarAdd",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarAdd(double arg0)"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector operate(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "getFrobeniusNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getFrobeniusNorm()"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "operate",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] operate(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "getColumnVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getColumnVector(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "getColumnMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getColumnMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "power",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix power(int arg0) throws NotPositiveException, NonSquareMatrixException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixPreservingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int arg0, int arg1, int arg2, int arg3) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "multiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix multiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "scalarMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix scalarMultiply(double arg0)"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector preMultiply(RealVector arg0) throws DimensionMismatchException"
            ],
            [
                "getRowMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getRowMatrix(int arg0) throws OutOfRangeException"
            ],
            [
                "add",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix add(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] preMultiply(double[] arg0) throws DimensionMismatchException"
            ],
            [
                "createMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix createMatrix(int arg0, int arg1) throws NotStrictlyPositiveException"
            ],
            [
                "transpose",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix transpose()"
            ],
            [
                "copy",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix copy()"
            ],
            [
                "getSubMatrix",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix getSubMatrix(int[] arg0, int[] arg1) throws NullArgumentException, NoDataException, OutOfRangeException"
            ],
            [
                "getData",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[][] getData()"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixPreservingVisitor arg0)"
            ],
            [
                "getRow",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getRow(int arg0) throws OutOfRangeException"
            ],
            [
                "getEntry",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getEntry(int arg0, int arg1) throws OutOfRangeException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "walkInOptimizedOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInOptimizedOrder(RealMatrixChangingVisitor arg0)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix subtract(RealMatrix arg0) throws MatrixDimensionMismatchException"
            ],
            [
                "getTrace",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getTrace() throws NonSquareMatrixException"
            ],
            [
                "walkInRowOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInRowOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "getColumn",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double[] getColumn(int arg0) throws OutOfRangeException"
            ],
            [
                "getRowVector",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealVector getRowVector(int arg0) throws OutOfRangeException"
            ],
            [
                "walkInColumnOrder",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double walkInColumnOrder(RealMatrixChangingVisitor arg0, int arg1, int arg2, int arg3, int arg4) throws OutOfRangeException, NumberIsTooSmallException"
            ],
            [
                "preMultiply",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract RealMatrix preMultiply(RealMatrix arg0) throws DimensionMismatchException"
            ],
            [
                "getNorm",
                "org.apache.commons.math3.linear",
                "RealMatrix",
                "public abstract double getNorm()"
            ],
            [
                "isSquare",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract boolean isSquare()"
            ],
            [
                "getRowDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getRowDimension()"
            ],
            [
                "getColumnDimension",
                "org.apache.commons.math3.linear",
                "AnyMatrix",
                "public abstract int getColumnDimension()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 19029,
        "oracle": "size >= 0;",
        "oracleType": "PRE",
        "projectName": "commons-math3-3.6.1",
        "packageName": "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
        "className": "CMAESOptimizer",
        "javadocTag": "@param size Length of random array.",
        "methodJavadoc": "    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */",
        "methodSourceCode": "private double[] randn(int size){\n    final double[] randn = new double[size];\n    for (int i = 0; i < size; i++) {\n        randn[i] = random.nextGaussian();\n    }\n    return randn;\n}",
        "classJavadoc": "/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */",
        "classSourceCode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.optim.nonlinear.scalar.noderiv;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.exception.NotPositiveException;\nimport org.apache.commons.math3.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math3.exception.OutOfRangeException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.optim.ConvergenceChecker;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathArrays;\n\n/**\n * An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * <p>\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.\n * <p>\n * In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.\n * <p>\n * The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.\n * <p>\n * This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.\n * <p>\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @since 3.0\n */\npublic class CMAESOptimizer\n    extends MultivariateOptimizer {\n    // global search parameters\n    /**\n     * Population size, offspring number. The primary strategy parameter to play\n     * with, which can be increased from its default value. Increasing the\n     * population size improves global search properties in exchange to speed.\n     * Speed decreases, as a rule, at most linearly with increasing population\n     * size. It is advisable to begin with the default small population size.\n     */\n    private int lambda; // population size\n    /**\n     * Covariance update mechanism, default is active CMA. isActiveCMA = true\n     * turns on \"active CMA\" with a negative update of the covariance matrix and\n     * checks for positive definiteness. OPTS.CMA.active = 2 does not check for\n     * pos. def. and is numerically faster. Active CMA usually speeds up the\n     * adaptation.\n     */\n    private final boolean isActiveCMA;\n    /**\n     * Determines how often a new random offspring is generated in case it is\n     * not feasible / beyond the defined limits, default is 0.\n     */\n    private final int checkFeasableCount;\n    /**\n     * @see Sigma\n     */\n    private double[] inputSigma;\n    /** Number of objective variables/problem dimension */\n    private int dimension;\n    /**\n     * Defines the number of initial iterations, where the covariance matrix\n     * remains diagonal and the algorithm has internally linear time complexity.\n     * diagonalOnly = 1 means keeping the covariance matrix always diagonal and\n     * this setting also exhibits linear space complexity. This can be\n     * particularly useful for dimension > 100.\n     * @see <a href=\"http://hal.archives-ouvertes.fr/inria-00287367/en\">A Simple Modification in CMA-ES</a>\n     */\n    private int diagonalOnly;\n    /** Number of objective variables/problem dimension */\n    private boolean isMinimize = true;\n    /** Indicates whether statistic data is collected. */\n    private final boolean generateStatistics;\n\n    // termination criteria\n    /** Maximal number of iterations allowed. */\n    private final int maxIterations;\n    /** Limit for fitness value. */\n    private final double stopFitness;\n    /** Stop if x-changes larger stopTolUpX. */\n    private double stopTolUpX;\n    /** Stop if x-change smaller stopTolX. */\n    private double stopTolX;\n    /** Stop if fun-changes smaller stopTolFun. */\n    private double stopTolFun;\n    /** Stop if back fun-changes smaller stopTolHistFun. */\n    private double stopTolHistFun;\n\n    // selection strategy parameters\n    /** Number of parents/points for recombination. */\n    private int mu; //\n    /** log(mu + 0.5), stored for efficiency. */\n    private double logMu2;\n    /** Array for weighted recombination. */\n    private RealMatrix weights;\n    /** Variance-effectiveness of sum w_i x_i. */\n    private double mueff; //\n\n    // dynamic strategy parameters and constants\n    /** Overall standard deviation - search volume. */\n    private double sigma;\n    /** Cumulation constant. */\n    private double cc;\n    /** Cumulation constant for step-size. */\n    private double cs;\n    /** Damping for step-size. */\n    private double damps;\n    /** Learning rate for rank-one update. */\n    private double ccov1;\n    /** Learning rate for rank-mu update' */\n    private double ccovmu;\n    /** Expectation of ||N(0,I)|| == norm(randn(N,1)). */\n    private double chiN;\n    /** Learning rate for rank-one update - diagonalOnly */\n    private double ccov1Sep;\n    /** Learning rate for rank-mu update - diagonalOnly */\n    private double ccovmuSep;\n\n    // CMA internal values - updated each generation\n    /** Objective variables. */\n    private RealMatrix xmean;\n    /** Evolution path. */\n    private RealMatrix pc;\n    /** Evolution path for sigma. */\n    private RealMatrix ps;\n    /** Norm of ps, stored for efficiency. */\n    private double normps;\n    /** Coordinate system. */\n    private RealMatrix B;\n    /** Scaling. */\n    private RealMatrix D;\n    /** B*D, stored for efficiency. */\n    private RealMatrix BD;\n    /** Diagonal of sqrt(D), stored for efficiency. */\n    private RealMatrix diagD;\n    /** Covariance matrix. */\n    private RealMatrix C;\n    /** Diagonal of C, used for diagonalOnly. */\n    private RealMatrix diagC;\n    /** Number of iterations already performed. */\n    private int iterations;\n\n    /** History queue of best values. */\n    private double[] fitnessHistory;\n    /** Size of history queue of best values. */\n    private int historySize;\n\n    /** Random generator. */\n    private final RandomGenerator random;\n\n    /** History of sigma values. */\n    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();\n    /** History of mean matrix. */\n    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();\n    /** History of fitness values. */\n    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();\n    /** History of D matrix. */\n    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();\n\n    /**\n     * @param maxIterations Maximal number of iterations.\n     * @param stopFitness Whether to stop if objective function value is smaller than\n     * {@code stopFitness}.\n     * @param isActiveCMA Chooses the covariance matrix update method.\n     * @param diagonalOnly Number of initial iterations, where the covariance matrix\n     * remains diagonal.\n     * @param checkFeasableCount Determines how often new random objective variables are\n     * generated in case they are out of bounds.\n     * @param random Random generator.\n     * @param generateStatistics Whether statistic data is collected.\n     * @param checker Convergence checker.\n     *\n     * @since 3.1\n     */\n    public CMAESOptimizer(int maxIterations,\n                          double stopFitness,\n                          boolean isActiveCMA,\n                          int diagonalOnly,\n                          int checkFeasableCount,\n                          RandomGenerator random,\n                          boolean generateStatistics,\n                          ConvergenceChecker<PointValuePair> checker) {\n        super(checker);\n        this.maxIterations = maxIterations;\n        this.stopFitness = stopFitness;\n        this.isActiveCMA = isActiveCMA;\n        this.diagonalOnly = diagonalOnly;\n        this.checkFeasableCount = checkFeasableCount;\n        this.random = random;\n        this.generateStatistics = generateStatistics;\n    }\n\n    /**\n     * @return History of sigma values.\n     */\n    public List<Double> getStatisticsSigmaHistory() {\n        return statisticsSigmaHistory;\n    }\n\n    /**\n     * @return History of mean matrix.\n     */\n    public List<RealMatrix> getStatisticsMeanHistory() {\n        return statisticsMeanHistory;\n    }\n\n    /**\n     * @return History of fitness values.\n     */\n    public List<Double> getStatisticsFitnessHistory() {\n        return statisticsFitnessHistory;\n    }\n\n    /**\n     * @return History of D matrix.\n     */\n    public List<RealMatrix> getStatisticsDHistory() {\n        return statisticsDHistory;\n    }\n\n    /**\n     * Input sigma values.\n     * They define the initial coordinate-wise standard deviations for\n     * sampling new search points around the initial guess.\n     * It is suggested to set them to the estimated distance from the\n     * initial to the desired optimum.\n     * Small values induce the search to be more local (and very small\n     * values are more likely to find a local optimum close to the initial\n     * guess).\n     * Too small values might however lead to early termination.\n     */\n    public static class Sigma implements OptimizationData {\n        /** Sigma values. */\n        private final double[] sigma;\n\n        /**\n         * @param s Sigma values.\n         * @throws NotPositiveException if any of the array entries is smaller\n         * than zero.\n         */\n        public Sigma(double[] s)\n            throws NotPositiveException {\n            for (int i = 0; i < s.length; i++) {\n                if (s[i] < 0) {\n                    throw new NotPositiveException(s[i]);\n                }\n            }\n\n            sigma = s.clone();\n        }\n\n        /**\n         * @return the sigma values.\n         */\n        public double[] getSigma() {\n            return sigma.clone();\n        }\n    }\n\n    /**\n     * Population size.\n     * The number of offspring is the primary strategy parameter.\n     * In the absence of better clues, a good default could be an\n     * integer close to {@code 4 + 3 ln(n)}, where {@code n} is the\n     * number of optimized parameters.\n     * Increasing the population size improves global search properties\n     * at the expense of speed (which in general decreases at most\n     * linearly with increasing population size).\n     */\n    public static class PopulationSize implements OptimizationData {\n        /** Population size. */\n        private final int lambda;\n\n        /**\n         * @param size Population size.\n         * @throws NotStrictlyPositiveException if {@code size <= 0}.\n         */\n        public PopulationSize(int size)\n            throws NotStrictlyPositiveException {\n            if (size <= 0) {\n                throw new NotStrictlyPositiveException(size);\n            }\n            lambda = size;\n        }\n\n        /**\n         * @return the population size.\n         */\n        public int getPopulationSize() {\n            return lambda;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param optData Optimization data. In addition to those documented in\n     * {@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\n     * MultivariateOptimizer}, this method will register the following data:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     * @return {@inheritDoc}\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     */\n    @Override\n    public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set up base class and perform computation.\n        return super.optimize(optData);\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        ValuePenaltyPair valuePenalty = fitfun.value(guess);\n        double bestValue = valuePenalty.value+valuePenalty.penalty;\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            final ValuePenaltyPair[] valuePenaltyPairs = new ValuePenaltyPair[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    valuePenaltyPairs[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n\n            // Compute fitnesses by adding value and penalty after scaling by value range.\n            double valueRange = valueRange(valuePenaltyPairs);\n            for (int iValue=0;iValue<valuePenaltyPairs.length;iValue++) {\n                 fitness[iValue] = valuePenaltyPairs[iValue].value + valuePenaltyPairs[iValue].penalty*valueRange;\n            }\n\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= FastMath.exp(FastMath.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null && lastResult != null &&\n                    getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                    break generationLoop;\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0 && bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                break generationLoop;\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * FastMath.max(FastMath.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                FastMath.max(historyWorst, worstFitness) -\n                FastMath.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && FastMath.max(historyWorst, bestFitness) -\n                FastMath.min(historyBest, bestFitness) == 0) {\n                sigma *= FastMath.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n\n    /**\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Sigma}</li>\n     *  <li>{@link PopulationSize}</li>\n     * </ul>\n     */\n    @Override\n    protected void parseOptimizationData(OptimizationData... optData) {\n        // Allow base class to register its own data.\n        super.parseOptimizationData(optData);\n\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Sigma) {\n                inputSigma = ((Sigma) data).getSigma();\n                continue;\n            }\n            if (data instanceof PopulationSize) {\n                lambda = ((PopulationSize) data).getPopulationSize();\n                continue;\n            }\n        }\n\n        checkParameters();\n    }\n\n    /**\n     * Checks dimensions and values of boundaries and inputSigma if defined.\n     */\n    private void checkParameters() {\n        final double[] init = getStartPoint();\n        final double[] lB = getLowerBound();\n        final double[] uB = getUpperBound();\n\n        if (inputSigma != null) {\n            if (inputSigma.length != init.length) {\n                throw new DimensionMismatchException(inputSigma.length, init.length);\n            }\n            for (int i = 0; i < init.length; i++) {\n                if (inputSigma[i] > uB[i] - lB[i]) {\n                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialization of the dynamic search parameters\n     *\n     * @param guess Initial guess for the arguments of the fitness function.\n     */\n    private void initializeCMA(double[] guess) {\n        if (lambda <= 0) {\n            throw new NotStrictlyPositiveException(lambda);\n        }\n        // initialize sigma\n        final double[][] sigmaArray = new double[guess.length][1];\n        for (int i = 0; i < guess.length; i++) {\n            sigmaArray[i][0] = inputSigma[i];\n        }\n        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);\n        sigma = max(insigma); // overall standard deviation\n\n        // initialize termination criteria\n        stopTolUpX = 1e3 * max(insigma);\n        stopTolX = 1e-11 * max(insigma);\n        stopTolFun = 1e-12;\n        stopTolHistFun = 1e-13;\n\n        // initialize selection strategy parameters\n        mu = lambda / 2; // number of parents/points for recombination\n        logMu2 = FastMath.log(mu + 0.5);\n        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);\n        double sumw = 0;\n        double sumwq = 0;\n        for (int i = 0; i < mu; i++) {\n            double w = weights.getEntry(i, 0);\n            sumw += w;\n            sumwq += w * w;\n        }\n        weights = weights.scalarMultiply(1 / sumw);\n        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i\n\n        // initialize dynamic strategy parameters and constants\n        cc = (4 + mueff / dimension) /\n                (dimension + 4 + 2 * mueff / dimension);\n        cs = (mueff + 2) / (dimension + mueff + 3.);\n        damps = (1 + 2 * FastMath.max(0, FastMath.sqrt((mueff - 1) /\n                                                       (dimension + 1)) - 1)) *\n            FastMath.max(0.3,\n                         1 - dimension / (1e-6 + maxIterations)) + cs; // minor increment\n        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);\n        ccovmu = FastMath.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /\n                              ((dimension + 2) * (dimension + 2) + mueff));\n        ccov1Sep = FastMath.min(1, ccov1 * (dimension + 1.5) / 3);\n        ccovmuSep = FastMath.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);\n        chiN = FastMath.sqrt(dimension) *\n                (1 - 1 / ((double) 4 * dimension) + 1 / ((double) 21 * dimension * dimension));\n        // intialize CMA internal values - updated each generation\n        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables\n        diagD = insigma.scalarMultiply(1 / sigma);\n        diagC = square(diagD);\n        pc = zeros(dimension, 1); // evolution paths for C and sigma\n        ps = zeros(dimension, 1); // B defines the coordinate system\n        normps = ps.getFrobeniusNorm();\n\n        B = eye(dimension, dimension);\n        D = ones(dimension, 1); // diagonal D defines the scaling\n        BD = times(B, repmat(diagD.transpose(), dimension, 1));\n        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance\n        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);\n        fitnessHistory = new double[historySize]; // history of fitness values\n        for (int i = 0; i < historySize; i++) {\n            fitnessHistory[i] = Double.MAX_VALUE;\n        }\n    }\n\n    /**\n     * Update of the evolution paths ps and pc.\n     *\n     * @param zmean Weighted row matrix of the gaussian random numbers generating\n     * the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     * @return hsig flag indicating a small correction.\n     */\n    private boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {\n        ps = ps.scalarMultiply(1 - cs).add(\n                B.multiply(zmean).scalarMultiply(\n                        FastMath.sqrt(cs * (2 - cs) * mueff)));\n        normps = ps.getFrobeniusNorm();\n        final boolean hsig = normps /\n            FastMath.sqrt(1 - FastMath.pow(1 - cs, 2 * iterations)) /\n            chiN < 1.4 + 2 / ((double) dimension + 1);\n        pc = pc.scalarMultiply(1 - cc);\n        if (hsig) {\n            pc = pc.add(xmean.subtract(xold).scalarMultiply(FastMath.sqrt(cc * (2 - cc) * mueff) / sigma));\n        }\n        return hsig;\n    }\n\n    /**\n     * Update of the covariance matrix C for diagonalOnly > 0\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArz Fitness-sorted matrix of the gaussian random values of the\n     * current offspring.\n     */\n    private void updateCovarianceDiagonalOnly(boolean hsig,\n                                              final RealMatrix bestArz) {\n        // minor correction if hsig==false\n        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);\n        oldFac += 1 - ccov1Sep - ccovmuSep;\n        diagC = diagC.scalarMultiply(oldFac) // regard old matrix\n            .add(square(pc).scalarMultiply(ccov1Sep)) // plus rank one update\n            .add((times(diagC, square(bestArz).multiply(weights))) // plus rank mu update\n                 .scalarMultiply(ccovmuSep));\n        diagD = sqrt(diagC); // replaces eig(C)\n        if (diagonalOnly > 1 &&\n            iterations > diagonalOnly) {\n            // full covariance matrix from now on\n            diagonalOnly = 0;\n            B = eye(dimension, dimension);\n            BD = diag(diagD);\n            C = diag(diagC);\n        }\n    }\n\n    /**\n     * Update of the covariance matrix C.\n     *\n     * @param hsig Flag indicating a small correction.\n     * @param bestArx Fitness-sorted matrix of the argument vectors producing the\n     * current offspring.\n     * @param arz Unsorted matrix containing the gaussian random values of the\n     * current offspring.\n     * @param arindex Indices indicating the fitness-order of the current offspring.\n     * @param xold xmean matrix of the previous generation.\n     */\n    private void updateCovariance(boolean hsig, final RealMatrix bestArx,\n                                  final RealMatrix arz, final int[] arindex,\n                                  final RealMatrix xold) {\n        double negccov = 0;\n        if (ccov1 + ccovmu > 0) {\n            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))\n                .scalarMultiply(1 / sigma); // mu difference vectors\n            final RealMatrix roneu = pc.multiply(pc.transpose())\n                .scalarMultiply(ccov1); // rank one update\n            // minor correction if hsig==false\n            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);\n            oldFac += 1 - ccov1 - ccovmu;\n            if (isActiveCMA) {\n                // Adapt covariance matrix C active CMA\n                negccov = (1 - ccovmu) * 0.25 * mueff /\n                    (FastMath.pow(dimension + 2, 1.5) + 2 * mueff);\n                // keep at least 0.66 in all directions, small popsize are most\n                // critical\n                final double negminresidualvariance = 0.66;\n                // where to make up for the variance loss\n                final double negalphaold = 0.5;\n                // prepare vectors, compute negative updating matrix Cneg\n                final int[] arReverseIndex = reverse(arindex);\n                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));\n                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));\n                final int[] idxnorms = sortedIndices(arnorms.getRow(0));\n                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);\n                final int[] idxReverse = reverse(idxnorms);\n                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);\n                arnorms = divide(arnormsReverse, arnormsSorted);\n                final int[] idxInv = inverse(idxnorms);\n                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);\n                // check and set learning rate negccov\n                final double negcovMax = (1 - negminresidualvariance) /\n                    square(arnormsInv).multiply(weights).getEntry(0, 0);\n                if (negccov > negcovMax) {\n                    negccov = negcovMax;\n                }\n                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));\n                final RealMatrix artmp = BD.multiply(arzneg);\n                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());\n                oldFac += negalphaold * negccov;\n                C = C.scalarMultiply(oldFac)\n                    .add(roneu) // regard old matrix\n                    .add(arpos.scalarMultiply( // plus rank one update\n                                              ccovmu + (1 - negalphaold) * negccov) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())))\n                    .subtract(Cneg.scalarMultiply(negccov));\n            } else {\n                // Adapt covariance matrix C - nonactive\n                C = C.scalarMultiply(oldFac) // regard old matrix\n                    .add(roneu) // plus rank one update\n                    .add(arpos.scalarMultiply(ccovmu) // plus rank mu update\n                         .multiply(times(repmat(weights, 1, dimension),\n                                         arpos.transpose())));\n            }\n        }\n        updateBD(negccov);\n    }\n\n    /**\n     * Update B and D from C.\n     *\n     * @param negccov Negative covariance factor.\n     */\n    private void updateBD(double negccov) {\n        if (ccov1 + ccovmu + negccov > 0 &&\n            (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {\n            // to achieve O(N^2)\n            C = triu(C, 0).add(triu(C, 1).transpose());\n            // enforce symmetry to prevent complex numbers\n            final EigenDecomposition eig = new EigenDecomposition(C);\n            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors\n            D = eig.getD();\n            diagD = diag(D);\n            if (min(diagD) <= 0) {\n                for (int i = 0; i < dimension; i++) {\n                    if (diagD.getEntry(i, 0) < 0) {\n                        diagD.setEntry(i, 0, 0);\n                    }\n                }\n                final double tfac = max(diagD) / 1e14;\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            if (max(diagD) > 1e14 * min(diagD)) {\n                final double tfac = max(diagD) / 1e14 - min(diagD);\n                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));\n                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));\n            }\n            diagC = diag(C);\n            diagD = sqrt(diagD); // D contains standard deviations now\n            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)\n        }\n    }\n\n    /**\n     * Pushes the current best fitness value in a history queue.\n     *\n     * @param vals History queue.\n     * @param val Current best fitness value.\n     */\n    private static void push(double[] vals, double val) {\n        for (int i = vals.length-1; i > 0; i--) {\n            vals[i] = vals[i-1];\n        }\n        vals[0] = val;\n    }\n\n    /**\n     * Sorts fitness values.\n     *\n     * @param doubles Array of values to be sorted.\n     * @return a sorted array of indices pointing into doubles.\n     */\n    private int[] sortedIndices(final double[] doubles) {\n        final DoubleIndex[] dis = new DoubleIndex[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            dis[i] = new DoubleIndex(doubles[i], i);\n        }\n        Arrays.sort(dis);\n        final int[] indices = new int[doubles.length];\n        for (int i = 0; i < doubles.length; i++) {\n            indices[i] = dis[i].index;\n        }\n        return indices;\n    }\n   /**\n     * Get range of values.\n     *\n     * @param vpPairs Array of valuePenaltyPairs to get range from.\n     * @return a double equal to maximum value minus minimum value.\n     */\n    private double valueRange(final ValuePenaltyPair[] vpPairs) {\n        double max = Double.NEGATIVE_INFINITY;\n        double min = Double.MAX_VALUE;\n        for (ValuePenaltyPair vpPair:vpPairs) {\n            if (vpPair.value > max) {\n                max = vpPair.value;\n            }\n            if (vpPair.value < min) {\n                min = vpPair.value;\n            }\n        }\n        return max-min;\n    }\n\n    /**\n     * Used to sort fitness values. Sorting is always in lower value first\n     * order.\n     */\n    private static class DoubleIndex implements Comparable<DoubleIndex> {\n        /** Value to compare. */\n        private final double value;\n        /** Index into sorted array. */\n        private final int index;\n\n        /**\n         * @param value Value to compare.\n         * @param index Index into sorted array.\n         */\n        DoubleIndex(double value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        /** {@inheritDoc} */\n        public int compareTo(DoubleIndex o) {\n            return Double.compare(value, o.value);\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public boolean equals(Object other) {\n\n            if (this == other) {\n                return true;\n            }\n\n            if (other instanceof DoubleIndex) {\n                return Double.compare(value, ((DoubleIndex) other).value) == 0;\n            }\n\n            return false;\n        }\n\n        /** {@inheritDoc} */\n        @Override\n        public int hashCode() {\n            long bits = Double.doubleToLongBits(value);\n            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);\n        }\n    }\n    /**\n     * Stores the value and penalty (for repair of out of bounds point).\n     */\n    private static class ValuePenaltyPair {\n        /** Objective function value. */\n        private double value;\n        /** Penalty value for repair of out out of bounds points. */\n        private double penalty;\n\n        /**\n         * @param value Function value.\n         * @param penalty Out-of-bounds penalty.\n        */\n        ValuePenaltyPair(final double value, final double penalty) {\n            this.value   = value;\n            this.penalty = penalty;\n        }\n    }\n\n\n    /**\n     * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n     * fitness value if out of range.\n     */\n    private class FitnessFunction {\n        /**\n         * Flag indicating whether the objective variables are forced into their\n         * bounds if defined\n         */\n        private final boolean isRepairMode;\n\n        /** Simple constructor.\n         */\n        FitnessFunction() {\n            isRepairMode = true;\n        }\n\n        /**\n         * @param point Normalized objective variables.\n         * @return the objective value + penalty for violated bounds.\n         */\n        public ValuePenaltyPair value(final double[] point) {\n            double value;\n            double penalty=0.0;\n            if (isRepairMode) {\n                double[] repaired = repair(point);\n                value = CMAESOptimizer.this.computeObjectiveValue(repaired);\n                penalty =  penalty(point, repaired);\n            } else {\n                value = CMAESOptimizer.this.computeObjectiveValue(point);\n            }\n            value = isMinimize ? value : -value;\n            penalty = isMinimize ? penalty : -penalty;\n            return new ValuePenaltyPair(value,penalty);\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n        public boolean isFeasible(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    return false;\n                }\n                if (x[i] > uB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @return the repaired (i.e. all in bounds) objective variables.\n         */\n        private double[] repair(final double[] x) {\n            final double[] lB = CMAESOptimizer.this.getLowerBound();\n            final double[] uB = CMAESOptimizer.this.getUpperBound();\n\n            final double[] repaired = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < lB[i]) {\n                    repaired[i] = lB[i];\n                } else if (x[i] > uB[i]) {\n                    repaired[i] = uB[i];\n                } else {\n                    repaired[i] = x[i];\n                }\n            }\n            return repaired;\n        }\n\n        /**\n         * @param x Normalized objective variables.\n         * @param repaired Repaired objective variables.\n         * @return Penalty value according to the violation of the bounds.\n         */\n        private double penalty(final double[] x, final double[] repaired) {\n            double penalty = 0;\n            for (int i = 0; i < x.length; i++) {\n                double diff = FastMath.abs(x[i] - repaired[i]);\n                penalty += diff;\n            }\n            return isMinimize ? penalty : -penalty;\n        }\n    }\n\n    // -----Matrix utility functions similar to the Matlab build in functions------\n\n    /**\n     * @param m Input matrix\n     * @return Matrix representing the element-wise logarithm of m.\n     */\n    private static RealMatrix log(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.log(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square root of m.\n     */\n    private static RealMatrix sqrt(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = FastMath.sqrt(m.getEntry(r, c));\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Matrix representing the element-wise square of m.\n     */\n    private static RealMatrix square(final RealMatrix m) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                d[r][c] = e * e;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return the matrix where the elements of m and n are element-wise multiplied.\n     */\n    private static RealMatrix times(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix 1.\n     * @param n Input matrix 2.\n     * @return Matrix where the elements of m and n are element-wise divided.\n     */\n    private static RealMatrix divide(final RealMatrix m, final RealMatrix n) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param cols Columns to select.\n     * @return Matrix representing the selected columns.\n     */\n    private static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {\n        final double[][] d = new double[m.getRowDimension()][cols.length];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < cols.length; c++) {\n                d[r][c] = m.getEntry(r, cols[c]);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @param k Diagonal position.\n     * @return Upper triangular part of matrix.\n     */\n    private static RealMatrix triu(final RealMatrix m, int k) {\n        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return Row matrix representing the sums of the rows.\n     */\n    private static RealMatrix sumRows(final RealMatrix m) {\n        final double[][] d = new double[1][m.getColumnDimension()];\n        for (int c = 0; c < m.getColumnDimension(); c++) {\n            double sum = 0;\n            for (int r = 0; r < m.getRowDimension(); r++) {\n                sum += m.getEntry(r, c);\n            }\n            d[0][c] = sum;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the diagonal n-by-n matrix if m is a column matrix or the column\n     * matrix representing the diagonal if m is a n-by-n matrix.\n     */\n    private static RealMatrix diag(final RealMatrix m) {\n        if (m.getColumnDimension() == 1) {\n            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];\n            for (int i = 0; i < m.getRowDimension(); i++) {\n                d[i][i] = m.getEntry(i, 0);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        } else {\n            final double[][] d = new double[m.getRowDimension()][1];\n            for (int i = 0; i < m.getColumnDimension(); i++) {\n                d[i][0] = m.getEntry(i, i);\n            }\n            return new Array2DRowRealMatrix(d, false);\n        }\n    }\n\n    /**\n     * Copies a column from m1 to m2.\n     *\n     * @param m1 Source matrix.\n     * @param col1 Source column.\n     * @param m2 Target matrix.\n     * @param col2 Target column.\n     */\n    private static void copyColumn(final RealMatrix m1, int col1,\n                                   RealMatrix m2, int col2) {\n        for (int i = 0; i < m1.getRowDimension(); i++) {\n            m2.setEntry(i, col2, m1.getEntry(i, col1));\n        }\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix filled with 1.\n     */\n    private static RealMatrix ones(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            Arrays.fill(d[r], 1);\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of 0 values out of diagonal, and 1 values on\n     * the diagonal.\n     */\n    private static RealMatrix eye(int n, int m) {\n        final double[][] d = new double[n][m];\n        for (int r = 0; r < n; r++) {\n            if (r < m) {\n                d[r][r] = 1;\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param n Number of rows.\n     * @param m Number of columns.\n     * @return n-by-m matrix of zero values.\n     */\n    private static RealMatrix zeros(int n, int m) {\n        return new Array2DRowRealMatrix(n, m);\n    }\n\n    /**\n     * @param mat Input matrix.\n     * @param n Number of row replicates.\n     * @param m Number of column replicates.\n     * @return a matrix which replicates the input matrix in both directions.\n     */\n    private static RealMatrix repmat(final RealMatrix mat, int n, int m) {\n        final int rd = mat.getRowDimension();\n        final int cd = mat.getColumnDimension();\n        final double[][] d = new double[n * rd][m * cd];\n        for (int r = 0; r < n * rd; r++) {\n            for (int c = 0; c < m * cd; c++) {\n                d[r][c] = mat.getEntry(r % rd, c % cd);\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param start Start value.\n     * @param end End value.\n     * @param step Step size.\n     * @return a sequence as column matrix.\n     */\n    private static RealMatrix sequence(double start, double end, double step) {\n        final int size = (int) ((end - start) / step + 1);\n        final double[][] d = new double[size][1];\n        double value = start;\n        for (int r = 0; r < size; r++) {\n            d[r][0] = value;\n            value += step;\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the maximum of the matrix element values.\n     */\n    private static double max(final RealMatrix m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (max < e) {\n                    max = e;\n                }\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input matrix.\n     * @return the minimum of the matrix element values.\n     */\n    private static double min(final RealMatrix m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.getRowDimension(); r++) {\n            for (int c = 0; c < m.getColumnDimension(); c++) {\n                double e = m.getEntry(r, c);\n                if (min > e) {\n                    min = e;\n                }\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the maximum of the array values.\n     */\n    private static double max(final double[] m) {\n        double max = -Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (max < m[r]) {\n                max = m[r];\n            }\n        }\n        return max;\n    }\n\n    /**\n     * @param m Input array.\n     * @return the minimum of the array values.\n     */\n    private static double min(final double[] m) {\n        double min = Double.MAX_VALUE;\n        for (int r = 0; r < m.length; r++) {\n            if (min > m[r]) {\n                min = m[r];\n            }\n        }\n        return min;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the inverse of the mapping defined by indices.\n     */\n    private static int[] inverse(final int[] indices) {\n        final int[] inverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            inverse[indices[i]] = i;\n        }\n        return inverse;\n    }\n\n    /**\n     * @param indices Input index array.\n     * @return the indices in inverse order (last is first).\n     */\n    private static int[] reverse(final int[] indices) {\n        final int[] reverse = new int[indices.length];\n        for (int i = 0; i < indices.length; i++) {\n            reverse[i] = indices[indices.length - i - 1];\n        }\n        return reverse;\n    }\n\n    /**\n     * @param size Length of random array.\n     * @return an array of Gaussian random numbers.\n     */\n    private double[] randn(int size) {\n        final double[] randn = new double[size];\n        for (int i = 0; i < size; i++) {\n            randn[i] = random.nextGaussian();\n        }\n        return randn;\n    }\n\n    /**\n     * @param size Number of rows.\n     * @param popSize Population size.\n     * @return a 2-dimensional matrix of Gaussian random numbers.\n     */\n    private RealMatrix randn1(int size, int popSize) {\n        final double[][] d = new double[size][popSize];\n        for (int r = 0; r < size; r++) {\n            for (int c = 0; c < popSize; c++) {\n                d[r][c] = random.nextGaussian();\n            }\n        }\n        return new Array2DRowRealMatrix(d, false);\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "RealFieldElement",
                "org.apache.commons.math3"
            ],
            [
                "Primes",
                "org.apache.commons.math3.primes"
            ],
            [
                "SmallPrimes",
                "org.apache.commons.math3.primes"
            ],
            [
                "PollardRho",
                "org.apache.commons.math3.primes"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "SimpleCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.fitting"
            ],
            [
                "ParameterValidator",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "EvaluationRmsChecker",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "OptimumImpl",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresAdapter",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "DenseWeightedEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "AbstractEvaluation",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresFactory",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "ValueAndJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "MultivariateJacobianFunction",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresBuilder",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "LeastSquaresProblem",
                "org.apache.commons.math3.fitting.leastsquares"
            ],
            [
                "WeightedObservedPoints",
                "org.apache.commons.math3.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "AbstractCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "HarmonicCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "PolynomialCurveFitter",
                "org.apache.commons.math3.fitting"
            ],
            [
                "UnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "FunctionUtils",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "IterativeLegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "LegendreGaussIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "MidPointIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "RombergIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "SimpsonIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BaseRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "HermiteRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegratorFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "LegendreHighPrecisionRuleFactory",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "SymmetricGaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "GaussIntegrator",
                "org.apache.commons.math3.analysis.integration.gauss"
            ],
            [
                "BaseAbstractUnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "UnivariateIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "TrapezoidIntegrator",
                "org.apache.commons.math3.analysis.integration"
            ],
            [
                "BivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableUnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "AbstractDifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PegasusSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolverUtils",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "FieldBracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonRaphsonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseSecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "SecantSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "DifferentiableUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateDifferentiableSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver2",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractPolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "MullerSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BaseAbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "LaguerreSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "IllinoisSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "PolynomialSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RegulaFalsiSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AllowedSolution",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "NewtonSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "RiddersSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BisectionSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "AbstractUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "UnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketingNthOrderBrentSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "BracketedRealFieldUnivariateSolver",
                "org.apache.commons.math3.analysis.solvers"
            ],
            [
                "Asin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Multiply",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Asinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Rint",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "StepFunction",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Add",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sqrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Inverse",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Gaussian",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Pow",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Exp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Cbrt",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log1p",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Constant",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Identity",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Signum",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logit",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ceil",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Subtract",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Max",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acosh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Min",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Expm1",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Abs",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Divide",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Ulp",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Log10",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Power",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Minus",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atan2",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Logistic",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Acos",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Floor",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sigmoid",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sinc",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Atanh",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "HarmonicOscillator",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Tan",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "Sin",
                "org.apache.commons.math3.analysis.function"
            ],
            [
                "MultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TrivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "MultivariateMatrixFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "ParametricUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "UnivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableMatrixFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DSCompiler",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "SparseGradient",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateMatrixFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "JacobianFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "GradientFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "DerivativeStructure",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateVectorFunctionDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "FiniteDifferencesDifferentiator",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "UnivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis.differentiation"
            ],
            [
                "MultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "DifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "PolynomialFunctionNewtonForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunctionLagrangeForm",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialSplineFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialsUtils",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "PolynomialFunction",
                "org.apache.commons.math3.analysis.polynomials"
            ],
            [
                "RealFieldUnivariateFunction",
                "org.apache.commons.math3.analysis"
            ],
            [
                "TricubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LoessInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "DividedDifferenceInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "HermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TrivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "NevilleInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereProjectionInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "AkimaSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MultivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "FieldHermiteInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "LinearInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BivariateGridInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariatePeriodicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "UnivariateInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SmoothingPolynomialBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "BicubicFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "SplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "TricubicSplineInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "InterpolatingMicrosphere2D",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "PiecewiseBicubicSplineInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolatingFunction",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "MicrosphereInterpolator",
                "org.apache.commons.math3.analysis.interpolation"
            ],
            [
                "Precision",
                "org.apache.commons.math3.util"
            ],
            [
                "MultidimensionalCounter",
                "org.apache.commons.math3.util"
            ],
            [
                "DoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "Incrementor",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToDoubleHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "OpenIntToFieldHashMap",
                "org.apache.commons.math3.util"
            ],
            [
                "MathArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "Pair",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathCalc",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMath",
                "org.apache.commons.math3.util"
            ],
            [
                "ResizableDoubleArray",
                "org.apache.commons.math3.util"
            ],
            [
                "BigRealField",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64Field",
                "org.apache.commons.math3.util"
            ],
            [
                "Combinations",
                "org.apache.commons.math3.util"
            ],
            [
                "MathUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "NumberTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "ContinuedFraction",
                "org.apache.commons.math3.util"
            ],
            [
                "RandomPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationManager",
                "org.apache.commons.math3.util"
            ],
            [
                "CompositeFormat",
                "org.apache.commons.math3.util"
            ],
            [
                "KthSelector",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationEvent",
                "org.apache.commons.math3.util"
            ],
            [
                "TransformerMap",
                "org.apache.commons.math3.util"
            ],
            [
                "IntegerSequence",
                "org.apache.commons.math3.util"
            ],
            [
                "FastMathLiteralArrays",
                "org.apache.commons.math3.util"
            ],
            [
                "CombinatoricsUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "IterationListener",
                "org.apache.commons.math3.util"
            ],
            [
                "PivotingStrategyInterface",
                "org.apache.commons.math3.util"
            ],
            [
                "CentralPivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "Decimal64",
                "org.apache.commons.math3.util"
            ],
            [
                "DefaultTransformer",
                "org.apache.commons.math3.util"
            ],
            [
                "BigReal",
                "org.apache.commons.math3.util"
            ],
            [
                "ArithmeticUtils",
                "org.apache.commons.math3.util"
            ],
            [
                "MedianOf3PivotingStrategy",
                "org.apache.commons.math3.util"
            ],
            [
                "ComplexFormat",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexField",
                "org.apache.commons.math3.complex"
            ],
            [
                "RootsOfUnity",
                "org.apache.commons.math3.complex"
            ],
            [
                "Quaternion",
                "org.apache.commons.math3.complex"
            ],
            [
                "Complex",
                "org.apache.commons.math3.complex"
            ],
            [
                "ComplexUtils",
                "org.apache.commons.math3.complex"
            ],
            [
                "DifferentiableMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "CurveFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "PolynomialFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "HarmonicFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "WeightedObservedPoint",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "GaussianFitter",
                "org.apache.commons.math3.optimization.fitting"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateSimpleBoundsOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "BaseAbstractMultivariateOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optimization.direct"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "AbstractScalarDifferentiableOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "ConjugateGradientFormula",
                "org.apache.commons.math3.optimization.general"
            ],
            [
                "BaseMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "AbstractLinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optimization.linear"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optimization"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseAbstractUnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optimization.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Target",
                "org.apache.commons.math3.optimization"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optimization"
            ],
            [
                "BaseMultivariateVectorOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "MultivariateDifferentiableMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "DifferentiableMultivariateVectorMultiStartOptimizer",
                "org.apache.commons.math3.optimization"
            ],
            [
                "NonSymmetricMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "AnyMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularValueDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "EigenDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldLUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixUtils",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "TriDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "Array2DRowFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "MatrixDimensionMismatchException",
                "org.apache.commons.math3.linear"
            ],
            [
                "ArrayFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "DecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "LUDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "ConjugateGradient",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonPositiveDefiniteOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "OpenMapRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSelfAdjointOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BiDiagonalTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "CholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldDecompositionSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SingularOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "BlockRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "NonSquareMatrixException",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "PreconditionedIterativeLinearSolver",
                "org.apache.commons.math3.linear"
            ],
            [
                "QRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "SymmLQ",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseFieldVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorFormat",
                "org.apache.commons.math3.linear"
            ],
            [
                "IllConditionedOperatorException",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultIterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultRealMatrixPreservingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "IterativeLinearSolverEvent",
                "org.apache.commons.math3.linear"
            ],
            [
                "DiagonalMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "HessenbergTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RectangularCholeskyDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "FieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "DefaultFieldMatrixChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "JacobiPreconditioner",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealLinearOperator",
                "org.apache.commons.math3.linear"
            ],
            [
                "RRQRDecomposition",
                "org.apache.commons.math3.linear"
            ],
            [
                "AbstractFieldMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealMatrix",
                "org.apache.commons.math3.linear"
            ],
            [
                "SchurTransformer",
                "org.apache.commons.math3.linear"
            ],
            [
                "RealVectorChangingVisitor",
                "org.apache.commons.math3.linear"
            ],
            [
                "SparseRealVector",
                "org.apache.commons.math3.linear"
            ],
            [
                "CauchyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LaplaceDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "HypergeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ChiSquaredDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "TriangularDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalMixtureExpectationMaximization",
                "org.apache.commons.math3.distribution.fitting"
            ],
            [
                "BetaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "RealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "SaddlePointExpansion",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GumbelDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ZipfDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "BinomialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "IntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "WeibullDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "NakagamiDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ConstantRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MultivariateNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ExponentialDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "UniformIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogNormalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PascalDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "ParetoDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "FDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GeometricDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "AbstractIntegerDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PoissonDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "KolmogorovSmirnovDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "MixtureMultivariateRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "GammaDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "EnumeratedRealDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LogisticDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "LevyDistribution",
                "org.apache.commons.math3.distribution"
            ],
            [
                "PointValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "AbstractConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "InitialGuess",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxIter",
                "org.apache.commons.math3.optim"
            ],
            [
                "NoFeasibleSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraintSet",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "PivotSelectionRule",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexSolver",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearOptimizer",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "UnboundedSolutionException",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SimplexTableau",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "SolutionCallback",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "LinearObjectiveFunction",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "NonNegativeConstraint",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "Relationship",
                "org.apache.commons.math3.optim.linear"
            ],
            [
                "AbstractOptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleBounds",
                "org.apache.commons.math3.optim"
            ],
            [
                "PointVectorValuePair",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimplePointChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "SimpleVectorValueChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "BaseMultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "MultiStartUnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BrentOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateObjectiveFunction",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SimpleUnivariateValueChecker",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "SearchInterval",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariatePointValuePair",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BracketFinder",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "UnivariateOptimizer",
                "org.apache.commons.math3.optim.univariate"
            ],
            [
                "BaseMultivariateOptimizer",
                "org.apache.commons.math3.optim"
            ],
            [
                "ConvergenceChecker",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationProblem",
                "org.apache.commons.math3.optim"
            ],
            [
                "MaxEval",
                "org.apache.commons.math3.optim"
            ],
            [
                "OptimizationData",
                "org.apache.commons.math3.optim"
            ],
            [
                "Preconditioner",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "NonLinearConjugateGradientOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.gradient"
            ],
            [
                "LeastSquaresConverter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GradientMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionMappingAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "LineSearch",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunction",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "GoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "AbstractSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "SimplexOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "BOBYQAOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "NelderMeadSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "CMAESOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "PowellOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiDirectionalSimplex",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
            ],
            [
                "MultiStartMultivariateOptimizer",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "MultivariateFunctionPenaltyAdapter",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ObjectiveFunctionGradient",
                "org.apache.commons.math3.optim.nonlinear.scalar"
            ],
            [
                "ModelFunction",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "LevenbergMarquardtOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "AbstractLeastSquaresOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "GaussNewtonOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector.jacobian"
            ],
            [
                "ModelFunctionJacobian",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "JacobianMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Target",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Weight",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "MultiStartMultivariateVectorOptimizer",
                "org.apache.commons.math3.optim.nonlinear.vector"
            ],
            [
                "Erf",
                "org.apache.commons.math3.special"
            ],
            [
                "BesselJ",
                "org.apache.commons.math3.special"
            ],
            [
                "Gamma",
                "org.apache.commons.math3.special"
            ],
            [
                "Beta",
                "org.apache.commons.math3.special"
            ],
            [
                "FieldODEState",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldODEStateAndDerivative",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ODEIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterConfiguration",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputFieldModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderConverter",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ExpandableStatefulODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "MultistepIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "Parameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "JacobianMatrices",
                "org.apache.commons.math3.ode"
            ],
            [
                "StepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "DummyStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractFieldStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldFixedStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerMode",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "AbstractStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepHandler",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "StepNormalizerBounds",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "NordsieckStepInterpolator",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "FieldStepNormalizer",
                "org.apache.commons.math3.ode.sampling"
            ],
            [
                "RungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EmbeddedRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54FieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "MidpointIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince54Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GraggBulirschStoerStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853FieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldButcherArrayProvider",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "DormandPrince853Integrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "EulerFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsMoultonFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "LutherStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "HighamHall54StepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsNordsieckFieldTransformer",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ThreeEighthesFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "RungeKuttaIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "ClassicalRungeKuttaFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdaptiveStepsizeFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "AdamsBashforthIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldIntegrator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "GillFieldStepInterpolator",
                "org.apache.commons.math3.ode.nonstiff"
            ],
            [
                "FieldSecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "MainStateJacobianProvider",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondaryEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderFieldIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterJacobianWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldEquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "FieldExpandableODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "ParameterizedWrapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "SecondOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "AbstractParameterizable",
                "org.apache.commons.math3.ode"
            ],
            [
                "UnknownParameterException",
                "org.apache.commons.math3.ode"
            ],
            [
                "ContinuousOutputModel",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderDifferentialEquations",
                "org.apache.commons.math3.ode"
            ],
            [
                "EquationsMapper",
                "org.apache.commons.math3.ode"
            ],
            [
                "Transformer",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FieldEventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventHandler",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "Action",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventState",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "EventFilter",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "FilterType",
                "org.apache.commons.math3.ode.events"
            ],
            [
                "ParameterizedODE",
                "org.apache.commons.math3.ode"
            ],
            [
                "FirstOrderIntegrator",
                "org.apache.commons.math3.ode"
            ],
            [
                "NaNStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "NaturalRanking",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "TiesStrategy",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "RankingAlgorithm",
                "org.apache.commons.math3.stat.ranking"
            ],
            [
                "StatUtils",
                "org.apache.commons.math3.stat"
            ],
            [
                "IntervalUtils",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "AgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "WilsonScoreInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "ClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "NormalApproximationInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "BinomialConfidenceInterval",
                "org.apache.commons.math3.stat.interval"
            ],
            [
                "StorelessCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "StorelessBivariateCovariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "KendallsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "Covariance",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "PearsonsCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "SpearmansCorrelation",
                "org.apache.commons.math3.stat.correlation"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanIntegerPoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "EuclideanDoublePoint",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.stat.clustering"
            ],
            [
                "TestUtils",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "TTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "GTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AlternativeHypothesis",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "MannWhitneyUTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "WilcoxonSignedRankTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "OneWayAnova",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "ChiSquareTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "BinomialTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "KolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference"
            ],
            [
                "AbstractUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "DescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "MultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SecondMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Mean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FourthMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Variance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Kurtosis",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "GeometricMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StandardDeviation",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialCovariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "ThirdMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "SemiVariance",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "FirstMoment",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "Skewness",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "VectorialMean",
                "org.apache.commons.math3.stat.descriptive.moment"
            ],
            [
                "StatisticalSummaryValues",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "StatisticalMultivariateSummary",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "AggregateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "WeightedEvaluation",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "UnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "Percentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Max",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "PSquarePercentile",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Min",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "Median",
                "org.apache.commons.math3.stat.descriptive.rank"
            ],
            [
                "SynchronizedDescriptiveStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SynchronizedMultivariateSummaryStatistics",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SumOfSquares",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Product",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "Sum",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "SumOfLogs",
                "org.apache.commons.math3.stat.descriptive.summary"
            ],
            [
                "AbstractStorelessUnivariateStatistic",
                "org.apache.commons.math3.stat.descriptive"
            ],
            [
                "SimpleRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "UpdatingMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "AbstractMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "GLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "ModelSpecificationException",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "RegressionResults",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MillerUpdatingRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "OLSMultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "MultipleLinearRegression",
                "org.apache.commons.math3.stat.regression"
            ],
            [
                "Frequency",
                "org.apache.commons.math3.stat"
            ],
            [
                "ChebyshevDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CanberraDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EuclideanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "ManhattanDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "EarthMoversDistance",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "DistanceMeasure",
                "org.apache.commons.math3.ml.distance"
            ],
            [
                "CentroidCluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DBSCANClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Cluster",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "MultiKMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "Clusterable",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "FuzzyKMeansClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KMeansPlusPlusClusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "SumOfClusterVariances",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "ClusterEvaluator",
                "org.apache.commons.math3.ml.clustering.evaluation"
            ],
            [
                "Clusterer",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "DoublePoint",
                "org.apache.commons.math3.ml.clustering"
            ],
            [
                "KohonenTrainingTask",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "KohonenUpdateAction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "QuasiSigmoidDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "ExponentialDecayFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm.util"
            ],
            [
                "NeighbourhoodSizeFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunctionFactory",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "NeighbourhoodSizeFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "LearningFactorFunction",
                "org.apache.commons.math3.ml.neuralnet.sofm"
            ],
            [
                "MapUtils",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Network",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializerFactory",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "Neuron",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "FeatureInitializer",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "NeuronString",
                "org.apache.commons.math3.ml.neuralnet.oned"
            ],
            [
                "NeuronSquareMesh2D",
                "org.apache.commons.math3.ml.neuralnet.twod"
            ],
            [
                "SmoothedDataHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "UnifiedDistanceMatrix",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapDataVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "MapVisualization",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "LocationFinder",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "HitHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "QuantizationError",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "TopographicErrorHistogram",
                "org.apache.commons.math3.ml.neuralnet.twod.util"
            ],
            [
                "SquareNeighbourhood",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "UpdateAction",
                "org.apache.commons.math3.ml.neuralnet"
            ],
            [
                "BracketingNthOrderBrentSolverDFP",
                "org.apache.commons.math3.dfp"
            ],
            [
                "UnivariateDfpFunction",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpDec",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpMath",
                "org.apache.commons.math3.dfp"
            ],
            [
                "Dfp",
                "org.apache.commons.math3.dfp"
            ],
            [
                "DfpField",
                "org.apache.commons.math3.dfp"
            ],
            [
                "GeneticAlgorithm",
                "org.apache.commons.math3.genetics"
            ],
            [
                "SelectionPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedGenerationCount",
                "org.apache.commons.math3.genetics"
            ],
            [
                "AbstractListChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OnePointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ElitisticListPopulation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Chromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "OrderedCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "InvalidRepresentationException",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKey",
                "org.apache.commons.math3.genetics"
            ],
            [
                "StoppingCondition",
                "org.apache.commons.math3.genetics"
            ],
            [
                "PermutationChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "ChromosomePair",
                "org.apache.commons.math3.genetics"
            ],
            [
                "TournamentSelection",
                "org.apache.commons.math3.genetics"
            ],
            [
                "NPointCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "UniformCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "MutationPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "FixedElapsedTime",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CycleCrossover",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "BinaryChromosome",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Population",
                "org.apache.commons.math3.genetics"
            ],
            [
                "RandomKeyMutation",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Fitness",
                "org.apache.commons.math3.genetics"
            ],
            [
                "CrossoverPolicy",
                "org.apache.commons.math3.genetics"
            ],
            [
                "Vector",
                "org.apache.commons.math3.geometry"
            ],
            [
                "VectorFormat",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Point",
                "org.apache.commons.math3.geometry"
            ],
            [
                "RotationConvention",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubPlane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3DFormat",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "OutlineExtractor",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "PolyhedronsSet",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "RotationOrder",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldVector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Rotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Euclidean3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphericalCoordinates",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "CardanEulerSingularityException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "NotARotationMatrixException",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "FieldRotation",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Vector3D",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Plane",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "SphereGenerator",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.threed"
            ],
            [
                "IntervalsSet",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Interval",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "SubOrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "OrientedPoint",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Euclidean1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1DFormat",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Vector1D",
                "org.apache.commons.math3.geometry.euclidean.oned"
            ],
            [
                "Segment",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "AbstractConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "AklToussaintHeuristic",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHull2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "MonotoneChain",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "ConvexHullGenerator2D",
                "org.apache.commons.math3.geometry.euclidean.twod.hull"
            ],
            [
                "Vector2DFormat",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "PolygonsSet",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "SubLine",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "DiskGenerator",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Vector2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "NestedLoops",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Euclidean2D",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "Line",
                "org.apache.commons.math3.geometry.euclidean.twod"
            ],
            [
                "ConvexHullGenerator",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ConvexHull",
                "org.apache.commons.math3.geometry.hull"
            ],
            [
                "ArcsSet",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "S1Point",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere1D",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Arc",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "LimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "SubLimitAngle",
                "org.apache.commons.math3.geometry.spherical.oned"
            ],
            [
                "Sphere2D",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SubCircle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Vertex",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Circle",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "PropertiesComputer",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SphericalPolygonsSet",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "Edge",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "EdgesBuilder",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "S2Point",
                "org.apache.commons.math3.geometry.spherical.twod"
            ],
            [
                "SupportBallGenerator",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "EnclosingBall",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "WelzlEncloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "Encloser",
                "org.apache.commons.math3.geometry.enclosing"
            ],
            [
                "InsideFinder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjection",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryProjector",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Region",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Transform",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "NodesSet",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractRegion",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Characterization",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AbstractSubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BSPTree",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "RegionFactory",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Side",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundarySizeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "AVLTree",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "OrderedTuple",
                "org.apache.commons.math3.geometry.partitioning.utilities"
            ],
            [
                "BSPTreeVisitor",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Hyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Embedding",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryAttribute",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "SubHyperplane",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "BoundaryBuilder",
                "org.apache.commons.math3.geometry.partitioning"
            ],
            [
                "Space",
                "org.apache.commons.math3.geometry"
            ],
            [
                "Field",
                "org.apache.commons.math3"
            ],
            [
                "ProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "MeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "KalmanFilter",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultProcessModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "DefaultMeasurementModel",
                "org.apache.commons.math3.filter"
            ],
            [
                "NormalizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "GaussianRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "ISAACRandom",
                "org.apache.commons.math3.random"
            ],
            [
                "CorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937a",
                "org.apache.commons.math3.random"
            ],
            [
                "Well1024a",
                "org.apache.commons.math3.random"
            ],
            [
                "UniformRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497a",
                "org.apache.commons.math3.random"
            ],
            [
                "BitsStreamGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "SynchronizedRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "UncorrelatedRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well19937c",
                "org.apache.commons.math3.random"
            ],
            [
                "ValueServer",
                "org.apache.commons.math3.random"
            ],
            [
                "HaltonSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well44497b",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomData",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "Well512a",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "JDKRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "StableRandomGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomAdaptor",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomGeneratorFactory",
                "org.apache.commons.math3.random"
            ],
            [
                "AbstractWell",
                "org.apache.commons.math3.random"
            ],
            [
                "RandomDataImpl",
                "org.apache.commons.math3.random"
            ],
            [
                "EmpiricalDistribution",
                "org.apache.commons.math3.random"
            ],
            [
                "SobolSequenceGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "MersenneTwister",
                "org.apache.commons.math3.random"
            ],
            [
                "UnitSphereRandomVectorGenerator",
                "org.apache.commons.math3.random"
            ],
            [
                "FieldElement",
                "org.apache.commons.math3"
            ],
            [
                "BigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "Fraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFraction",
                "org.apache.commons.math3.fraction"
            ],
            [
                "AbstractFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "BigFractionField",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "FractionConversionException",
                "org.apache.commons.math3.fraction"
            ],
            [
                "ProperBigFractionFormat",
                "org.apache.commons.math3.fraction"
            ],
            [
                "NotFiniteNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoBracketingException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathArithmeticException",
                "org.apache.commons.math3.exception"
            ],
            [
                "InsufficientDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyEvaluationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ExceptionContextProvider",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ExceptionContext",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "ArgUtils",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "DummyLocalizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "Localizable",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "LocalizedFormats",
                "org.apache.commons.math3.exception.util"
            ],
            [
                "NotANumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MultiDimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "OutOfRangeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "TooManyIterationsException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NullArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooLargeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalStateException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathUnsupportedOperationException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotStrictlyPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NonMonotonicSequenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ZeroException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalArgumentException",
                "org.apache.commons.math3.exception"
            ],
            [
                "DimensionMismatchException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathRuntimeException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathParseException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NoDataException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathIllegalNumberException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NotPositiveException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MaxCountExceededException",
                "org.apache.commons.math3.exception"
            ],
            [
                "NumberIsTooSmallException",
                "org.apache.commons.math3.exception"
            ],
            [
                "ConvergenceException",
                "org.apache.commons.math3.exception"
            ],
            [
                "MathInternalError",
                "org.apache.commons.math3.exception"
            ],
            [
                "DftNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "RealTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastSineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "DctNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastFourierTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformType",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastCosineTransformer",
                "org.apache.commons.math3.transform"
            ],
            [
                "TransformUtils",
                "org.apache.commons.math3.transform"
            ],
            [
                "DstNormalization",
                "org.apache.commons.math3.transform"
            ],
            [
                "FastHadamardTransformer",
                "org.apache.commons.math3.transform"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "isPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static boolean isPrime(int n)"
            ],
            [
                "nextPrime",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static int nextPrime(int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "Primes",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "smallTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int smallTrialDivision(int n, final List<Integer> factors)"
            ],
            [
                "boundedTrialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)"
            ],
            [
                "trialDivision",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static List<Integer> trialDivision(int n)"
            ],
            [
                "millerRabinPrimeTest",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static boolean millerRabinPrimeTest(final int n)"
            ],
            [
                "primeFactors",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "public static List<Integer> primeFactors(int n)"
            ],
            [
                "rhoBrent",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int rhoBrent(final int n)"
            ],
            [
                "gcdPositive",
                "org.apache.commons.math3.primes",
                "PollardRho",
                "static int gcdPositive(int a, int b)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "GaussianCurveFitter",
                "public static GaussianCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "SimpleCurveFitter",
                "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)"
            ],
            [
                "weightMatrix",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)"
            ],
            [
                "weightDiagonal",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)"
            ],
            [
                "countEvaluations",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)"
            ],
            [
                "evaluationChecker",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)"
            ],
            [
                "model",
                "org.apache.commons.math3.fitting.leastsquares",
                "LeastSquaresFactory",
                "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "HarmonicCurveFitter",
                "public static HarmonicCurveFitter create()"
            ],
            [
                "create",
                "org.apache.commons.math3.fitting",
                "PolynomialCurveFitter",
                "public static PolynomialCurveFitter create(int degree)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction compose(final UnivariateFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "compose",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction add(final UnivariateFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "add",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction multiply(final UnivariateFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)"
            ],
            [
                "multiply",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)"
            ],
            [
                "combine",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)"
            ],
            [
                "collector",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)"
            ],
            [
                "fix1stArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "fix2ndArgument",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)"
            ],
            [
                "sample",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException"
            ],
            [
                "toDifferentiableUnivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)"
            ],
            [
                "toUnivariateDifferential",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)"
            ],
            [
                "toMultivariateDifferentiableFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)"
            ],
            [
                "toDifferentiableMultivariateVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)"
            ],
            [
                "toMultivariateDifferentiableVectorFunction",
                "org.apache.commons.math3.analysis",
                "FunctionUtils",
                "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException"
            ],
            [
                "solve",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException"
            ],
            [
                "forceSide",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException"
            ],
            [
                "bracket",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException"
            ],
            [
                "midpoint",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static double midpoint(double a, double b)"
            ],
            [
                "isBracketing",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException"
            ],
            [
                "isSequence",
                "org.apache.commons.math3.analysis.solvers",
                "UnivariateSolverUtils",
                "public static boolean isSequence(final double start, final double mid, final double end)"
            ],
            [
                "getCompiler",
                "org.apache.commons.math3.analysis.differentiation",
                "DSCompiler",
                "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException"
            ],
            [
                "createConstant",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createConstant(final double value)"
            ],
            [
                "createVariable",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient createVariable(final int idx, final double value)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient pow(final double a, final SparseGradient x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "SparseGradient",
                "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException"
            ],
            [
                "pow",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure pow(final double a, final DerivativeStructure x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.analysis.differentiation",
                "DerivativeStructure",
                "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionNewtonForm",
                "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "verifyInterpolationArray",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunctionLagrangeForm",
                "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "createChebyshevPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createChebyshevPolynomial(final int degree)"
            ],
            [
                "createHermitePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createHermitePolynomial(final int degree)"
            ],
            [
                "createLaguerrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLaguerrePolynomial(final int degree)"
            ],
            [
                "createLegendrePolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createLegendrePolynomial(final int degree)"
            ],
            [
                "createJacobiPolynomial",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"
            ],
            [
                "shift",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialsUtils",
                "public static double[] shift(final double[] coefficients, final double shift)"
            ],
            [
                "evaluate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException"
            ],
            [
                "differentiate",
                "org.apache.commons.math3.analysis.polynomials",
                "PolynomialFunction",
                "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException"
            ],
            [
                "computeDividedDifference",
                "org.apache.commons.math3.analysis.interpolation",
                "DividedDifferenceInterpolator",
                "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(double x, double y, double eps)"
            ],
            [
                "compareTo",
                "org.apache.commons.math3.util",
                "Precision",
                "public static int compareTo(final double x, final double y, final int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(float x, float y, float eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, float eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final float x, final float y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(double x, double y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, double eps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equals(final double x, final double y, final int maxUlps)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double round(double x, int scale, int roundingMethod)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "Precision",
                "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException"
            ],
            [
                "representableDelta",
                "org.apache.commons.math3.util",
                "Precision",
                "public static double representableDelta(double x, double originalDelta)"
            ],
            [
                "wrap",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)"
            ],
            [
                "scale",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] scale(double val, final double[] arr)"
            ],
            [
                "ebeAdd",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeSubtract",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeMultiply",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "ebeDivide",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distance1",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "cosAngle",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double cosAngle(double[] v1, double[] v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "isMonotonic",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)"
            ],
            [
                "checkEqualLength",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)"
            ],
            [
                "checkOrder",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException"
            ],
            [
                "safeNorm",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double safeNorm(double[] v)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] copyOf(int[] source, int len)"
            ],
            [
                "copyOf",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOf(double[] source, int len)"
            ],
            [
                "copyOfRange",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] copyOfRange(double[] source, int from, int to)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)"
            ],
            [
                "linearCombination",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(float[] x, float[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(float[] x, float[] y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equals(double[] x, double[] y)"
            ],
            [
                "equalsIncludingNaN",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean equalsIncludingNaN(double[] x, double[] y)"
            ],
            [
                "normalizeArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "convolve",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException"
            ],
            [
                "natural",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] natural(int n)"
            ],
            [
                "sequence",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static int[] sequence(int size, int start, int stride)"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "verifyValues",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException"
            ],
            [
                "concatenate",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] concatenate(double[]... x)"
            ],
            [
                "unique",
                "org.apache.commons.math3.util",
                "MathArrays",
                "public static double[] unique(double[] data)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Pair",
                "public static <K, V> Pair<K, V> create(K k, V v)"
            ],
            [
                "slowCos",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowCos(final double x, final double[] result)"
            ],
            [
                "slowSin",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowSin(final double x, final double[] result)"
            ],
            [
                "slowexp",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double slowexp(final double x, final double[] result)"
            ],
            [
                "expint",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double expint(int p, final double[] result)"
            ],
            [
                "slowLog",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static double[] slowLog(double xi)"
            ],
            [
                "format",
                "org.apache.commons.math3.util",
                "FastMathCalc",
                "static String format(double d)"
            ],
            [
                "sqrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sqrt(final double a)"
            ],
            [
                "cosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cosh(double x)"
            ],
            [
                "sinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sinh(double x)"
            ],
            [
                "tanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tanh(double x)"
            ],
            [
                "acosh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acosh(final double a)"
            ],
            [
                "asinh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asinh(double a)"
            ],
            [
                "atanh",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atanh(double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double signum(final double a)"
            ],
            [
                "signum",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float signum(final float a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextUp(final double a)"
            ],
            [
                "nextUp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextUp(final float a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextDown(final double a)"
            ],
            [
                "nextDown",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextDown(final float a)"
            ],
            [
                "random",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double random()"
            ],
            [
                "exp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double exp(double x)"
            ],
            [
                "expm1",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double expm1(double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(final double x)"
            ],
            [
                "log1p",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log1p(final double x)"
            ],
            [
                "log10",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log10(final double x)"
            ],
            [
                "log",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double log(double base, double x)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(final double x, final double y)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, int e)"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double pow(double d, long e)"
            ],
            [
                "sin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double sin(double x)"
            ],
            [
                "cos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cos(double x)"
            ],
            [
                "tan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double tan(double x)"
            ],
            [
                "atan",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan(double x)"
            ],
            [
                "atan2",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double atan2(double y, double x)"
            ],
            [
                "asin",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double asin(double x)"
            ],
            [
                "acos",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double acos(double x)"
            ],
            [
                "cbrt",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double cbrt(double x)"
            ],
            [
                "toRadians",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toRadians(double x)"
            ],
            [
                "toDegrees",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double toDegrees(double x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int abs(final int x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long abs(final long x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float abs(final float x)"
            ],
            [
                "abs",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double abs(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ulp(double x)"
            ],
            [
                "ulp",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float ulp(float x)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double scalb(final double d, final int n)"
            ],
            [
                "scalb",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float scalb(final float f, final int n)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double nextAfter(double d, double direction)"
            ],
            [
                "nextAfter",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float nextAfter(final float f, final double direction)"
            ],
            [
                "floor",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double floor(double x)"
            ],
            [
                "ceil",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double ceil(double x)"
            ],
            [
                "rint",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double rint(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long round(double x)"
            ],
            [
                "round",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int round(final float x)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int min(final int a, final int b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long min(final long a, final long b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float min(final float a, final float b)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double min(final double a, final double b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int max(final int a, final int b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long max(final long a, final long b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float max(final float a, final float b)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double max(final double a, final double b)"
            ],
            [
                "hypot",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double hypot(final double x, final double y)"
            ],
            [
                "IEEEremainder",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double IEEEremainder(double dividend, double divisor)"
            ],
            [
                "toIntExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int toIntExact(final long n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int incrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "incrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long incrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int decrementExact(final int n) throws MathArithmeticException"
            ],
            [
                "decrementExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long decrementExact(final long n) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int addExact(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "addExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long addExact(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int subtractExact(final int a, final int b)"
            ],
            [
                "subtractExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long subtractExact(final long a, final long b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int multiplyExact(final int a, final int b)"
            ],
            [
                "multiplyExact",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long multiplyExact(final long a, final long b)"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorDiv(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorDiv",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorDiv(final long a, final long b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int floorMod(final int a, final int b) throws MathArithmeticException"
            ],
            [
                "floorMod",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static long floorMod(final long a, final long b)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static double copySign(double magnitude, double sign)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static float copySign(float magnitude, float sign)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final double d)"
            ],
            [
                "getExponent",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static int getExponent(final float f)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "BigRealField",
                "public static BigRealField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.util",
                "Decimal64Field",
                "public static final Decimal64Field getInstance()"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double value)"
            ],
            [
                "equals",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static boolean equals(double x, double y)"
            ],
            [
                "hash",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int hash(double[] value)"
            ],
            [
                "normalizeAngle",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double normalizeAngle(double a, double center)"
            ],
            [
                "max",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)"
            ],
            [
                "min",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)"
            ],
            [
                "reduce",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static double reduce(double a, double period, double offset)"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static short copySign(short magnitude, short sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static int copySign(int magnitude, int sign) throws MathArithmeticException"
            ],
            [
                "copySign",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static long copySign(long magnitude, long sign) throws MathArithmeticException"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "parseNumber",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)"
            ],
            [
                "parseFixedstring",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)"
            ],
            [
                "formatDouble",
                "org.apache.commons.math3.util",
                "CompositeFormat",
                "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(int start, int end)"
            ],
            [
                "range",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Range range(final int start, final int max, final int step)"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "IntegerSequence",
                "public static Incrementor create()"
            ],
            [
                "create",
                "org.apache.commons.math3.util",
                "Incrementor",
                "public static Incrementor create()"
            ],
            [
                "loadExpIntA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntA()"
            ],
            [
                "loadExpIntB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpIntB()"
            ],
            [
                "loadExpFracA",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracA()"
            ],
            [
                "loadExpFracB",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[] loadExpFracB()"
            ],
            [
                "loadLnMant",
                "org.apache.commons.math3.util",
                "FastMathLiteralArrays",
                "static double[][] loadLnMant()"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "combinationsIterator",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "public static Iterator<int[]> combinationsIterator(int n, int k)"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int addAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "addAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long addAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "binomialCoefficient",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "binomialCoefficientLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "factorial",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "factorialDouble",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialDouble(final int n) throws NotPositiveException"
            ],
            [
                "factorialLog",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static double factorialLog(final int n) throws NotPositiveException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int gcd(int p, int q) throws MathArithmeticException"
            ],
            [
                "gcd",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long gcd(final long p, final long q) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int lcm(int a, int b) throws MathArithmeticException"
            ],
            [
                "lcm",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long lcm(long a, long b) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int mulAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "mulAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long mulAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int subAndCheck(int x, int y) throws MathArithmeticException"
            ],
            [
                "subAndCheck",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long subAndCheck(long a, long b) throws MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static int pow(final int k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long pow(final long k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException"
            ],
            [
                "pow",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException"
            ],
            [
                "stirlingS2",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException"
            ],
            [
                "isPowerOfTwo",
                "org.apache.commons.math3.util",
                "ArithmeticUtils",
                "public static boolean isPowerOfTwo(long n)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(Locale locale)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexFormat",
                "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.complex",
                "ComplexField",
                "public static ComplexField getInstance()"
            ],
            [
                "multiply",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "add",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion add(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "subtract",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static double dotProduct(final Quaternion q1, final Quaternion q2)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, int maxUlps)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y)"
            ],
            [
                "equals",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equals(Complex x, Complex y, double eps)"
            ],
            [
                "equalsWithRelativeTolerance",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart, double imaginaryPart)"
            ],
            [
                "valueOf",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static Complex valueOf(double realPart)"
            ],
            [
                "polar2Complex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException"
            ],
            [
                "convertToComplex",
                "org.apache.commons.math3.complex",
                "ComplexUtils",
                "public static Complex[] convertToComplex(double[] real)"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optimization.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealMatrixFormat",
                "public static RealMatrixFormat getInstance(final Locale locale)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(final int rows, final int columns)"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "createRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException"
            ],
            [
                "createFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException"
            ],
            [
                "createRealIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealIdentityMatrix(int dimension)"
            ],
            [
                "createFieldIdentityMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)"
            ],
            [
                "createRealDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)"
            ],
            [
                "createFieldDiagonalMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)"
            ],
            [
                "createRealVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException"
            ],
            [
                "createFieldVector",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException"
            ],
            [
                "createRowRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createRowFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "createColumnFieldMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException"
            ],
            [
                "isSymmetric",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static boolean isSymmetric(RealMatrix matrix, double eps)"
            ],
            [
                "fractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)"
            ],
            [
                "bigFractionMatrixToRealMatrix",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)"
            ],
            [
                "blockInverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "inverse",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "toBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException"
            ],
            [
                "createBlocksLayout",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static double[][] createBlocksLayout(final int rows, final int columns)"
            ],
            [
                "unmodifiableRealVector",
                "org.apache.commons.math3.linear",
                "RealVector",
                "public static RealVector unmodifiableRealVector(final RealVector v)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.linear",
                "RealVectorFormat",
                "public static RealVectorFormat getInstance(final Locale locale)"
            ],
            [
                "create",
                "org.apache.commons.math3.linear",
                "JacobiPreconditioner",
                "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException"
            ],
            [
                "extractField",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)"
            ],
            [
                "buildArray",
                "org.apache.commons.math3.linear",
                "AbstractFieldMatrix",
                "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)"
            ],
            [
                "estimate",
                "org.apache.commons.math3.distribution.fitting",
                "MultivariateNormalMixtureExpectationMaximization",
                "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "sample",
                "org.apache.commons.math3.distribution",
                "ChengBetaSampler",
                "static double sample(RandomGenerator random, final double alpha, final double beta)"
            ],
            [
                "getStirlingError",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getStirlingError(double z)"
            ],
            [
                "getDeviancePart",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double getDeviancePart(double x, double mu)"
            ],
            [
                "logBinomialProbability",
                "org.apache.commons.math3.distribution",
                "SaddlePointExpansion",
                "static double logBinomialProbability(int x, int n, double p, double q)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfDistribution",
                "static double helper2(final double x)"
            ],
            [
                "helper1",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper1(final double x)"
            ],
            [
                "helper2",
                "org.apache.commons.math3.distribution",
                "ZipfRejectionInversionSampler",
                "static double helper2(final double x)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxIter",
                "public static MaxIter unlimited()"
            ],
            [
                "getInvertedCoefficientSum",
                "org.apache.commons.math3.optim.linear",
                "SimplexTableau",
                "protected static double getInvertedCoefficientSum(final RealVector coefficients)"
            ],
            [
                "unbounded",
                "org.apache.commons.math3.optim",
                "SimpleBounds",
                "public static SimpleBounds unbounded(int dim)"
            ],
            [
                "unlimited",
                "org.apache.commons.math3.optim",
                "MaxEval",
                "public static MaxEval unlimited()"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x)"
            ],
            [
                "erfc",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfc(double x)"
            ],
            [
                "erf",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erf(double x1, double x2)"
            ],
            [
                "erfInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfInv(final double x)"
            ],
            [
                "erfcInv",
                "org.apache.commons.math3.special",
                "Erf",
                "public static double erfcInv(final double x)"
            ],
            [
                "value",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException"
            ],
            [
                "rjBesl",
                "org.apache.commons.math3.special",
                "BesselJ",
                "public static BesselJResult rjBesl(double x, double alpha, int nb)"
            ],
            [
                "logGamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma(double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x)"
            ],
            [
                "regularizedGammaP",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(double a, double x)"
            ],
            [
                "regularizedGammaQ",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)"
            ],
            [
                "digamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double digamma(double x)"
            ],
            [
                "trigamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double trigamma(double x)"
            ],
            [
                "lanczos",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double lanczos(final double x)"
            ],
            [
                "invGamma1pm1",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double invGamma1pm1(final double x)"
            ],
            [
                "logGamma1p",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException"
            ],
            [
                "gamma",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static double gamma(final double x)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, double epsilon)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, double a, double b, int maxIterations)"
            ],
            [
                "regularizedBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(double a, double b, double epsilon, int maxIterations)"
            ],
            [
                "logBeta",
                "org.apache.commons.math3.special",
                "Beta",
                "public static double logBeta(final double p, final double q)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.sampling",
                "DummyStepHandler",
                "public static DummyStepHandler getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckTransformer",
                "public static AdamsNordsieckTransformer getInstance(final int nSteps)"
            ],
            [
                "taylor",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsFieldStepInterpolator",
                "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.ode.nonstiff",
                "AdamsNordsieckFieldTransformer",
                "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sum",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumSq",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "product",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "sumLog",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "mean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "geometricMean",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "variance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "populationVariance",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "max",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values) throws MathIllegalArgumentException"
            ],
            [
                "min",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException"
            ],
            [
                "percentile",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException"
            ],
            [
                "sumDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "meanDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException"
            ],
            [
                "varianceDifference",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "normalize",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] normalize(final double[] sample)"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample) throws MathIllegalArgumentException"
            ],
            [
                "mode",
                "org.apache.commons.math3.stat",
                "StatUtils",
                "public static double[] mode(double[] sample, final int begin, final int length)"
            ],
            [
                "getAgrestiCoullInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getClopperPearsonInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getNormalApproximationInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "getWilsonScoreInterval",
                "org.apache.commons.math3.stat.interval",
                "IntervalUtils",
                "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "homoscedasticTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "pairedT",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "pairedTTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "t",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "tTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquare",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "chiSquareTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException"
            ],
            [
                "chiSquareDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "chiSquareTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaFValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException"
            ],
            [
                "oneWayAnovaPValue",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "oneWayAnovaTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException"
            ],
            [
                "g",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTestIntrinsic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException"
            ],
            [
                "gTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "gDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "rootLogLikelihoodRatio",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException"
            ],
            [
                "gTestDataSetsComparison",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovStatistic",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "kolmogorovSmirnovTest",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException"
            ],
            [
                "exactP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double exactP(double d, int m, int n, boolean strict)"
            ],
            [
                "approximateP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double approximateP(double d, int n, int m)"
            ],
            [
                "monteCarloP",
                "org.apache.commons.math3.stat.inference",
                "TestUtils",
                "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)"
            ],
            [
                "aggregate",
                "org.apache.commons.math3.stat.descriptive",
                "AggregateSummaryStatistics",
                "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)"
            ],
            [
                "newMarkers",
                "org.apache.commons.math3.stat.descriptive.rank",
                "PSquarePercentile",
                "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "NeighbourhoodSizeFunctionFactory",
                "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "exponentialDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)"
            ],
            [
                "quasiSigmoidDecay",
                "org.apache.commons.math3.ml.neuralnet.sofm",
                "LearningFactorFunctionFactory",
                "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)"
            ],
            [
                "findBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "findBestAndSecondBest",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "sort",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeU",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeHitHistogram",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)"
            ],
            [
                "computeQuantizationError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)"
            ],
            [
                "computeTopographicError",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)"
            ],
            [
                "uniform",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer uniform(final double min, final double max)"
            ],
            [
                "function",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)"
            ],
            [
                "randomize",
                "org.apache.commons.math3.ml.neuralnet",
                "FeatureInitializerFactory",
                "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final DfpField field, final String a)"
            ],
            [
                "split",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] split(final Dfp a)"
            ],
            [
                "splitMult",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitDiv",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"
            ],
            [
                "splitPow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp splitPow(final Dfp[] base, int a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp base, int a)"
            ],
            [
                "exp",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp exp(final Dfp a)"
            ],
            [
                "expInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp expInternal(final Dfp a)"
            ],
            [
                "log",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp log(Dfp a)"
            ],
            [
                "logInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp[] logInternal(final Dfp[] a)"
            ],
            [
                "pow",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp pow(Dfp x, final Dfp y)"
            ],
            [
                "sinInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp sinInternal(Dfp[] a)"
            ],
            [
                "cosInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp cosInternal(Dfp[] a)"
            ],
            [
                "sin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp sin(final Dfp a)"
            ],
            [
                "cos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp cos(Dfp a)"
            ],
            [
                "tan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp tan(final Dfp a)"
            ],
            [
                "atanInternal",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "protected static Dfp atanInternal(final Dfp a)"
            ],
            [
                "atan",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp atan(final Dfp a)"
            ],
            [
                "asin",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp asin(final Dfp a)"
            ],
            [
                "acos",
                "org.apache.commons.math3.dfp",
                "DfpMath",
                "public static Dfp acos(Dfp a)"
            ],
            [
                "copysign",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static Dfp copysign(final Dfp x, final Dfp y)"
            ],
            [
                "computeExp",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeExp(final Dfp a, final Dfp one)"
            ],
            [
                "computeLn",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)"
            ],
            [
                "getRandomGenerator",
                "org.apache.commons.math3.genetics",
                "GeneticAlgorithm",
                "public static synchronized RandomGenerator getRandomGenerator()"
            ],
            [
                "randomPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> randomPermutation(final int l)"
            ],
            [
                "identityPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static final List<Double> identityPermutation(final int l)"
            ],
            [
                "comparatorPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)"
            ],
            [
                "inducedPermutation",
                "org.apache.commons.math3.genetics",
                "RandomKey",
                "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException"
            ],
            [
                "randomBinaryRepresentation",
                "org.apache.commons.math3.genetics",
                "BinaryChromosome",
                "public static List<Integer> randomBinaryRepresentation(int length)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3DFormat",
                "public static Vector3DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldVector3D",
                "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static double distance(Rotation r1, Rotation r2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Euclidean3D",
                "public static Euclidean3D getInstance()"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)"
            ],
            [
                "applyTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)"
            ],
            [
                "applyInverseTo",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "FieldRotation",
                "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException"
            ],
            [
                "dotProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double dotProduct(Vector3D v1, Vector3D v2)"
            ],
            [
                "crossProduct",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)"
            ],
            [
                "distance1",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance1(Vector3D v1, Vector3D v2)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distance(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceInf(Vector3D v1, Vector3D v2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static double distanceSq(Vector3D v1, Vector3D v2)"
            ],
            [
                "intersection",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Plane",
                "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Euclidean1D",
                "public static Euclidean1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1DFormat",
                "public static Vector1DFormat getInstance(final Locale locale)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distance(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceInf(Vector1D p1, Vector1D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static double distanceSq(Vector1D p1, Vector1D p2)"
            ],
            [
                "reducePoints",
                "org.apache.commons.math3.geometry.euclidean.twod.hull",
                "AklToussaintHeuristic",
                "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2DFormat",
                "public static Vector2DFormat getInstance(final Locale locale)"
            ],
            [
                "angle",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distance(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceInf",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceInf(Vector2D p1, Vector2D p2)"
            ],
            [
                "distanceSq",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static double distanceSq(Vector2D p1, Vector2D p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Euclidean2D",
                "public static Euclidean2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Line",
                "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static double distance(S1Point p1, S1Point p2)"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.oned",
                "Sphere1D",
                "public static Sphere1D getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Sphere2D",
                "public static Sphere2D getInstance()"
            ],
            [
                "getTransform",
                "org.apache.commons.math3.geometry.spherical.twod",
                "Circle",
                "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)"
            ],
            [
                "distance",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static double distance(S2Point p1, S2Point p2)"
            ],
            [
                "createAdaptor",
                "org.apache.commons.math3.random",
                "RandomAdaptor",
                "public static Random createAdaptor(RandomGenerator randomGenerator)"
            ],
            [
                "createRandomGenerator",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static RandomGenerator createRandomGenerator(final Random rng)"
            ],
            [
                "convertToLong",
                "org.apache.commons.math3.random",
                "RandomGeneratorFactory",
                "public static long convertToLong(int[] seed)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatBigFraction",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static String formatBigFraction(final BigFraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionFormat",
                "public static BigFractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static Fraction getReducedFraction(int numerator, int denominator)"
            ],
            [
                "getReducedFraction",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static BigFraction getReducedFraction(final int numerator, final int denominator)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static NumberFormat getDefaultNumberFormat(final Locale locale)"
            ],
            [
                "parseNextCharacter",
                "org.apache.commons.math3.fraction",
                "AbstractFormat",
                "protected static char parseNextCharacter(final String source, final ParsePosition pos)"
            ],
            [
                "getAvailableLocales",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static Locale[] getAvailableLocales()"
            ],
            [
                "formatFraction",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static String formatFraction(Fraction f)"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance()"
            ],
            [
                "getImproperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getImproperInstance(final Locale locale)"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance()"
            ],
            [
                "getProperInstance",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "public static FractionFormat getProperInstance(final Locale locale)"
            ],
            [
                "getDefaultNumberFormat",
                "org.apache.commons.math3.fraction",
                "FractionFormat",
                "protected static NumberFormat getDefaultNumberFormat()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "FractionField",
                "public static FractionField getInstance()"
            ],
            [
                "getInstance",
                "org.apache.commons.math3.fraction",
                "BigFractionField",
                "public static BigFractionField getInstance()"
            ],
            [
                "flatten",
                "org.apache.commons.math3.exception.util",
                "ArgUtils",
                "public static Object[] flatten(Object[] array)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[] scaleArray(double[] f, double d)"
            ],
            [
                "scaleArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] scaleArray(Complex[] f, double d)"
            ],
            [
                "createRealImaginaryArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static double[][] createRealImaginaryArray(final Complex[] dataC)"
            ],
            [
                "createComplexArray",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException"
            ],
            [
                "exactLog2",
                "org.apache.commons.math3.transform",
                "TransformUtils",
                "public static int exactLog2(final int n) throws MathIllegalArgumentException"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "PRIMES",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };"
            ],
            [
                "PRIMES_LAST",
                "org.apache.commons.math3.primes",
                "SmallPrimes",
                "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];"
            ],
            [
                "MIDPOINT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "MidPointIntegrator",
                "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "ROMBERG_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "RombergIntegrator",
                "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;"
            ],
            [
                "SIMPSON_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "SimpsonIntegrator",
                "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;"
            ],
            [
                "DEFAULT_RELATIVE_ACCURACY",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;"
            ],
            [
                "DEFAULT_MIN_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "BaseAbstractUnivariateIntegrator",
                "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;"
            ],
            [
                "TRAPEZOID_MAX_ITERATIONS_COUNT",
                "org.apache.commons.math3.analysis.integration",
                "TrapezoidIntegrator",
                "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "BaseSecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.analysis.solvers",
                "SecantSolver",
                "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_BANDWIDTH",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_BANDWIDTH = 0.3;"
            ],
            [
                "DEFAULT_ROBUSTNESS_ITERS",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;"
            ],
            [
                "DEFAULT_ACCURACY",
                "org.apache.commons.math3.analysis.interpolation",
                "LoessInterpolator",
                "public static final double DEFAULT_ACCURACY = 1e-12;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.analysis.interpolation",
                "NevilleInterpolator",
                "static final long serialVersionUID = 3003707660147873733L;"
            ],
            [
                "DEFAULT_EXTEND",
                "org.apache.commons.math3.analysis.interpolation",
                "UnivariatePeriodicInterpolator",
                "public static final int DEFAULT_EXTEND = 5;"
            ],
            [
                "DEFAULT_MICROSPHERE_ELEMENTS",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;"
            ],
            [
                "DEFAULT_BRIGHTNESS_EXPONENT",
                "org.apache.commons.math3.analysis.interpolation",
                "MicrosphereInterpolator",
                "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;"
            ],
            [
                "EPSILON",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double EPSILON;"
            ],
            [
                "SAFE_MIN",
                "org.apache.commons.math3.util",
                "Precision",
                "public static final double SAFE_MIN;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToDoubleHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "FREE",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FREE = 0;"
            ],
            [
                "FULL",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte FULL = 1;"
            ],
            [
                "REMOVED",
                "org.apache.commons.math3.util",
                "OpenIntToFieldHashMap",
                "protected static final byte REMOVED = 2;"
            ],
            [
                "PI",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;"
            ],
            [
                "E",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;"
            ],
            [
                "EXP_INT_TABLE_MAX_INDEX",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_MAX_INDEX = 750;"
            ],
            [
                "EXP_INT_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;"
            ],
            [
                "LN_MANT_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int LN_MANT_LEN = 1024;"
            ],
            [
                "EXP_FRAC_TABLE_LEN",
                "org.apache.commons.math3.util",
                "FastMath",
                "static final int EXP_FRAC_TABLE_LEN = 1025;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "FastMath",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NAN = new Split(Double.NaN, 0);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Split",
                "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);"
            ],
            [
                "ADDITIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int ADDITIVE_MODE = 1;"
            ],
            [
                "MULTIPLICATIVE_MODE",
                "org.apache.commons.math3.util",
                "ResizableDoubleArray",
                "public static final int MULTIPLICATIVE_MODE = 0;"
            ],
            [
                "TWO_PI",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double TWO_PI = 2 * FastMath.PI;"
            ],
            [
                "PI_SQUARED",
                "org.apache.commons.math3.util",
                "MathUtils",
                "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;"
            ],
            [
                "FACTORIALS",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };"
            ],
            [
                "STIRLING_S2",
                "org.apache.commons.math3.util",
                "CombinatoricsUtils",
                "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ZERO;"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 ONE;"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NEGATIVE_INFINITY;"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 POSITIVE_INFINITY;"
            ],
            [
                "NAN",
                "org.apache.commons.math3.util",
                "Decimal64",
                "public static final Decimal64 NAN;"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.util",
                "BigReal",
                "public static final BigReal ONE = new BigReal(BigDecimal.ONE);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion I = new Quaternion(0, 1, 0, 0);"
            ],
            [
                "J",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion J = new Quaternion(0, 0, 1, 0);"
            ],
            [
                "K",
                "org.apache.commons.math3.complex",
                "Quaternion",
                "public static final Quaternion K = new Quaternion(0, 0, 0, 1);"
            ],
            [
                "I",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex I = new Complex(0.0, 1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
            ],
            [
                "INF",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ONE = new Complex(1.0, 0.0);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.complex",
                "Complex",
                "public static final Complex ZERO = new Complex(0.0, 0.0);"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optimization.direct",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "DEFAULT_CHECKFEASABLECOUNT",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;"
            ],
            [
                "DEFAULT_STOPFITNESS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final double DEFAULT_STOPFITNESS = 0;"
            ],
            [
                "DEFAULT_ISACTIVECMA",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final boolean DEFAULT_ISACTIVECMA = true;"
            ],
            [
                "DEFAULT_MAXITERATIONS",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_MAXITERATIONS = 30000;"
            ],
            [
                "DEFAULT_DIAGONALONLY",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final int DEFAULT_DIAGONALONLY = 0;"
            ],
            [
                "DEFAULT_RANDOMGENERATOR",
                "org.apache.commons.math3.optimization.direct",
                "CMAESOptimizer",
                "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.optimization.linear",
                "AbstractLinearOptimizer",
                "public static final int DEFAULT_MAX_ITERATIONS = 100;"
            ],
            [
                "DEFAULT_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();"
            ],
            [
                "OCTAVE_FORMAT",
                "org.apache.commons.math3.linear",
                "MatrixUtils",
                "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");"
            ],
            [
                "DEFAULT_ZERO_TOLERANCE",
                "org.apache.commons.math3.linear",
                "OpenMapRealVector",
                "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockFieldMatrix",
                "public static final int BLOCK_SIZE = 36;"
            ],
            [
                "OPERATOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String OPERATOR = \"operator\";"
            ],
            [
                "VECTOR",
                "org.apache.commons.math3.linear",
                "ConjugateGradient",
                "public static final String VECTOR = \"vector\";"
            ],
            [
                "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;"
            ],
            [
                "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD",
                "org.apache.commons.math3.linear",
                "CholeskyDecomposition",
                "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;"
            ],
            [
                "BLOCK_SIZE",
                "org.apache.commons.math3.linear",
                "BlockRealMatrix",
                "public static final int BLOCK_SIZE = 52;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "SymmLQ",
                "static final double MACH_PREC;"
            ],
            [
                "CBRT_MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double CBRT_MACH_PREC;"
            ],
            [
                "MACH_PREC",
                "org.apache.commons.math3.linear",
                "State",
                "static final double MACH_PREC;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "CauchyDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "AbstractRealDistribution",
                "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "TDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ChiSquaredDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "BetaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "UniformRealDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "WeibullDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "NakagamiDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ExponentialDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "LogNormalDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "ParetoDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "FDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_MAX_ITERATIONS",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final int DEFAULT_MAX_ITERATIONS = 10000000;"
            ],
            [
                "DEFAULT_EPSILON",
                "org.apache.commons.math3.distribution",
                "PoissonDistribution",
                "public static final double DEFAULT_EPSILON = 1e-12;"
            ],
            [
                "DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
                "org.apache.commons.math3.distribution",
                "GammaDistribution",
                "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;"
            ],
            [
                "DEFAULT_ULPS",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final int DEFAULT_ULPS = 10;"
            ],
            [
                "DEFAULT_CUT_OFF",
                "org.apache.commons.math3.optim.linear",
                "SimplexSolver",
                "static final double DEFAULT_CUT_OFF = 1e-10;"
            ],
            [
                "MINIMUM_PROBLEM_DIMENSION",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final int MINIMUM_PROBLEM_DIMENSION = 2;"
            ],
            [
                "DEFAULT_INITIAL_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_INITIAL_RADIUS = 10.0;"
            ],
            [
                "DEFAULT_STOPPING_RADIUS",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "BOBYQAOptimizer",
                "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;"
            ],
            [
                "GAMMA",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double GAMMA = 0.577215664901532860606512090082;"
            ],
            [
                "LANCZOS_G",
                "org.apache.commons.math3.special",
                "Gamma",
                "public static final double LANCZOS_G = 607.0 / 128.0;"
            ],
            [
                "DEFAULT_NAN_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;"
            ],
            [
                "DEFAULT_TIES_STRATEGY",
                "org.apache.commons.math3.stat.ranking",
                "NaturalRanking",
                "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;"
            ],
            [
                "MAXIMUM_PARTIAL_SUM_COUNT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;"
            ],
            [
                "KS_SUM_CAUCHY_CRITERION",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;"
            ],
            [
                "PG_SUM_RELATIVE_ERROR",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;"
            ],
            [
                "SMALL_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int SMALL_SAMPLE_PRODUCT = 200;"
            ],
            [
                "LARGE_SAMPLE_PRODUCT",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int LARGE_SAMPLE_PRODUCT = 10000;"
            ],
            [
                "MONTE_CARLO_ITERATIONS",
                "org.apache.commons.math3.stat.inference",
                "KolmogorovSmirnovTest",
                "protected static final int MONTE_CARLO_ITERATIONS = 1000000;"
            ],
            [
                "INFINITE_WINDOW",
                "org.apache.commons.math3.stat.descriptive",
                "DescriptiveStatistics",
                "public static final int INFINITE_WINDOW = -1;"
            ],
            [
                "UPSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;"
            ],
            [
                "DOWNSIDE_VARIANCE",
                "org.apache.commons.math3.stat.descriptive.moment",
                "SemiVariance",
                "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "MapUtils",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "COMPARATOR",
                "org.apache.commons.math3.ml.neuralnet",
                "PairNeuronDouble",
                "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};"
            ],
            [
                "RADIX",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int RADIX = 10000;"
            ],
            [
                "MIN_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MIN_EXP = -32767;"
            ],
            [
                "MAX_EXP",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int MAX_EXP = 32768;"
            ],
            [
                "ERR_SCALE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final int ERR_SCALE = 32760;"
            ],
            [
                "FINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte FINITE = 0;"
            ],
            [
                "INFINITE",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte INFINITE = 1;"
            ],
            [
                "SNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte SNAN = 2;"
            ],
            [
                "QNAN",
                "org.apache.commons.math3.dfp",
                "Dfp",
                "public static final byte QNAN = 3;"
            ],
            [
                "FLAG_INVALID",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INVALID = 1;"
            ],
            [
                "FLAG_DIV_ZERO",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_DIV_ZERO = 2;"
            ],
            [
                "FLAG_OVERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_OVERFLOW = 4;"
            ],
            [
                "FLAG_UNDERFLOW",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_UNDERFLOW = 8;"
            ],
            [
                "FLAG_INEXACT",
                "org.apache.commons.math3.dfp",
                "DfpField",
                "public static final int FLAG_INEXACT = 16;"
            ],
            [
                "DEFAULT_PREFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_PREFIX = \"{\";"
            ],
            [
                "DEFAULT_SUFFIX",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SUFFIX = \"}\";"
            ],
            [
                "DEFAULT_SEPARATOR",
                "org.apache.commons.math3.geometry",
                "VectorFormat",
                "public static final String DEFAULT_SEPARATOR = \"; \";"
            ],
            [
                "XYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "XZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "YXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "YZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "ZXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "ZYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XYX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);"
            ],
            [
                "XZX",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);"
            ],
            [
                "YXY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);"
            ],
            [
                "YZY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);"
            ],
            [
                "ZXZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);"
            ],
            [
                "ZYZ",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "RotationOrder",
                "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);"
            ],
            [
                "IDENTITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Rotation",
                "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D ZERO = new Vector3D(0, 0, 0);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.threed",
                "Vector3D",
                "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ZERO = new Vector1D(0.0);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D ONE = new Vector1D(1.0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NaN = new Vector1D(Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.oned",
                "Vector1D",
                "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D ZERO = new Vector2D(0, 0);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
            ],
            [
                "POSITIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
            ],
            [
                "NEGATIVE_INFINITY",
                "org.apache.commons.math3.geometry.euclidean.twod",
                "Vector2D",
                "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.oned",
                "S1Point",
                "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);"
            ],
            [
                "PLUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);"
            ],
            [
                "PLUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);"
            ],
            [
                "PLUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);"
            ],
            [
                "MINUS_I",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);"
            ],
            [
                "MINUS_J",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);"
            ],
            [
                "MINUS_K",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);"
            ],
            [
                "NaN",
                "org.apache.commons.math3.geometry.spherical.twod",
                "S2Point",
                "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);"
            ],
            [
                "DIGEST_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int DIGEST_MODE = 0;"
            ],
            [
                "REPLAY_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int REPLAY_MODE = 1;"
            ],
            [
                "UNIFORM_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int UNIFORM_MODE = 2;"
            ],
            [
                "EXPONENTIAL_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int EXPONENTIAL_MODE = 3;"
            ],
            [
                "GAUSSIAN_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int GAUSSIAN_MODE = 4;"
            ],
            [
                "CONSTANT_MODE",
                "org.apache.commons.math3.random",
                "ValueServer",
                "public static final int CONSTANT_MODE = 5;"
            ],
            [
                "DEFAULT_BIN_COUNT",
                "org.apache.commons.math3.random",
                "EmpiricalDistribution",
                "public static final int DEFAULT_BIN_COUNT = 1000;"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO = new Fraction(2, 1);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE = new Fraction(1, 1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ZERO = new Fraction(0, 1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_FIFTH = new Fraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_HALF = new Fraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_QUARTER = new Fraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction ONE_THIRD = new Fraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "Fraction",
                "public static final Fraction MINUS_ONE = new Fraction(-1, 1);"
            ],
            [
                "TWO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO = new BigFraction(2);"
            ],
            [
                "ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE = new BigFraction(1);"
            ],
            [
                "ZERO",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ZERO = new BigFraction(0);"
            ],
            [
                "MINUS_ONE",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction MINUS_ONE = new BigFraction(-1);"
            ],
            [
                "FOUR_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);"
            ],
            [
                "ONE_FIFTH",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);"
            ],
            [
                "ONE_HALF",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_HALF = new BigFraction(1, 2);"
            ],
            [
                "ONE_QUARTER",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);"
            ],
            [
                "ONE_THIRD",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);"
            ],
            [
                "THREE_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);"
            ],
            [
                "THREE_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
            ],
            [
                "TWO_FIFTHS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);"
            ],
            [
                "TWO_QUARTERS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);"
            ],
            [
                "TWO_THIRDS",
                "org.apache.commons.math3.fraction",
                "BigFraction",
                "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);"
            ],
            [
                "INTEGER_ZERO",
                "org.apache.commons.math3.exception",
                "MathIllegalNumberException",
                "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastSineTransformer",
                "static final long serialVersionUID = 20120211L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastFourierTransformer",
                "static final long serialVersionUID = 20120210L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastCosineTransformer",
                "static final long serialVersionUID = 20120212L;"
            ],
            [
                "serialVersionUID",
                "org.apache.commons.math3.transform",
                "FastHadamardTransformer",
                "static final long serialVersionUID = 20120211L;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "size",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getStartPoint",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getStartPoint()"
            ],
            [
                "getStatisticsDHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsDHistory()"
            ],
            [
                "getConvergenceChecker",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public ConvergenceChecker<PAIR> getConvergenceChecker()"
            ],
            [
                "getStatisticsMeanHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<RealMatrix> getStatisticsMeanHistory()"
            ],
            [
                "getMaxIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxIterations()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "protected PointValuePair doOptimize()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public PAIR optimize() throws TooManyEvaluationsException, TooManyIterationsException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getGoalType",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public GoalType getGoalType()"
            ],
            [
                "doOptimize",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected abstract PAIR doOptimize()"
            ],
            [
                "getStatisticsSigmaHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsSigmaHistory()"
            ],
            [
                "computeObjectiveValue",
                "org.apache.commons.math3.optim.nonlinear.scalar",
                "MultivariateOptimizer",
                "public double computeObjectiveValue(double[] arg0)"
            ],
            [
                "getIterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getIterations()"
            ],
            [
                "getEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getEvaluations()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public PointValuePair optimize(OptimizationData... optData) throws TooManyEvaluationsException, DimensionMismatchException"
            ],
            [
                "getUpperBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getUpperBound()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getMaxEvaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "public int getMaxEvaluations()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getStatisticsFitnessHistory",
                "org.apache.commons.math3.optim.nonlinear.scalar.noderiv",
                "CMAESOptimizer",
                "public List<Double> getStatisticsFitnessHistory()"
            ],
            [
                "optimize",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public transient PAIR optimize(OptimizationData[] arg0)"
            ],
            [
                "getLowerBound",
                "org.apache.commons.math3.optim",
                "BaseMultivariateOptimizer",
                "public double[] getLowerBound()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "",
                "double[]",
                "public boolean equals(Object);"
            ],
            [
                "toString",
                "",
                "double[]",
                "public String toString()"
            ],
            [
                "hashCode",
                "",
                "double[]",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "",
                "double[]",
                "public final native Class getClass();"
            ],
            [
                "clone",
                "",
                "double[]",
                "public T[] clone();"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "evaluations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor evaluations;"
            ],
            [
                "iterations",
                "org.apache.commons.math3.optim",
                "BaseOptimizer",
                "protected Incrementor iterations;"
            ],
            [
                "length",
                "",
                "double[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]