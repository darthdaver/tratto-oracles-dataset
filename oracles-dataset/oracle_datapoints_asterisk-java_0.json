[
    {
        "id": 26701,
        "oracle": "true ? methodResultID.getMaxDigits() == 1024 && methodResultID.getTimeout() == 0 : true;",
        "oracleType": "NORMAL_POST",
        "projectName": "asterisk-java",
        "packageName": "org.asteriskjava.fastagi.command",
        "className": "GetDataCommand",
        "javadocTag": "",
        "methodJavadoc": "    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */",
        "methodSourceCode": "public GetDataCommand(String file){\n    super();\n    this.file = file;\n    this.timeout = DEFAULT_TIMEOUT;\n    this.maxDigits = DEFAULT_MAX_DIGITS;\n}",
        "classJavadoc": "/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */",
        "classSourceCode": "/*\n *  Copyright 2004-2006 Stefan Reuter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.asteriskjava.fastagi.command;\n\n/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */\npublic class GetDataCommand extends AbstractAgiCommand {\n    private static final long serialVersionUID = 3978141041352128820L;\n\n    private static final int DEFAULT_TIMEOUT = 0;\n    private static final int DEFAULT_MAX_DIGITS = 1024;\n\n    /**\n     * The name of the file to stream.\n     */\n    private String file;\n\n    /**\n     * The timeout in milliseconds to wait for data.\n     * <p>\n     * 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    private long timeout;\n\n    /**\n     * The maximum number of digits to read.\n     * <p>\n     * Must be in [1..1024].\n     */\n    private int maxDigits;\n\n    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public GetDataCommand(String file) {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public GetDataCommand(String file, long timeout) {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException {\n        super();\n        validateMaxDigits(maxDigits);\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }\n\n    /**\n     * Returns the name of the file to stream.\n     *\n     * @return the name of the file to stream.\n     */\n    public String getFile() {\n        return file;\n    }\n\n    /**\n     * Sets the name of the file to stream.\n     * <p>\n     * This attribute is mandatory.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    /**\n     * Returns the timeout to wait for data.\n     *\n     * @return the timeout in milliseconds to wait for data.\n     */\n    public long getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Sets the timeout to wait for data.\n     *\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * Returns the maximum number of digits to read.\n     *\n     * @return the maximum number of digits to read.\n     */\n    public int getMaxDigits() {\n        return maxDigits;\n    }\n\n    /**\n     * Sets the maximum number of digits to read.\n     *\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public void setMaxDigits(int maxDigits) throws IllegalArgumentException {\n        validateMaxDigits(maxDigits);\n\n        this.maxDigits = maxDigits;\n    }\n\n    @Override\n    public String buildCommand() {\n        if (maxDigits == DEFAULT_MAX_DIGITS) {\n            if (timeout == DEFAULT_TIMEOUT) {\n                return \"GET DATA \" + escapeAndQuote(file);\n            }\n            return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n    }\n\n    private static void validateMaxDigits(int maxDigits) {\n        if (maxDigits < 1 || maxDigits > 1024) {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "AsteriskVersion",
                "org.asteriskjava"
            ],
            [
                "SimpleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidOrUnknownCommandException",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidCommandSyntaxException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServerThread",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiNetworkException",
                "org.asteriskjava.fastagi"
            ],
            [
                "MappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannelFactory",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiChannelImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiReplyImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "DefaultAgiChannelFactory",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiRequestImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "StaticMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "DefaultAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiHangupException",
                "org.asteriskjava.fastagi"
            ],
            [
                "CompositeMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiReply",
                "org.asteriskjava.fastagi.reply"
            ],
            [
                "SpeechRecognitionResult",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiOperations",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiRequest",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "ResourceBundleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "NamedAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "ScriptEngineMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiException",
                "org.asteriskjava.fastagi"
            ],
            [
                "ClassNameMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "QueueCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechLoadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDestroyCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechSetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ControlStreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabasePutCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelTreeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetFullVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ExecCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOffCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDateTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDigitsCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDeactivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetOptionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseGetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechUnloadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AnswerCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "WaitForDigitCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AbstractAgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayAlphaCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DialCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "MeetmeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "HangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechRecognizeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendImageCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayNumberCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "StreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AsyncAgiBreakCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetCallerIdCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "RecordFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "BridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ConfbridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetContextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveCharCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GosubCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetAutoHangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechActivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetDataCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "VerboseCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "TddModeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "NoopCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetPriorityCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechCreateCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ChannelStatusCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOnCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetExtensionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayPhoneticCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiReader",
                "org.asteriskjava.fastagi"
            ],
            [
                "BaseAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannel",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiSpeechException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiWriter",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "HtmlEventTracer",
                "org.asteriskjava.tools"
            ],
            [
                "LogFactory",
                "org.asteriskjava.util"
            ],
            [
                "DaemonThreadFactory",
                "org.asteriskjava.util"
            ],
            [
                "MixMonitorDirection",
                "org.asteriskjava.util"
            ],
            [
                "Base64",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "JavaLoggingLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "FastScannerCrNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScanner",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerFactory",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "Slf4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "LocationAwareWrapper",
                "org.asteriskjava.util.internal"
            ],
            [
                "ServerSocketFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "FileTrace",
                "org.asteriskjava.util.internal"
            ],
            [
                "Trace",
                "org.asteriskjava.util.internal"
            ],
            [
                "NullLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "Log4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "AstUtil",
                "org.asteriskjava.util"
            ],
            [
                "DateUtil",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacade",
                "org.asteriskjava.util"
            ],
            [
                "Log",
                "org.asteriskjava.util"
            ],
            [
                "AstState",
                "org.asteriskjava.util"
            ],
            [
                "ServerSocketFacade",
                "org.asteriskjava.util"
            ],
            [
                "ReflectionUtil",
                "org.asteriskjava.util"
            ],
            [
                "ConfigParseException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigDirective",
                "org.asteriskjava.config"
            ],
            [
                "ConfigElement",
                "org.asteriskjava.config"
            ],
            [
                "IncludeDirective",
                "org.asteriskjava.config"
            ],
            [
                "ExecDirective",
                "org.asteriskjava.config"
            ],
            [
                "Category",
                "org.asteriskjava.config"
            ],
            [
                "MissingDirectiveParameterException",
                "org.asteriskjava.config"
            ],
            [
                "ExtensionsConfigFileReader",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigInclude",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigExtension",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ExtensionsConfigFile",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigVariable",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileReader",
                "org.asteriskjava.config"
            ],
            [
                "MissingEqualSignException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFile",
                "org.asteriskjava.config"
            ],
            [
                "UnknownDirectiveException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.config"
            ],
            [
                "LockableSet",
                "org.asteriskjava.lock"
            ],
            [
                "Lockable",
                "org.asteriskjava.lock"
            ],
            [
                "LockableList",
                "org.asteriskjava.lock"
            ],
            [
                "Locker",
                "org.asteriskjava.lock"
            ],
            [
                "LockableMap",
                "org.asteriskjava.lock"
            ],
            [
                "AgiChannelActivityHangup",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "BlindTransferResultListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityDial",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ConfiguableAGIServer",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScript",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiMappingStragegy",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiConfiguration",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScriptImpl",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "DuplicateScriptException",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiChannelActivityHoldForBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityArrivalListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityTransientHoldSilence",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityQueue",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityHold",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityMeetme",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityPlayMessage",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityVoicemail",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityAgi",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBlindTransfer",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "CallStateAnswered",
                "org.asteriskjava.pbx"
            ],
            [
                "Activity",
                "org.asteriskjava.pbx"
            ],
            [
                "InvalidChannelName",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateData",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "PBX",
                "org.asteriskjava.pbx"
            ],
            [
                "CompletionAdaptor",
                "org.asteriskjava.pbx"
            ],
            [
                "AsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "LogTime",
                "org.asteriskjava.pbx.util"
            ],
            [
                "ManagerError",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "HangupAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "CommandAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelState",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEventHelper",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UserEvent",
                "org.asteriskjava.pbx.asterisk.wrap.userEvents"
            ],
            [
                "NewExtensionListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallImpl",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXException",
                "org.asteriskjava.pbx"
            ],
            [
                "DialPlanExtension",
                "org.asteriskjava.pbx"
            ],
            [
                "FilteredManagerListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerConnection",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallEndedListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerMonitor",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelProxy",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "FilteredManagerListenerWrapper",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "LiveChannelManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "AsteriskPBX",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerState",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "DialLocalToAgiActivity",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "Peer",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EndPointImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventQueue",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentEventFactory",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ActiveCallListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallTracker",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ListenerManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EventLifeMonitor",
                "org.asteriskjava.pbx.internal.eventQueue"
            ],
            [
                "EventListenerBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateResult",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "MonitorCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "DialToAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Connector",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateToExtension",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "HoldAtAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Dial",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectToMeetMe",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "NoMeetmeException",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DurationRoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "CallerIDImpl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoom",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "RoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoomControl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DialActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "HoldActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "DialToAgiActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "JoinActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BridgeActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ParkActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "SplitActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "RedirectToActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BlindTransferActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ActivityHelper",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ChannelHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataParked",
                "org.asteriskjava.pbx"
            ],
            [
                "ListenerPriority",
                "org.asteriskjava.pbx"
            ],
            [
                "Channel",
                "org.asteriskjava.pbx"
            ],
            [
                "Call",
                "org.asteriskjava.pbx"
            ],
            [
                "ChannelFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "Trunk",
                "org.asteriskjava.pbx"
            ],
            [
                "Tech",
                "org.asteriskjava.pbx"
            ],
            [
                "AgiChannelActivityAction",
                "org.asteriskjava.pbx"
            ],
            [
                "DefaultAsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "EndPoint",
                "org.asteriskjava.pbx"
            ],
            [
                "TechType",
                "org.asteriskjava.pbx"
            ],
            [
                "HoldActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BridgeActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "JoinActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "RedirectToActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "ParkActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BlindTransferActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "SplitActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialToAgiActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "NewChannelListener",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityCallback",
                "org.asteriskjava.pbx"
            ],
            [
                "CallHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "DTMFTone",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataNewInbound",
                "org.asteriskjava.pbx"
            ],
            [
                "PhoneNumber",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityStatusEnum",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataTransfer",
                "org.asteriskjava.pbx"
            ],
            [
                "CallDirection",
                "org.asteriskjava.pbx"
            ],
            [
                "CallerID",
                "org.asteriskjava.pbx"
            ],
            [
                "ManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerError",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxCountResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ChallengeResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ModuleCheckResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetVarResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreSettingsResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeBuddyResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetConfigResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ExtensionStateResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeLicenseStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SipShowPeerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "PingResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MixMonitorResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerConnectionState",
                "org.asteriskjava.manager"
            ],
            [
                "DefaultManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "EventAttributesHelper",
                "org.asteriskjava.manager.util"
            ],
            [
                "SendEventGeneratingActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnectionFactory",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerEventListenerProxy",
                "org.asteriskjava.manager"
            ],
            [
                "AbstractManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ExpectedResponse",
                "org.asteriskjava.manager"
            ],
            [
                "ResponseBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "BridgeEnterEventComparator",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgeState",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgesActive",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "MeetmeCompatibility",
                "org.asteriskjava.manager.internal.backwardsCompatibility.meetme"
            ],
            [
                "BackwardsCompatibilityForManagerEvents",
                "org.asteriskjava.manager.internal.backwardsCompatibility"
            ],
            [
                "EventBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReader",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriter",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerUtil",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerConnectionImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "EventBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "Dispatcher",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReaderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "AsyncEventPump",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseEventsImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ProtocolIdentifierWrapper",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriterImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "PingThread",
                "org.asteriskjava.manager"
            ],
            [
                "EventTimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbsoluteTimeoutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkedCallsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MessageSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIDeleteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VoicemailUsersListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddiesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIUpdateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowContactsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreSettingsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "IaxPeerListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentCallbackLoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapTransferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxCountAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeLockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapRestartAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VariableInheritance",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAddBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "HangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetCdrUserFieldAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ShowDialplanAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueSummaryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeRemoveBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAccountPropertyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOnAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgiAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueChangePriorityCallerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UpdateConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "EventsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExtensionStateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueRemoveAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeSetSingleVideoSrcAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePauseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListRoomsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExecAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStopRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePenaltyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "FilterAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueAddAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UnpauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDialOffhookAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueResetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChangeMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowRegistryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SendTextAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DahdiShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractMeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentLogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LocalOptimizeAwayAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnlockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CommandAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "JabberSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStartRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleSendSMSAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MuteAudioAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueLogAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleCheckAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapHangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleLoadAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelTreeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeChatSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueMemberRingInUseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSIPNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChallengeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbPutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AtxferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleShowDevicesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AsteriskMapping",
                "org.asteriskjava.manager"
            ],
            [
                "TimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "AuthenticationFailedException",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "DtmfEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SuccessfulAuthEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewConnectedLineEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeAccountStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPenaltyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractQueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AttendedTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueStatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ProtocolIdentifierReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DeviceStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentRingNoAnswerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeStopTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleDeviceEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleShowDevicesCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnpausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEnterEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxDocumentStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LogChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateSuccessEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FullyBootedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmClearEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerPushEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeChatMessageEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AntennaLevelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointList",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetailComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeMergeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractUnParkedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractConfbridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerRunEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MessageWaitingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtpStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidAccountId",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSBase64Event",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateFailureEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidPasswordEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnholdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JitterBufStatsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PriEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RequestBadFormatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeResponseFailedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DAHDIChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractAgentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CdrEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelUpdateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShowDialplanCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerAbandonEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "T38FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCENDEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JabberEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransportDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReceiveFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactList",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewCMGREvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberAddedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShutdownEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPauseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpReceiverStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UserEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallGiveUpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCallStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEnum",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeDestroyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMixMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PickupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberRemovedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "ModuleLoadReportEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AuthDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeCreateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeMuteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SoftHangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistrationsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AorDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeersEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewAccountCodeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpSenderStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ListDialplanEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtcpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueParamsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewCallerIdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallTimeOutEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentDumpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.manager"
            ],
            [
                "SendActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "Cli",
                "org.asteriskjava"
            ],
            [
                "ExampleCallIn",
                "org.asteriskjava.examples.fastagi"
            ],
            [
                "Hold",
                "org.asteriskjava.examples.activities"
            ],
            [
                "ExamplesAsteriskSettings",
                "org.asteriskjava.examples.activities"
            ],
            [
                "BlindTransfer",
                "org.asteriskjava.examples.activities"
            ],
            [
                "Dial",
                "org.asteriskjava.examples.activities"
            ],
            [
                "MeetMeUserState",
                "org.asteriskjava.live"
            ],
            [
                "MeetMeUser",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueEntry",
                "org.asteriskjava.live"
            ],
            [
                "SecureAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "Extension",
                "org.asteriskjava.live"
            ],
            [
                "ExtensionHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "AbstractAsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "RecordingException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelStateHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "QueueEntryState",
                "org.asteriskjava.live"
            ],
            [
                "LiveObject",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueue",
                "org.asteriskjava.live"
            ],
            [
                "LinkedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchChannelException",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchInterfaceException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelState",
                "org.asteriskjava.live"
            ],
            [
                "HangupCause",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgentImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueEntryImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeUserImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "QueueManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AgentManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueMemberImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "OriginateCallbackData",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskServerImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AbstractLiveObject",
                "org.asteriskjava.live.internal"
            ],
            [
                "ManagerCommunicationExceptionMapper",
                "org.asteriskjava.live.internal"
            ],
            [
                "CallDetailRecordImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoomImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "ChannelManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskChannelImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "Constants",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoom",
                "org.asteriskjava.live"
            ],
            [
                "AgentState",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskChannel",
                "org.asteriskjava.live"
            ],
            [
                "AmaFlags",
                "org.asteriskjava.live"
            ],
            [
                "Voicemailbox",
                "org.asteriskjava.live"
            ],
            [
                "QueueMemberState",
                "org.asteriskjava.live"
            ],
            [
                "DefaultAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueMember",
                "org.asteriskjava.live"
            ],
            [
                "LiveException",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "DialedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "CallDetailRecord",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgent",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueListener",
                "org.asteriskjava.live"
            ],
            [
                "Disposition",
                "org.asteriskjava.live"
            ],
            [
                "OriginateCallback",
                "org.asteriskjava.live"
            ],
            [
                "ManagerCommunicationException",
                "org.asteriskjava.live"
            ],
            [
                "CallerId",
                "org.asteriskjava.live"
            ],
            [
                "InvalidPenaltyException",
                "org.asteriskjava.live"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getDetermineVersionFromString",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Determine the Asterisk version from the string returned by Asterisk. The\n * string should contain \"Asterisk \" followed by a version number.\n *\n * @param coreLine\n * @return the detected version, or null if unknown\n */\npublic static AsteriskVersion getDetermineVersionFromString(String coreLine) {\n    for (AsteriskVersion version : knownVersions) {\n        for (Pattern pattern : version.patterns) {\n            if (pattern.matcher(coreLine).matches()) {\n                return version;\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "getChannel",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "/**\n * Returns the AgiChannel associated with the current thread.\n *\n * @return the AgiChannel associated with the current thread or\n * <code>null</code> if none is associated.\n */\npublic static AgiChannel getChannel() {\n    return AgiConnectionHandler.channel.get();\n}"
            ],
            [
                "getExtension",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * Returns the extension (the part after the last \".\") of the given script.\n *\n * @param scriptName the name of the script to return the extension of.\n * @return the extension of the script or <code>null</code> if there is no\n * extension.\n */\nprotected static String getExtension(String scriptName) {\n    if (scriptName == null) {\n        return null;\n    }\n    int filePosition = scriptName.lastIndexOf(\"/\");\n    String fileName;\n    if (scriptName.lastIndexOf(\"\\\\\") > filePosition) {\n        filePosition = scriptName.lastIndexOf(\"\\\\\");\n    }\n    if (filePosition >= 0) {\n        fileName = scriptName.substring(filePosition + 1);\n    } else {\n        fileName = scriptName;\n    }\n    final int extensionPosition = fileName.lastIndexOf(\".\");\n    if (extensionPosition >= 0) {\n        return fileName.substring(extensionPosition + 1);\n    }\n    return null;\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "protected static Reader getReader(File file) throws FileNotFoundException {\n    final InputStream is = new FileInputStream(file);\n    return new InputStreamReader(is, StandardCharsets.UTF_8);\n}"
            ],
            [
                "getLog",
                "org.asteriskjava.util",
                "LogFactory",
                "/**\n * Returns an instance of Log suitable for logging from the given class.\n *\n * @param clazz the class to create the logger for.\n * @return the created logger.\n */\npublic synchronized static Log getLog(Class<?> clazz) {\n    if (slf4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.slf4j.Logger\");\n            slf4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (slf4jLoggingAvailable) {\n        try {\n            return new Slf4JLogger(clazz);\n        } catch (Throwable e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.apache.logging.log4j.Logger\");\n            log4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            log4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable) {\n        return new Log4JLogger(clazz);\n    }\n    if (javaLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"java.util.logging.Logger\");\n            javaLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            javaLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (javaLoggingAvailable) {\n        return new JavaLoggingLog(clazz);\n    }\n    return new NullLog();\n}"
            ],
            [
                "byteArrayToBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into a Base64 string as per\n * Preferences.put(byte[]).\n */\npublic static String byteArrayToBase64(byte[] a) {\n    return byteArrayToBase64(a, false);\n}"
            ],
            [
                "byteArrayToAltBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into an \"alternate representation\"\n * Base64 string.  This non-standard variant uses an alphabet that does\n * not contain the uppercase alphabetic characters, which makes it\n * suitable for use in situations where case-folding occurs.\n */\npublic static String byteArrayToAltBase64(byte[] a) {\n    return byteArrayToBase64(a, true);\n}"
            ],
            [
                "base64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified Base64 string (as per Preferences.get(byte[]))\n * into a byte array.\n *\n * @throws IllegalArgumentException if <tt>s</tt> is not a valid Base64\n *                                  string.\n */\npublic static byte[] base64ToByteArray(String s) {\n    return base64ToByteArray(s, false);\n}"
            ],
            [
                "altBase64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified \"alternate representation\" Base64 string\n * into a byte array.\n *\n * @throws IllegalArgumentException or ArrayOutOfBoundsException\n *                                  if <tt>s</tt> is not a valid alternate representation\n *                                  Base64 string.\n */\npublic static byte[] altBase64ToByteArray(String s) {\n    return base64ToByteArray(s, true);\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.util.internal.streamreader",
                "FastScannerFactory",
                "public static FastScanner getReader(Readable reader, Pattern pattern) {\n    if (!useLegacyScanner) {\n        if (pattern.pattern().equals(\"\\r\\n\")) {\n            return new FastScannerCrNl(reader);\n        }\n        if (pattern.pattern().equals(\"\\n\")) {\n            return new FastScannerNl(reader);\n        }\n    }\n    // fall back to legacy Scanner\n    logger.warn(\"Using legacy scanner\");\n    Scanner scanner = new Scanner(reader);\n    scanner.useDelimiter(pattern);\n    return getWrappedScanner(scanner);\n}"
            ],
            [
                "isTrue",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if a String represents <code>true</code> or <code>false</code>\n * according to Asterisk's logic. <br>\n * The original implementation is <code>util.c</code> is as follows: <br>\n *\n * <pre>\n *     int ast_true(const char *s)\n *     {\n *         if (!s || ast_strlen_zero(s))\n *             return 0;\n * <br>\n *         if (!strcasecmp(s, &quot;yes&quot;) ||\n *             !strcasecmp(s, &quot;true&quot;) ||\n *             !strcasecmp(s, &quot;y&quot;) ||\n *             !strcasecmp(s, &quot;t&quot;) ||\n *             !strcasecmp(s, &quot;1&quot;) ||\n *             !strcasecmp(s, &quot;on&quot;))\n *             return -1;\n * <br>\n *         return 0;\n *     }\n * </pre>\n *\n * <br>\n * To support the dnd property of\n * {@link org.asteriskjava.manager.event.ZapShowChannelsEvent} this method\n * also consideres the string \"Enabled\" as true.\n *\n * @param o the Object (usually a String) to check for <code>true</code>.\n * @return <code>true</code> if s represents <code>true</code>,\n * <code>false</code> otherwise.\n */\npublic static boolean isTrue(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (o instanceof Boolean) {\n        return (Boolean) o;\n    }\n    return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n}"
            ],
            [
                "isEqual",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * @param a an object\n * @param b an object to be compared with {@code a} for equality\n * @return {@code true} if the arguments are equal to each other and\n * {@code false} otherwise\n */\npublic static boolean isEqual(Object a, Object b) {\n    return a == b || a != null && a.equals(b);\n}"
            ],
            [
                "parseCallerId",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Parses a string for caller id information. <br>\n * The caller id string should be in the form\n * <code>\"Some Name\" &lt;1234&gt;</code>. <br>\n * This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code>\n * but strips any whitespace.\n *\n * @param s the string to parse\n * @return a String[] with name (index 0) and number (index 1)\n */\npublic static String[] parseCallerId(String s) {\n    final String[] result = new String[2];\n    final int lbPosition;\n    final int rbPosition;\n    String name;\n    String number;\n    if (s == null) {\n        return result;\n    }\n    lbPosition = s.lastIndexOf('<');\n    rbPosition = s.lastIndexOf('>');\n    // no opening and closing brace? use value as CallerId name\n    if (lbPosition < 0 || rbPosition < 0) {\n        name = s.trim();\n        if (name.length() == 0) {\n            name = null;\n        }\n        result[0] = name;\n        return result;\n    }\n    number = s.substring(lbPosition + 1, rbPosition).trim();\n    if (number.length() == 0) {\n        number = null;\n    }\n    name = s.substring(0, lbPosition).trim();\n    if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1) {\n        name = name.substring(1, name.length() - 1).trim();\n    }\n    if (name.length() == 0) {\n        name = null;\n    }\n    result[0] = name;\n    result[1] = number;\n    return result;\n}"
            ],
            [
                "isNull",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if the value of s was <code>null</code> in Asterisk. <br>\n * This method is useful as Asterisk likes to replace <code>null</code>\n * values with different string values like \"unknown\", \"&lt;unknown&gt;\" or\n * \"&lt;null&gt;\". <br>\n * To find such replacements search for <code>S_OR</code> in Asterisk's\n * source code. You will find things like\n *\n * <pre>\n * S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\")\n * fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\"));\n * </pre>\n * <p>\n * and more...\n *\n * @param s the string to test, may be <code>null</code>. If s is not a\n *          string the only test that is performed is a check for\n *          <code>null</code>.\n * @return <code>true</code> if the s was <code>null</code> in Asterisk;\n * <code>false</code> otherwise.\n */\npublic static boolean isNull(Object s) {\n    if (s == null) {\n        return true;\n    }\n    if (!(s instanceof String)) {\n        return false;\n    }\n    return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n}"
            ],
            [
                "convertAsteriskBooleanStringToStandardBooleanString",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Converts a non-standard Asterisk boolean String value into something the Boolean class\n * String constructor recognizes.\n * <p>\n * Asterisk can return various strings that represent truth values.\n * This method converts them into standard True/False, or null if null.\n *\n * @param value\n * @return <code>true</code> if the String is \"true\" or \"yes\" (case insensitive).\n * <code>false</code> if the String is \"false\" or \"no\" (case insensitive).\n * <code>null</code> if the String is null.\n * @throws <code>IllegalArgumentException</code> if any other value not listed above.\n */\npublic static String convertAsteriskBooleanStringToStandardBooleanString(String value) {\n    if (value == null)\n        return null;\n    switch(value.toLowerCase()) {\n        case \"true\":\n        case \"yes\":\n            return \"True\";\n        case \"false\":\n        case \"no\":\n            return \"False\";\n        default:\n            throw new IllegalArgumentException(\"value of:\" + value + \" was not recognized as a boolean\");\n    }\n}"
            ],
            [
                "getDate",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Returns the real current date or the date set with overrideCurrentDate().\n *\n * @return the real current date or the date set with overrideCurrentDate().\n */\npublic static Date getDate() {\n    if (currentDate == null) {\n        return new Date();\n    }\n    return currentDate;\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the default time zone.\n *\n * @param s date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s) {\n    return parseDateTime(s, null);\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the given time zone.\n *\n * @param s  date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @param tz the timezone to use or <code>null</code> for the default time\n *           zone.\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s, TimeZone tz) {\n    DateFormat df;\n    if (s == null) {\n        return null;\n    }\n    df = new SimpleDateFormat(DATE_TIME_PATTERN);\n    if (tz != null) {\n        df.setTimeZone(tz);\n    }\n    try {\n        return df.parse(s);\n    } catch (ParseException e) {\n        return null;\n    }\n}"
            ],
            [
                "str2state",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.\n *\n * @param str state as a descriptive text.\n * @return numeric state.\n */\npublic static Integer str2state(String str) {\n    Integer state;\n    if (str == null) {\n        return null;\n    }\n    state = inverseStateMap.get(str);\n    if (state == null) {\n        Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n        if (matcher.matches()) {\n            try {\n                state = Integer.valueOf(matcher.group(1));\n            } catch (NumberFormatException e) {\n                // should not happen as the pattern requires \\d+ for the state.\n                throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n            }\n        }\n    }\n    return state;\n}"
            ],
            [
                "getGetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Returns a Map of getter methods of the given class.\n * <p>\n * The key of the map contains the name of the attribute that can be\n * accessed by the getter, the value the getter itself (an instance of\n * java.lang.reflect.Method). A method is considered a getter if its name\n * starts with \"get\", it is declared public and takes no arguments.\n *\n * @param clazz the class to return the getters for\n * @return a Map of attributes and their accessor methods (getters)\n */\npublic static Map<String, Method> getGetters(final Class<?> clazz) {\n    final Map<String, Method> accessors = new HashMap<>();\n    final Method[] methods = clazz.getMethods();\n    for (Method method : methods) {\n        String name = null;\n        String methodName = method.getName();\n        if (methodName.startsWith(\"get\")) {\n            name = methodName.substring(3);\n        } else if (methodName.startsWith(\"is\")) {\n            name = methodName.substring(2);\n        }\n        if (name == null || name.length() == 0) {\n            continue;\n        }\n        // skip methods with != 0 parameters\n        if (method.getParameterTypes().length != 0) {\n            continue;\n        }\n        accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n    }\n    return accessors;\n}"
            ],
            [
                "getSetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * The main benefit here is that there will not be repeated errors when\n * inspecting classes for setters on every single Event being processed.\n * <br>\n * <br>\n * While this method adds caching which is 100 times faster, the time\n * Benefit is largely insignificant as the execution time was already very\n * fast.\n *\n * @param clazz\n * @return\n */\npublic static Map<String, Method> getSetters(Class<?> clazz) {\n    return setterMap.computeIfAbsent(clazz, (c) -> {\n        return getSettersInternal(c);\n    });\n}"
            ],
            [
                "stripIllegalCharacters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Strips all illegal charaters from the given lower case string. Illegal\n * characters are all characters that are neither characters ('a' to 'z')\n * nor digits ('0' to '9').\n *\n * @param s the original string\n * @return the string with all illegal characters stripped\n */\npublic static String stripIllegalCharacters(String s) {\n    char c;\n    boolean needsStrip = false;\n    StringBuilder sb;\n    if (s == null) {\n        return null;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            // continue\n        } else // NOPMD\n        if (c >= 'a' && c <= 'z') {\n            // continue\n        } else // NOPMD\n        {\n            needsStrip = true;\n            break;\n        }\n    }\n    if (!needsStrip) {\n        return s;\n    }\n    sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sb.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "isClassAvailable",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Checks if the class is available on the current thread's context class\n * loader.\n *\n * @param s fully qualified name of the class to check.\n * @return <code>true</code> if the class is available, <code>false</code>\n * otherwise.\n */\npublic static boolean isClassAvailable(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        classLoader.loadClass(s);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}"
            ],
            [
                "newInstance",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Creates a new instance of the given class. The class is loaded using the\n * current thread's context class loader and instantiated using its default\n * constructor.\n *\n * @param s fully qualified name of the class to instantiate.\n * @return the new instance or <code>null</code> on failure.\n */\npublic static Object newInstance(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        Class<?> clazz = classLoader.loadClass(s);\n        Constructor<?> constructor = clazz.getConstructor();\n        return constructor.newInstance();\n    } catch (ClassNotFoundException e) {\n        return null;\n    } catch (IllegalAccessException e) {\n        return null;\n    } catch (InstantiationException e) {\n        return null;\n    } catch (NoSuchMethodException e) {\n        // no default constructor\n        return null;\n    } catch (InvocationTargetException e) {\n        // constructor threw an exception\n        return null;\n    }\n}"
            ],
            [
                "loadClasses",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * find and all non abstract classes that implement/extend\n * baseClassOrInterface in the package packageName\n *\n * @param packageName\n * @param baseClassOrInterface\n * @return\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface) {\n    Set<Class<T>> result = new HashSet<>();\n    try {\n        Set<String> classNames = getClassNamesFromPackage(packageName);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = classLoader.loadClass(packageName + \".\" + className);\n                if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz)) {\n                    result.add((Class<T>) clazz);\n                }\n            } catch (Throwable e) {\n                logger.error(e, e);\n            }\n        }\n        logger.info(\"Loaded \" + result.size());\n    } catch (Exception e) {\n        logger.error(e, e);\n    }\n    return result;\n}"
            ],
            [
                "doWithLock",
                "org.asteriskjava.lock",
                "Locker",
                "public static LockCloser doWithLock(final Lockable lockable) {\n    try {\n        if (diags) {\n            synchronized (sync) {\n                keepList.put(lockable.getLockableId(), lockable);\n            }\n            return lockWithDiags(lockable);\n        }\n        return simpleLock(lockable);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCaller",
                "org.asteriskjava.lock",
                "Locker",
                "/**\n * determine the caller to Locker\n *\n * @param lockable\n * @return\n */\nstatic String getCaller(Lockable lockable) {\n    StackTraceElement[] trace = new Exception().getStackTrace();\n    String name = lockable.getClass().getCanonicalName();\n    for (StackTraceElement element : trace) {\n        if (element.getFileName() != null && !element.getFileName().contains(Locker.class.getSimpleName())) {\n            name = element.getFileName() + \" \" + element.getMethodName() + \" \" + element.getLineNumber() + \" \" + element.getClassName();\n            break;\n        }\n    }\n    return name;\n}"
            ],
            [
                "addArrivalListener",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static AutoCloseable addArrivalListener(OriginateAction originate, ActivityArrivalListener listener) {\n    final String key = UUID.randomUUID().toString();\n    arrivalListeners.put(key, listener);\n    if (arrivalListeners.size() > 100) {\n        // pick one at random to remove\n        ActivityArrivalListener leaked = arrivalListeners.remove(arrivalListeners.keySet().iterator().next());\n        logger.error(\"Arrival Listeners are leaking\" + leaked.getClass().getCanonicalName());\n    }\n    Map<String, String> vars = new HashMap<>();\n    vars.put(\"_\" + ARRIVAL_KEY, key);\n    originate.setVariables(vars);\n    return new AutoCloseable() {\n\n        @Override\n        public void close() throws Exception {\n            arrivalListeners.remove(key);\n        }\n    };\n}"
            ],
            [
                "getActivePBX",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static PBX getActivePBX() {\n    return AsteriskPBX.SELF;\n}"
            ],
            [
                "getActiveProfile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static AsteriskSettings getActiveProfile() {\n    AsteriskSettings activeProfile = profile.get();\n    if (activeProfile == null) {\n        throw new RuntimeException(\"you must call setAsteriskSettings() before getActiveProfile() is called the first time\");\n    }\n    return activeProfile;\n}"
            ],
            [
                "valueOfDesc",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelState",
                "static ChannelState valueOfDesc(String description) {\n    ChannelState theState = null;\n    for (ChannelState aState : ChannelState.values()) {\n        if (aState._text.compareToIgnoreCase(description) == 0) {\n            theState = aState;\n            break;\n        }\n    }\n    return theState;\n}"
            ],
            [
                "registerChannel",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelEventHelper",
                "public static Channel registerChannel(final String channelName, final String uniqueId, final String callerIdNum, final String callerIdName) throws InvalidChannelName {\n    final AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n    final Channel channel = pbx.internalRegisterChannel(channelName, uniqueId);\n    channel.setCallerId(pbx.buildCallerID(callerIdNum, callerIdName));\n    return channel;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ExtensionStatusEvent",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "Status",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static synchronized CoherentManagerConnection getInstance() {\n    if (self == null)\n        throw new IllegalStateException(\"The CoherentManagerConnection has not been initialised\");\n    self.checkConnection();\n    return self;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction());\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, int timeout) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction(), timeout);\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Sends an Asterisk action and waits for a ManagerRespose.\n *\n * @param action\n * @param timeout timeout in milliseconds\n * @return\n * @throws IllegalArgumentException\n * @throws IllegalStateException\n * @throws IOException\n * @throws TimeoutException\n * @throws OperationNotSupportedException\n */\npublic static ManagerResponse sendAction(final ManagerAction action, final int timeout) throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException {\n    if (logger.isDebugEnabled())\n        CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString());\n    CoherentManagerConnection.getInstance();\n    if ((CoherentManagerConnection.managerConnection != null) && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED)) {\n        final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n        org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection.sendAction(ajAction, timeout);\n        ManagerResponse convertedResponse = null;\n        // UserEventActions always return a null\n        if (response != null)\n            convertedResponse = CoherentEventFactory.build(response);\n        if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0)) {\n            CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage());\n        }\n        return convertedResponse;\n    }\n    throw new IllegalStateException(\"not connected.\");\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "PeerMonitor",
                "public static synchronized PeerMonitor getInstance() {\n    if (PeerMonitor.self == null) {\n        //$NON-NLS-1$\n        throw new IllegalStateException(\"You must call PeerMonitor.init()\");\n    }\n    return PeerMonitor.self;\n}"
            ],
            [
                "getSIPADDHeader",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "static public String getSIPADDHeader(final boolean inherit, final boolean targetIsSIP) {\n    //$NON-NLS-1$\n    String sipHeader = \"SIPADDHEADER\";\n    if (!targetIsSIP || inherit) {\n        //$NON-NLS-1$\n        sipHeader = \"__\" + sipHeader;\n    }\n    return sipHeader;\n}"
            ],
            [
                "valueByName",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByName(final String value) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(value) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    return status;\n}"
            ],
            [
                "valueByChannelState",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByChannelState(final ChannelState state) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(state.name()) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    if (status == NOTSET)\n        //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        logger.warn(\"Unknown channelState: \" + state + \" recieved\", new Throwable(\"Unknown channelState\"));\n    return status;\n}"
            ],
            [
                "getShadowEvent",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static Class<? extends ManagerEvent> getShadowEvent(org.asteriskjava.manager.event.ManagerEvent event) {\n    Class<? extends ManagerEvent> result = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (result == null) {\n        Class<? extends ResponseEvent> response = CoherentEventFactory.mapResponses.get(event.getClass());\n        result = response;\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerEvent build(final org.asteriskjava.manager.event.ManagerEvent event) {\n    ManagerEvent iEvent = null;\n    Class<? extends ManagerEvent> target = null;\n    if (event instanceof org.asteriskjava.manager.event.ResponseEvent)\n        target = CoherentEventFactory.mapResponses.get(event.getClass());\n    else\n        target = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            iEvent = target.getDeclaredConstructor(event.getClass()).newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return iEvent;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ResponseEvent build(org.asteriskjava.manager.event.ResponseEvent event) {\n    ResponseEvent response = null;\n    final Class<? extends ResponseEvent> target = CoherentEventFactory.mapResponses.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            final Constructor<? extends ResponseEvent> declaredConstructor = target.getDeclaredConstructor(event.getClass());\n            response = declaredConstructor.newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return response;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerResponse build(org.asteriskjava.manager.response.ManagerResponse response) {\n    ManagerResponse result;\n    if (response instanceof org.asteriskjava.manager.response.CommandResponse) {\n        result = new CommandResponse(response);\n    } else if (response instanceof org.asteriskjava.manager.response.ManagerError) {\n        result = new ManagerError(response);\n    } else {\n        result = new ManagerResponse(response);\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static org.asteriskjava.manager.action.ManagerAction build(ManagerAction action) {\n    org.asteriskjava.manager.action.ManagerAction result = null;\n    // final Class<? extends org.asteriskjava.manager.action.ManagerAction>\n    // target = CoherentEventFactory.mapActions.get(action.getClass());\n    if (logger.isDebugEnabled())\n        //$NON-NLS-1$\n        logger.debug(\"Action \" + action);\n    // if (target == null)\n    // {\n    // logger.warn(\"The given action \" + action.getClass().getName() + \" is\n    // not supported \"); //$NON-NLS-1$ //$NON-NLS-2$\n    // }\n    // else\n    {\n        result = action.getAJAction();\n    }\n    return result;\n}"
            ],
            [
                "buildFromComponents",
                "org.asteriskjava.pbx.internal.asterisk",
                "CallerIDImpl",
                "/**\n * This is a little helper class which will buid the name component of a\n * clid from the first and lastnames. If both firstname and lastname are\n * null then the name component will be an empty string.\n *\n * @param firstname the person's firstname, may be null.\n * @param lastname  the person's lastname, may be null\n * @param number    the phone number.\n * @return\n */\npublic static CallerID buildFromComponents(final String firstname, final String lastname, final String number) {\n    //$NON-NLS-1$\n    String name = \"\";\n    if (firstname != null) {\n        name += firstname.trim();\n    }\n    if (lastname != null) {\n        if (name.length() > 0) {\n            //$NON-NLS-1$\n            name += \" \";\n        }\n        name += lastname.trim();\n    }\n    return PBXFactory.getActivePBX().buildCallerID(number, name);\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.asterisk",
                "MeetmeRoomControl",
                "public static MeetmeRoomControl getInstance() {\n    if (MeetmeRoomControl.self.get() == null) {\n        throw new IllegalStateException(//$NON-NLS-1$\n        \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\");\n    }\n    return MeetmeRoomControl.self.get();\n}"
            ],
            [
                "getNextChannelId",
                "org.asteriskjava.pbx",
                "ChannelFactory",
                "public static long getNextChannelId() {\n    return nextChannelId.incrementAndGet();\n}"
            ],
            [
                "getTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * Extracts the technology from a fully qualified endpoint string of the form:\n * TECH/NNNN\n *\n * @param fullyQualifiedEndPoint\n * @return\n */\npublic static TechType getTech(final String fullyQualifiedEndPoint) {\n    if (!TechType.hasValidTech(fullyQualifiedEndPoint)) {\n        throw new IllegalArgumentException(//$NON-NLS-1$\n        \"The provided end point '\" + fullyQualifiedEndPoint + //$NON-NLS-1$\n        \"' must contain a tech prefix. e.g. SIP/100\");\n    }\n    //$NON-NLS-1$\n    final String techName = fullyQualifiedEndPoint.substring(0, fullyQualifiedEndPoint.indexOf(\"/\"));\n    return TechType.valueOf(techName.toUpperCase());\n}"
            ],
            [
                "hasValidTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a valid tech descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasValidTech(final String endPointName) {\n    TechType tech = UNKNOWN;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index >= 1) {\n        final String techName = endPointName.substring(0, index);\n        try {\n            tech = TechType.valueOf(techName.toUpperCase());\n        } catch (final IllegalArgumentException e) {\n            //$NON-NLS-1$\n            TechType.logger.error(\"Invalid tech for endpoint:\" + endPointName);\n        }\n    }\n    return tech != UNKNOWN;\n}"
            ],
            [
                "hasTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a tech descriptor even if it isn't\n * a known descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasTech(final String endPointName) {\n    boolean hasTech = false;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index != -1) {\n        hasTech = true;\n    }\n    return hasTech;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx",
                "CallDirection",
                "public static CallDirection valueOf(final int dbValue) {\n    CallDirection result = null;\n    for (final CallDirection direction : CallDirection.values()) {\n        if (direction.dbValue == dbValue) {\n            result = direction;\n            break;\n        }\n    }\n    return result;\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "ManagerEventListenerProxy",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "Access",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "toHexString",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Converts a byte array to a hex string representing it. The hex digits are\n * lower case.\n *\n * @param b the byte array to convert\n * @return the hex representation of b\n */\npublic static String toHexString(byte[] b) {\n    final StringBuilder sb;\n    sb = new StringBuilder(b.length * 2);\n    for (byte aB : b) {\n        sb.append(hexChar[(aB & 0xf0) >>> 4]);\n        sb.append(hexChar[aB & 0x0f]);\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Returns the internal action id contained in the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the internal action id that has been added before.\n * @see #addInternalActionId(String, String)\n */\npublic static String getInternalActionId(String actionId) {\n    final int delimiterIndex;\n    if (actionId == null) {\n        return null;\n    }\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        return actionId.substring(0, delimiterIndex);\n    }\n    return null;\n}"
            ],
            [
                "stripInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Strips the internal action id from the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the original action id, that is the action id as it was before\n * the internal action id was added.\n * @see #addInternalActionId(String, String)\n */\npublic static String stripInternalActionId(String actionId) {\n    int delimiterIndex;\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        if (actionId.length() > delimiterIndex + 1) {\n            return actionId.substring(delimiterIndex + 1);\n        }\n        return null;\n    }\n    return null;\n}"
            ],
            [
                "addInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Adds the internal action id to the given action id.\n *\n * @param actionId         the action id as set by the user.\n * @param internalActionId the internal action id to add.\n * @return the action id prefixed by the internal action id suitable to be\n * sent to Asterisk.\n */\npublic static String addInternalActionId(String actionId, String internalActionId) {\n    if (actionId == null) {\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n    }\n    return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n}"
            ],
            [
                "determineSetterName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineSetterName(String getterName) {\n    if (getterName.startsWith(\"get\")) {\n        return \"set\" + getterName.substring(3);\n    } else if (getterName.startsWith(\"is\")) {\n        return \"set\" + getterName.substring(2);\n    } else {\n        throw new IllegalArgumentException(\"Getter '\" + getterName + \"' doesn't start with either 'get' or 'is'\");\n    }\n}"
            ],
            [
                "determineFieldName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineFieldName(String accessorName) {\n    if (accessorName.startsWith(\"get\")) {\n        return lcFirst(accessorName.substring(3));\n    } else if (accessorName.startsWith(\"is\")) {\n        return lcFirst(accessorName.substring(2));\n    } else if (accessorName.startsWith(\"set\")) {\n        return lcFirst(accessorName.substring(3));\n    } else {\n        throw new IllegalArgumentException(\"Accessor '\" + accessorName + \"' doesn't start with either 'get', 'is' or 'set'\");\n    }\n}"
            ],
            [
                "getSerialVersionUID",
                "org.asteriskjava.manager.event",
                "InvalidAccountId",
                "public static long getSerialVersionUID() {\n    return serialVersionUID;\n}"
            ],
            [
                "getSerialversionuid",
                "org.asteriskjava.manager.event",
                "TransportDetail",
                "public static long getSerialversionuid() {\n    return serialVersionUID;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "ChannelState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.AbstractChannelStateEvent#getChannelState()}.\n *\n * @param status integer representation of the status.\n * @return corresponding ChannelState object or <code>null</code> if none matches.\n */\npublic static ChannelState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (ChannelState tmp : ChannelState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "getByCode",
                "org.asteriskjava.live",
                "HangupCause",
                "/**\n * Returns the HangupCode by its numeric cause code.<p>\n * Using this method in client code is discouraged.\n *\n * @param code the numeric cause code.\n * @return the corresponding HangupCode enum or\n * <code>null</code> if there is no such HangupCause.\n */\npublic static synchronized HangupCause getByCode(int code) {\n    if (causes == null) {\n        causes = new HashMap<>();\n        for (HangupCause cause : values()) {\n            causes.put(cause.code, cause);\n        }\n    }\n    return causes.get(code);\n}"
            ],
            [
                "mapSendActionException",
                "org.asteriskjava.live.internal",
                "ManagerCommunicationExceptionMapper",
                "/**\n * Maps exceptions received from\n * {@link org.asteriskjava.manager.ManagerConnection} when sending a\n * {@link org.asteriskjava.manager.action.ManagerAction} to the corresponding\n * {@link org.asteriskjava.live.ManagerCommunicationException}.\n *\n * @param actionName name of the action that has been tried to send\n * @param exception  exception received\n * @return the corresponding ManagerCommunicationException\n */\nstatic ManagerCommunicationException mapSendActionException(String actionName, Exception exception) {\n    if (exception instanceof IllegalStateException) {\n        return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n    } else if (exception instanceof EventTimeoutException) {\n        return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n    } else {\n        return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n    }\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "QueueMemberState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.QueueMemberEvent#getStatus()}.\n *\n * @param status integer representation of the status.\n * @return corresponding QueueMemberState object or <code>null</code> if none matches.\n */\npublic static QueueMemberState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (QueueMemberState tmp : QueueMemberState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "CallerId",
                "/**\n * Parses a caller id string in the form\n * <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.\n *\n * @param s the caller id string to parse.\n * @return the corresponding CallerId object which is never <code>null</code>.\n * @see AstUtil#parseCallerId(String)\n */\npublic static CallerId valueOf(String s) {\n    final String[] parsedCallerId;\n    parsedCallerId = AstUtil.parseCallerId(s);\n    return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "ASTERISK_1_0",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.0 series.\n */\npublic static final AsteriskVersion ASTERISK_1_0 = new AsteriskVersion(100, \"Asterisk 1.0\");"
            ],
            [
                "ASTERISK_1_2",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.2 series.\n */\npublic static final AsteriskVersion ASTERISK_1_2 = new AsteriskVersion(120, \"Asterisk 1.2\");"
            ],
            [
                "ASTERISK_1_4",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.4 series.\n *\n * @since 0.3\n */\npublic static final AsteriskVersion ASTERISK_1_4 = new AsteriskVersion(140, \"Asterisk 1.4\");"
            ],
            [
                "ASTERISK_1_6",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.6 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_6 = new AsteriskVersion(160, \"Asterisk 1.6\");"
            ],
            [
                "ASTERISK_1_8",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.8 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_8 = new AsteriskVersion(180, \"Asterisk 1.8\");"
            ],
            [
                "ASTERISK_10",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 10 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_10 = new AsteriskVersion(1000, \"Asterisk 10\");"
            ],
            [
                "ASTERISK_11",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 11 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_11 = new AsteriskVersion(1100, \"Asterisk 11\");"
            ],
            [
                "ASTERISK_12",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 12 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_12 = new AsteriskVersion(1200, \"Asterisk 12\");"
            ],
            [
                "ASTERISK_13",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 13 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_13 = new AsteriskVersion(1300, \"Asterisk 13\", VERSION_PATTERN_13, VERSION_PATTERN_CERTIFIED_13);"
            ],
            [
                "ASTERISK_14",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 14 series.\n *\n * @since 1.1.0\n */\npublic static final AsteriskVersion ASTERISK_14 = new AsteriskVersion(1400, \"Asterisk 14\", VERSION_PATTERN_14);"
            ],
            [
                "ASTERISK_15",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 15 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_15 = new AsteriskVersion(1500, \"Asterisk 15\", VERSION_PATTERN_15);"
            ],
            [
                "ASTERISK_16",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 16 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_16 = new AsteriskVersion(1600, \"Asterisk 16\", VERSION_PATTERN_16, VERSION_PATTERN_CERTIFIED_16);"
            ],
            [
                "ASTERISK_17",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 17 series.\n *\n * @since 3.7.0\n */\npublic static final AsteriskVersion ASTERISK_17 = new AsteriskVersion(1700, \"Asterisk 17\", VERSION_PATTERN_17);"
            ],
            [
                "ASTERISK_18",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 18 series.\n *\n * @since 3.13.0\n */\npublic static final AsteriskVersion ASTERISK_18 = new AsteriskVersion(1800, \"Asterisk 18\", VERSION_PATTERN_18, VERSION_PATTERN_CERTIFIED_18);"
            ],
            [
                "ASTERISK_19",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 19 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_19 = new AsteriskVersion(1900, \"Asterisk 19\", VERSION_PATTERN_19);"
            ],
            [
                "ASTERISK_20",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 20 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_20 = new AsteriskVersion(2000, \"Asterisk 20\", VERSION_PATTERN_20);"
            ],
            [
                "DEFAULT_VERSION",
                "org.asteriskjava",
                "AsteriskVersion",
                "// current debian stable version, as of 09/10/2018\npublic static final AsteriskVersion DEFAULT_VERSION = ASTERISK_16;"
            ],
            [
                "AGI_CONNECTION_HANDLERS",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "public static final ConcurrentMap<AgiConnectionHandler, AgiChannel> AGI_CONNECTION_HANDLERS = new ConcurrentHashMap<>(32);"
            ],
            [
                "REQUEST",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI request is made available to scripts.\n */\npublic static final String REQUEST = \"request\";"
            ],
            [
                "CHANNEL",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI channel is made available to scripts.\n */\npublic static final String CHANNEL = \"channel\";"
            ],
            [
                "CRNL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern CRNL_PATTERN = Pattern.compile(\"\\r\\n\");"
            ],
            [
                "NL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern NL_PATTERN = Pattern.compile(\"\\n\");"
            ],
            [
                "MAX_SOCKET_READ_TIMEOUT_MILLIS",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "/**\n * 3 hrs = 3 * 3660 * 1000\n */\npublic static final int MAX_SOCKET_READ_TIMEOUT_MILLIS = 10800000;"
            ],
            [
                "FQCN",
                "org.asteriskjava.util.internal",
                "Slf4JLogger",
                "static String FQCN = Slf4JLogger.class.getName();"
            ],
            [
                "TRACE_DIRECTORY_PROPERTY",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "public static final String TRACE_DIRECTORY_PROPERTY = \"org.asteriskjava.trace.directory\";"
            ],
            [
                "FILE_PREFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_PREFIX = \"aj-trace\";"
            ],
            [
                "FILE_SUFFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_SUFFIX = \".txt\";"
            ],
            [
                "AST_STATE_DOWN",
                "org.asteriskjava.util",
                "AstState",
                "/* from include/asterisk/channel.h */\n/**\n * Channel is down and available.\n */\npublic static final int AST_STATE_DOWN = 0;"
            ],
            [
                "AST_STATE_RSRVD",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is down, but reserved.\n */\npublic static final int AST_STATE_RSRVD = 1;"
            ],
            [
                "AST_STATE_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is off hook.\n */\npublic static final int AST_STATE_OFFHOOK = 2;"
            ],
            [
                "AST_STATE_DIALING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed.\n */\npublic static final int AST_STATE_DIALING = 3;"
            ],
            [
                "AST_STATE_RING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is ringing.\n */\npublic static final int AST_STATE_RING = 4;"
            ],
            [
                "AST_STATE_RINGING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Remote end is ringing.\n */\npublic static final int AST_STATE_RINGING = 5;"
            ],
            [
                "AST_STATE_UP",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is up.\n */\npublic static final int AST_STATE_UP = 6;"
            ],
            [
                "AST_STATE_BUSY",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is busy.\n */\npublic static final int AST_STATE_BUSY = 7;"
            ],
            [
                "AST_STATE_DIALING_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed while offhook.\n */\npublic static final int AST_STATE_DIALING_OFFHOOK = 8;"
            ],
            [
                "AST_STATE_PRERING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel has detected an incoming call and is waiting for ring.\n */\npublic static final int AST_STATE_PRERING = 9;"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.agi.config",
                "ServiceAgiScriptImpl",
                "static transient Log logger = LogFactory.getLog(ServiceAgiScriptImpl.class);"
            ],
            [
                "ARRIVAL_KEY",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static final String ARRIVAL_KEY = \"ActivityAgiArrivalKey\";"
            ],
            [
                "profile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "final static AtomicReference<AsteriskSettings> profile = new AtomicReference<>();"
            ],
            [
                "eventStatistics",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "static Map<String, Integer> eventStatistics = new HashMap<>();"
            ],
            [
                "connector",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Used to instantiate the manager connection including the initial login.\n */\nstatic Connector connector = null;"
            ],
            [
                "managerConnection",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * The actual manager connection. AJ actually maintains two socket\n * connections one for reading events and the other writing events.\n */\nstatic ManagerConnection managerConnection = null;"
            ],
            [
                "ACTIVITY_AGI",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "public static final String ACTIVITY_AGI = \"activityAgi\";"
            ],
            [
                "mapEvents",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Events\nstatic Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();"
            ],
            [
                "mapResponses",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Response\nstatic Hashtable<Class<? extends org.asteriskjava.manager.event.ResponseEvent>, Class<? extends ResponseEvent>> mapResponses = new Hashtable<>();"
            ],
            [
                "ZOMBIE",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String ZOMBIE = \"<ZOMBIE>\";"
            ],
            [
                "MASQ",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String MASQ = \"<MASQ>\";"
            ],
            [
                "UNKNOWN_UNIQUE_ID",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String UNKNOWN_UNIQUE_ID = \"-1\";"
            ],
            [
                "_actions",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\npublic static final String[] _actions = new String[] { \"PARKED/\", \"ASYNCGOTO/\", \"BRIDGE/\" };"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.internal.managerAPI",
                "OriginateBaseClass",
                "/*\n     * this class generates and issues ActionEvents to asterisk through the\n     * manager. This is the asterisk coal face.\n     */\nprotected static final Log logger = LogFactory.getLog(OriginateBaseClass.class);"
            ],
            [
                "INTERNAL_ACTION_ID_DELIMITER",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "public static final char INTERNAL_ACTION_ID_DELIMITER = '#';"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbsoluteTimeoutAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 3073237188819825503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LogoffAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7576797478570238525L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreShowChannelsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIDeleteAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddiesAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIUpdateAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "GetConfigAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreSettingsAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "OriginateAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxCountAction",
                "static final long serialVersionUID = -6900421919824575941L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "RedirectAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1869279324159418150L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAddBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "HangupAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeRemoveBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbstractManagerAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -7667827187378395689L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "PROPERTY_SKYPENAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_SKYPENAME = \"skypename\";"
            ],
            [
                "PROPERTY_TIMEZONE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_TIMEZONE = \"timezone\";"
            ],
            [
                "PROPERTY_AVAILABILITY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_AVAILABILITY = \"availability\";"
            ],
            [
                "PROPERTY_FULLNAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_FULLNAME = \"fullname\";"
            ],
            [
                "PROPERTY_LANGUAGE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_LANGUAGE = \"language\";"
            ],
            [
                "PROPERTY_COUNTRY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_COUNTRY = \"country\";"
            ],
            [
                "PROPERTY_PHONE_HOME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_HOME = \"phone_home\";"
            ],
            [
                "PROPERTY_PHONE_OFFICE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_OFFICE = \"phone_office\";"
            ],
            [
                "PROPERTY_PHONE_MOBILE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_MOBILE = \"phone_mobile\";"
            ],
            [
                "PROPERTY_ABOUT",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_ABOUT = \"about\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgiAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgentsAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -320228893513973367L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "ACTION_NEWCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/* Actions accepted by commands in the sequence */\npublic static final String ACTION_NEWCAT = \"NewCat\";"
            ],
            [
                "ACTION_RENAMECAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_RENAMECAT = \"RenameCat\";"
            ],
            [
                "ACTION_DELCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELCAT = \"DelCat\";"
            ],
            [
                "ACTION_UPDATE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_UPDATE = \"Update\";"
            ],
            [
                "ACTION_DELETE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELETE = \"Delete\";"
            ],
            [
                "ACTION_APPEND",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_APPEND = \"Append\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "EventsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -8042435402644984875L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExtensionStateAction",
                "static final long serialVersionUID = 6537408784388696403L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExecAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "FilterAction",
                "static final long serialVersionUID = 5537508784388696503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseStatusAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxStatusAction",
                "static final long serialVersionUID = -3845028207155711950L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseListAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CommandAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "DongleSendSMSAction",
                "static final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleCheckAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LoginAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -2600694249339115032L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "SUBSYSTEM_CDR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_CDR = \"cdr\";"
            ],
            [
                "SUBSYSTEM_ENUM",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_ENUM = \"enum\";"
            ],
            [
                "SUBSYSTEM_DNSMGR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_DNSMGR = \"dnsmgr\";"
            ],
            [
                "SUBSYSTEM_EXTCONFIG",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_EXTCONFIG = \"extconfig\";"
            ],
            [
                "SUBSYSTEM_MANAGER",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_MANAGER = \"manager\";"
            ],
            [
                "SUBSYSTEM_RTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_RTP = \"rtp\";"
            ],
            [
                "SUBSYSTEM_HTTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_HTTP = \"http\";"
            ],
            [
                "LOAD_TYPE_LOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_LOAD = \"load\";"
            ],
            [
                "LOAD_TYPE_UNLOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_UNLOAD = \"unload\";"
            ],
            [
                "LOAD_TYPE_RELOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_RELOAD = \"reload\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeChatSendAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreStatusAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "StatusAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ChallengeAction",
                "static final long serialVersionUID = 7240516124871953971L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AtxferAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "STATUS_LOGGED_IN",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_IN = \"Logged In\";"
            ],
            [
                "STATUS_LOGGED_OUT",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_OUT = \"Logged Out\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREGISTERED = \"Unregistered\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_LAGGED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_LAGGED = \"Lagged\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -0L;"
            ],
            [
                "CEL_EVENT_CHAN_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_START = \"CHAN_START\";"
            ],
            [
                "CEL_EVENT_CHAN_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_END = \"CHAN_END\";"
            ],
            [
                "CEL_EVENT_ANSWER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ANSWER = \"ANSWER\";"
            ],
            [
                "CEL_EVENT_HANGUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_HANGUP = \"HANGUP\";"
            ],
            [
                "CEL_EVENT_BRIDGE_ENTER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_ENTER = \"BRIDGE_ENTER\";"
            ],
            [
                "CEL_EVENT_BRIDGE_EXIT",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_EXIT = \"BRIDGE_EXIT\";"
            ],
            [
                "CEL_EVENT_APP_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_START = \"APP_START\";"
            ],
            [
                "CEL_EVENT_APP_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_END = \"APP_END\";"
            ],
            [
                "CEL_EVENT_PARK_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_START = \"PARK_START\";"
            ],
            [
                "CEL_EVENT_PARK_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_END = \"PARK_END\";"
            ],
            [
                "CEL_EVENT_BLINDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BLINDTRANSFER = \"BLINDTRANSFER\";"
            ],
            [
                "CEL_EVENT_ATTENDEDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ATTENDEDTRANSFER = \"ATTENDEDTRANSFER\";"
            ],
            [
                "CEL_EVENT_PICKUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PICKUP = \"PICKUP\";"
            ],
            [
                "CEL_EVENT_FORWARD",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_FORWARD = \"FORWARD\";"
            ],
            [
                "CEL_EVENT_LINKEDID_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LINKEDID_END = \"LINKEDID_END\";"
            ],
            [
                "CEL_EVENT_LOCAL_OPTIMIZE",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LOCAL_OPTIMIZE = \"LOCAL_OPTIMIZE\";"
            ],
            [
                "CEL_EVENT_USER_DEFINED",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_USER_DEFINED = \"USER_DEFINED\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "MasqueradeEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DndStateEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "AST_DEVICE_UNKNOWN",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNKNOWN = 0;"
            ],
            [
                "AST_DEVICE_NOT_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "/**\n * Queue member is available.\n */\npublic static final int AST_DEVICE_NOT_INUSE = 1;"
            ],
            [
                "AST_DEVICE_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INUSE = 2;"
            ],
            [
                "AST_DEVICE_BUSY",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_BUSY = 3;"
            ],
            [
                "AST_DEVICE_INVALID",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INVALID = 4;"
            ],
            [
                "AST_DEVICE_UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNAVAILABLE = 5;"
            ],
            [
                "AST_DEVICE_RINGING",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGING = 6;"
            ],
            [
                "AST_DEVICE_RINGINUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGINUSE = 7;"
            ],
            [
                "AST_DEVICE_ONHOLD",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_ONHOLD = 8;"
            ],
            [
                "MEMBERSHIP_STATIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_STATIC = \"static\";"
            ],
            [
                "MEMBERSHIP_DYNAMIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_DYNAMIC = \"dynamic\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "MODULE_MANAGER",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_MANAGER = \"Manager\";"
            ],
            [
                "MODULE_CDR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_CDR = \"CDR\";"
            ],
            [
                "MODULE_DNS_MGR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_DNS_MGR = \"DNSmgr\";"
            ],
            [
                "MODULE_RTP",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_RTP = \"RTP\";"
            ],
            [
                "MODULE_ENUM",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_ENUM = \"ENUM\";"
            ],
            [
                "STATUS_ENABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_ENABLED = \"Enabled\";"
            ],
            [
                "STATUS_DISABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_DISABLED = \"Disabled\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "QueueEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -8554382298783676181L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnlinkEvent",
                "/**\n * Serial version identifier.\n */\nstatic final long serialVersionUID = -2943257621137870024L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LogChannelEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 650153034857116588L;"
            ],
            [
                "AGENT_STATUS_LOGGEDOFF",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent isn't logged in.\n */\npublic static final String AGENT_STATUS_LOGGEDOFF = \"AGENT_LOGGEDOFF\";"
            ],
            [
                "AGENT_STATUS_IDLE",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and waiting for call.\n */\npublic static final String AGENT_STATUS_IDLE = \"AGENT_IDLE\";"
            ],
            [
                "AGENT_STATUS_ONCALL",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and on a call.\n */\npublic static final String AGENT_STATUS_ONCALL = \"AGENT_ONCALL\";"
            ],
            [
                "AGENT_STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Don't know anything about agent. Shouldn't ever get this.\n */\npublic static final String AGENT_STATUS_UNKNOWN = \"AGENT_UNKNOWN\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "BUDDYSTATUS_WAITAUTHORIZATION",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_WAITAUTHORIZATION = \"Waiting for Authorization\";"
            ],
            [
                "BUDDYSTATUS_BLOCKED",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKED = \"Blocked\";"
            ],
            [
                "BUDDYSTATUS_BLOCKEDSKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKEDSKYPEOUT = \"Blocked Skypout\";"
            ],
            [
                "BUDDYSTATUS_SKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEOUT = \"Skypeout\";"
            ],
            [
                "BUDDYSTATUS_OFFLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINE = \"Offline\";"
            ],
            [
                "BUDDYSTATUS_ONLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_ONLINE = \"Online\";"
            ],
            [
                "BUDDYSTATUSS_AWAY",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUSS_AWAY = \"Away\";"
            ],
            [
                "BUDDYSTATUS_NOTAVAILABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_NOTAVAILABLE = \"Not Available\";"
            ],
            [
                "BUDDYSTATUS_DONTDISTURB",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_DONTDISTURB = \"Do Not Disturb\";"
            ],
            [
                "BUDDYSTATUS_SKYPEME",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEME = \"Skype Me\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEVOICEENABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEVOICEENABLE = \"Offline (Voicemail Enabled)\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEFORWARDENABLEL",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEFORWARDENABLEL = \"Offline (Call Forwarding Enabled)\";"
            ],
            [
                "BUDDYSTATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerPushEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "VarSetEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LinkEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -4023240534975776225L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerRunEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewExtenEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -467486409866099387L;"
            ],
            [
                "REASON_LOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been loaded for the first time.\n */\npublic static final String REASON_LOAD = \"LOAD\";"
            ],
            [
                "REASON_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded.\n */\npublic static final String REASON_RELOAD = \"RELOAD\";"
            ],
            [
                "REASON_CLI_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded from the command line.\n */\npublic static final String REASON_CLI_RELOAD = \"CLIRELOAD\";"
            ],
            [
                "REASON_MANAGER_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded due to a manager action.\n */\npublic static final String REASON_MANAGER_RELOAD = \"MANAGERRELOAD\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LeaveEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7450401017732634240L;"
            ],
            [
                "STATUS_CREATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_CREATED = \"Created\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_REMOVED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REMOVED = \"Removed\";"
            ],
            [
                "STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_UPDATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UPDATED = \"Updated\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnholdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ManagerEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 2L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "DISPOSITION_NO_ANSWER",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_NO_ANSWER = \"NO ANSWER\";"
            ],
            [
                "DISPOSITION_FAILED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_FAILED = \"FAILED\";"
            ],
            [
                "DISPOSITION_BUSY",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_BUSY = \"BUSY\";"
            ],
            [
                "DISPOSITION_ANSWERED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_ANSWERED = \"ANSWERED\";"
            ],
            [
                "DISPOSITION_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_UNKNOWN = \"UNKNOWN\";"
            ],
            [
                "AMA_FLAG_OMIT",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_OMIT = \"OMIT\";"
            ],
            [
                "AMA_FLAG_BILLING",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_BILLING = \"BILLING\";"
            ],
            [
                "AMA_FLAG_DOCUMENTATION",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_DOCUMENTATION = \"DOCUMENTATION\";"
            ],
            [
                "AMA_FLAG_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "CoreShowChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "JoinEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "NOT_INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * No device INUSE or BUSY.\n */\npublic static final int NOT_INUSE = 0;"
            ],
            [
                "INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices INUSE.\n */\npublic static final int INUSE = 1;"
            ],
            [
                "BUSY",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices BUSY.\n */\npublic static final int BUSY = 1 << 1;"
            ],
            [
                "UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices UNAVAILABLE/UNREGISTERED.\n */\npublic static final int UNAVAILABLE = 1 << 2;"
            ],
            [
                "RINGING",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices RINGING.\n */\npublic static final int RINGING = 1 << 3;"
            ],
            [
                "TRANSFER_METHOD_SIP",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_METHOD_SIP = \"SIP\";"
            ],
            [
                "TRANSFER_TYPE_ATTENDED",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_ATTENDED = \"Attended\";"
            ],
            [
                "TRANSFER_TYPE_BLIND",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_BLIND = \"Blind\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ShutdownEvent",
                "/**\n * Serial version identifier\n */\nstatic final long serialVersionUID = 2028136082664018423L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has started.\n */\npublic static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has finished.\n */\npublic static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "RenameEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 3400165738000349767L;"
            ],
            [
                "STATE_START",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_START = \"Start\";"
            ],
            [
                "STATE_STOP",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_STOP = \"Stop\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_EXEC",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_EXEC = \"Exec\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "CHANNEL_TYPE_SIP",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_SIP = \"SIP\";"
            ],
            [
                "CHANNEL_TYPE_IAX",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_IAX = \"IAX\";"
            ],
            [
                "MODULE_SELECTION_PRELOAD",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_PRELOAD = \"Preload\";"
            ],
            [
                "MODULE_SELECTION_ALL",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_ALL = \"All\";"
            ],
            [
                "MODULE_LOAD_STATUS_DONE",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_LOAD_STATUS_DONE = \"Done\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "SoftHangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewCallerIdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 6639570533512201213L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LocalBridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "RESPONSE_FAILED",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_FAILED = \"Failed\";"
            ],
            [
                "RESPONSE_SUCCESS",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_SUCCESS = \"Success\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "BRIDGE_STATE_LINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_LINK = \"Link\";"
            ],
            [
                "BRIDGE_STATE_UNLINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_UNLINK = \"Unlink\";"
            ],
            [
                "BRIDGE_TYPE_CORE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A <code>channel.c</code> bridge.\n */\npublic static final String BRIDGE_TYPE_CORE = \"core\";"
            ],
            [
                "BRIDGE_TYPE_RTP_NATIVE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP native bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_NATIVE = \"rtp-native\";"
            ],
            [
                "BRIDGE_TYPE_RTP_DIRECT",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP peer-2-peer bridge (NAT support only).\n */\npublic static final String BRIDGE_TYPE_RTP_DIRECT = \"rtp-direct\";"
            ],
            [
                "BRIDGE_TYPE_RTP_REMOTE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A remote (re-invite) bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_REMOTE = \"rtp-remote\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREGISTERED = \"Registered\";"
            ],
            [
                "STATUS_REQUEST_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REQUEST_SENT = \"Request Sent\";"
            ],
            [
                "STATUS_AUTH_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_AUTH_SENT = \"Auth. Sent\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "STATUS_TIMEOUT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_TIMEOUT = \"Timeout\";"
            ],
            [
                "STATUS_NO_AUTHENTICATION",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_NO_AUTHENTICATION = \"No Authentication\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "PT_SENDER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a sender report.\n */\npublic static final int PT_SENDER_REPORT = 200;"
            ],
            [
                "PT_RECEIVER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a receiver report.\n */\npublic static final int PT_RECEIVER_REPORT = 201;"
            ],
            [
                "PT_H261_FUR",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "public static final int PT_H261_FUR = 192;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "DIRECTION_RECEIVED",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_RECEIVED = \"Received\";"
            ],
            [
                "DIRECTION_SENT",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_SENT = \"Sent\";"
            ],
            [
                "SUBEVENT_BEGIN",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_BEGIN = \"Begin\";"
            ],
            [
                "SUBEVENT_END",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_END = \"End\";"
            ],
            [
                "DIALSTATUS_CHANUNAVAIL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CHANUNAVAIL = \"CHANUNAVAIL\";"
            ],
            [
                "DIALSTATUS_CONGESTION",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CONGESTION = \"CONGESTION\";"
            ],
            [
                "DIALSTATUS_NOANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_NOANSWER = \"NOANSWER\";"
            ],
            [
                "DIALSTATUS_BUSY",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_BUSY = \"BUSY\";"
            ],
            [
                "DIALSTATUS_ANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_ANSWER = \"ANSWER\";"
            ],
            [
                "DIALSTATUS_CANCEL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CANCEL = \"CANCEL\";"
            ],
            [
                "DIALSTATUS_DONTCALL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_DONTCALL = \"DONTCALL\";"
            ],
            [
                "DIALSTATUS_TORTURE",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_TORTURE = \"TORTURE\";"
            ],
            [
                "DIALSTATUS_INVALIDARGS",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_INVALIDARGS = \"INVALIDARGS\";"
            ],
            [
                "VARIABLE_TRACE_ID",
                "org.asteriskjava.live.internal",
                "Constants",
                "static final String VARIABLE_TRACE_ID = \"AJ_TRACE_ID\";"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1024",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "file",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String[] arg0)"
            ],
            [
                "buildCommand",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "@Override\npublic String buildCommand() {\n    if (maxDigits == DEFAULT_MAX_DIGITS) {\n        if (timeout == DEFAULT_TIMEOUT) {\n            return \"GET DATA \" + escapeAndQuote(file);\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n    }\n    return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n}"
            ],
            [
                "toString",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String arg0)"
            ],
            [
                "getTimeout",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the timeout to wait for data.\n *\n * @return the timeout in milliseconds to wait for data.\n */\npublic long getTimeout() {\n    return timeout;\n}"
            ],
            [
                "getAsteriskVersion",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "AsteriskVersion getAsteriskVersion()"
            ],
            [
                "getFile",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the name of the file to stream.\n *\n * @return the name of the file to stream.\n */\npublic String getFile() {\n    return file;\n}"
            ],
            [
                "getMaxDigits",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the maximum number of digits to read.\n *\n * @return the maximum number of digits to read.\n */\npublic int getMaxDigits() {\n    return maxDigits;\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26702,
        "oracle": "timeout >= -1;",
        "oracleType": "PRE",
        "projectName": "asterisk-java",
        "packageName": "org.asteriskjava.fastagi.command",
        "className": "GetDataCommand",
        "javadocTag": "@param timeout the timeout in milliseconds to wait for data.\n               <p>\n               0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).",
        "methodJavadoc": "    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */",
        "methodSourceCode": "public GetDataCommand(String file, long timeout){\n    super();\n    this.file = file;\n    this.timeout = timeout;\n    this.maxDigits = DEFAULT_MAX_DIGITS;\n}",
        "classJavadoc": "/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */",
        "classSourceCode": "/*\n *  Copyright 2004-2006 Stefan Reuter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.asteriskjava.fastagi.command;\n\n/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */\npublic class GetDataCommand extends AbstractAgiCommand {\n    private static final long serialVersionUID = 3978141041352128820L;\n\n    private static final int DEFAULT_TIMEOUT = 0;\n    private static final int DEFAULT_MAX_DIGITS = 1024;\n\n    /**\n     * The name of the file to stream.\n     */\n    private String file;\n\n    /**\n     * The timeout in milliseconds to wait for data.\n     * <p>\n     * 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    private long timeout;\n\n    /**\n     * The maximum number of digits to read.\n     * <p>\n     * Must be in [1..1024].\n     */\n    private int maxDigits;\n\n    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public GetDataCommand(String file) {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public GetDataCommand(String file, long timeout) {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException {\n        super();\n        validateMaxDigits(maxDigits);\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }\n\n    /**\n     * Returns the name of the file to stream.\n     *\n     * @return the name of the file to stream.\n     */\n    public String getFile() {\n        return file;\n    }\n\n    /**\n     * Sets the name of the file to stream.\n     * <p>\n     * This attribute is mandatory.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    /**\n     * Returns the timeout to wait for data.\n     *\n     * @return the timeout in milliseconds to wait for data.\n     */\n    public long getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Sets the timeout to wait for data.\n     *\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * Returns the maximum number of digits to read.\n     *\n     * @return the maximum number of digits to read.\n     */\n    public int getMaxDigits() {\n        return maxDigits;\n    }\n\n    /**\n     * Sets the maximum number of digits to read.\n     *\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public void setMaxDigits(int maxDigits) throws IllegalArgumentException {\n        validateMaxDigits(maxDigits);\n\n        this.maxDigits = maxDigits;\n    }\n\n    @Override\n    public String buildCommand() {\n        if (maxDigits == DEFAULT_MAX_DIGITS) {\n            if (timeout == DEFAULT_TIMEOUT) {\n                return \"GET DATA \" + escapeAndQuote(file);\n            }\n            return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n    }\n\n    private static void validateMaxDigits(int maxDigits) {\n        if (maxDigits < 1 || maxDigits > 1024) {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "AsteriskVersion",
                "org.asteriskjava"
            ],
            [
                "SimpleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidOrUnknownCommandException",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidCommandSyntaxException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServerThread",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiNetworkException",
                "org.asteriskjava.fastagi"
            ],
            [
                "MappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannelFactory",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiChannelImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiReplyImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "DefaultAgiChannelFactory",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiRequestImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "StaticMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "DefaultAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiHangupException",
                "org.asteriskjava.fastagi"
            ],
            [
                "CompositeMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiReply",
                "org.asteriskjava.fastagi.reply"
            ],
            [
                "SpeechRecognitionResult",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiOperations",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiRequest",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "ResourceBundleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "NamedAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "ScriptEngineMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiException",
                "org.asteriskjava.fastagi"
            ],
            [
                "ClassNameMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "QueueCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechLoadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDestroyCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechSetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ControlStreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabasePutCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelTreeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetFullVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ExecCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOffCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDateTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDigitsCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDeactivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetOptionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseGetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechUnloadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AnswerCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "WaitForDigitCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AbstractAgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayAlphaCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DialCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "MeetmeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "HangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechRecognizeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendImageCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayNumberCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "StreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AsyncAgiBreakCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetCallerIdCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "RecordFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "BridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ConfbridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetContextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveCharCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GosubCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetAutoHangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechActivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetDataCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "VerboseCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "TddModeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "NoopCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetPriorityCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechCreateCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ChannelStatusCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOnCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetExtensionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayPhoneticCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiReader",
                "org.asteriskjava.fastagi"
            ],
            [
                "BaseAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannel",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiSpeechException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiWriter",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "HtmlEventTracer",
                "org.asteriskjava.tools"
            ],
            [
                "LogFactory",
                "org.asteriskjava.util"
            ],
            [
                "DaemonThreadFactory",
                "org.asteriskjava.util"
            ],
            [
                "MixMonitorDirection",
                "org.asteriskjava.util"
            ],
            [
                "Base64",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "JavaLoggingLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "FastScannerCrNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScanner",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerFactory",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "Slf4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "LocationAwareWrapper",
                "org.asteriskjava.util.internal"
            ],
            [
                "ServerSocketFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "FileTrace",
                "org.asteriskjava.util.internal"
            ],
            [
                "Trace",
                "org.asteriskjava.util.internal"
            ],
            [
                "NullLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "Log4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "AstUtil",
                "org.asteriskjava.util"
            ],
            [
                "DateUtil",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacade",
                "org.asteriskjava.util"
            ],
            [
                "Log",
                "org.asteriskjava.util"
            ],
            [
                "AstState",
                "org.asteriskjava.util"
            ],
            [
                "ServerSocketFacade",
                "org.asteriskjava.util"
            ],
            [
                "ReflectionUtil",
                "org.asteriskjava.util"
            ],
            [
                "ConfigParseException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigDirective",
                "org.asteriskjava.config"
            ],
            [
                "ConfigElement",
                "org.asteriskjava.config"
            ],
            [
                "IncludeDirective",
                "org.asteriskjava.config"
            ],
            [
                "ExecDirective",
                "org.asteriskjava.config"
            ],
            [
                "Category",
                "org.asteriskjava.config"
            ],
            [
                "MissingDirectiveParameterException",
                "org.asteriskjava.config"
            ],
            [
                "ExtensionsConfigFileReader",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigInclude",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigExtension",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ExtensionsConfigFile",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigVariable",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileReader",
                "org.asteriskjava.config"
            ],
            [
                "MissingEqualSignException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFile",
                "org.asteriskjava.config"
            ],
            [
                "UnknownDirectiveException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.config"
            ],
            [
                "LockableSet",
                "org.asteriskjava.lock"
            ],
            [
                "Lockable",
                "org.asteriskjava.lock"
            ],
            [
                "LockableList",
                "org.asteriskjava.lock"
            ],
            [
                "Locker",
                "org.asteriskjava.lock"
            ],
            [
                "LockableMap",
                "org.asteriskjava.lock"
            ],
            [
                "AgiChannelActivityHangup",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "BlindTransferResultListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityDial",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ConfiguableAGIServer",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScript",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiMappingStragegy",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiConfiguration",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScriptImpl",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "DuplicateScriptException",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiChannelActivityHoldForBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityArrivalListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityTransientHoldSilence",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityQueue",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityHold",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityMeetme",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityPlayMessage",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityVoicemail",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityAgi",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBlindTransfer",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "CallStateAnswered",
                "org.asteriskjava.pbx"
            ],
            [
                "Activity",
                "org.asteriskjava.pbx"
            ],
            [
                "InvalidChannelName",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateData",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "PBX",
                "org.asteriskjava.pbx"
            ],
            [
                "CompletionAdaptor",
                "org.asteriskjava.pbx"
            ],
            [
                "AsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "LogTime",
                "org.asteriskjava.pbx.util"
            ],
            [
                "ManagerError",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "HangupAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "CommandAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelState",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEventHelper",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UserEvent",
                "org.asteriskjava.pbx.asterisk.wrap.userEvents"
            ],
            [
                "NewExtensionListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallImpl",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXException",
                "org.asteriskjava.pbx"
            ],
            [
                "DialPlanExtension",
                "org.asteriskjava.pbx"
            ],
            [
                "FilteredManagerListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerConnection",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallEndedListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerMonitor",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelProxy",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "FilteredManagerListenerWrapper",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "LiveChannelManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "AsteriskPBX",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerState",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "DialLocalToAgiActivity",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "Peer",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EndPointImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventQueue",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentEventFactory",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ActiveCallListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallTracker",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ListenerManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EventLifeMonitor",
                "org.asteriskjava.pbx.internal.eventQueue"
            ],
            [
                "EventListenerBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateResult",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "MonitorCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "DialToAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Connector",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateToExtension",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "HoldAtAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Dial",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectToMeetMe",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "NoMeetmeException",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DurationRoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "CallerIDImpl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoom",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "RoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoomControl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DialActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "HoldActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "DialToAgiActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "JoinActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BridgeActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ParkActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "SplitActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "RedirectToActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BlindTransferActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ActivityHelper",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ChannelHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataParked",
                "org.asteriskjava.pbx"
            ],
            [
                "ListenerPriority",
                "org.asteriskjava.pbx"
            ],
            [
                "Channel",
                "org.asteriskjava.pbx"
            ],
            [
                "Call",
                "org.asteriskjava.pbx"
            ],
            [
                "ChannelFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "Trunk",
                "org.asteriskjava.pbx"
            ],
            [
                "Tech",
                "org.asteriskjava.pbx"
            ],
            [
                "AgiChannelActivityAction",
                "org.asteriskjava.pbx"
            ],
            [
                "DefaultAsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "EndPoint",
                "org.asteriskjava.pbx"
            ],
            [
                "TechType",
                "org.asteriskjava.pbx"
            ],
            [
                "HoldActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BridgeActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "JoinActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "RedirectToActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "ParkActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BlindTransferActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "SplitActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialToAgiActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "NewChannelListener",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityCallback",
                "org.asteriskjava.pbx"
            ],
            [
                "CallHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "DTMFTone",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataNewInbound",
                "org.asteriskjava.pbx"
            ],
            [
                "PhoneNumber",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityStatusEnum",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataTransfer",
                "org.asteriskjava.pbx"
            ],
            [
                "CallDirection",
                "org.asteriskjava.pbx"
            ],
            [
                "CallerID",
                "org.asteriskjava.pbx"
            ],
            [
                "ManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerError",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxCountResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ChallengeResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ModuleCheckResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetVarResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreSettingsResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeBuddyResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetConfigResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ExtensionStateResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeLicenseStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SipShowPeerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "PingResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MixMonitorResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerConnectionState",
                "org.asteriskjava.manager"
            ],
            [
                "DefaultManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "EventAttributesHelper",
                "org.asteriskjava.manager.util"
            ],
            [
                "SendEventGeneratingActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnectionFactory",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerEventListenerProxy",
                "org.asteriskjava.manager"
            ],
            [
                "AbstractManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ExpectedResponse",
                "org.asteriskjava.manager"
            ],
            [
                "ResponseBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "BridgeEnterEventComparator",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgeState",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgesActive",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "MeetmeCompatibility",
                "org.asteriskjava.manager.internal.backwardsCompatibility.meetme"
            ],
            [
                "BackwardsCompatibilityForManagerEvents",
                "org.asteriskjava.manager.internal.backwardsCompatibility"
            ],
            [
                "EventBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReader",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriter",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerUtil",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerConnectionImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "EventBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "Dispatcher",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReaderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "AsyncEventPump",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseEventsImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ProtocolIdentifierWrapper",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriterImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "PingThread",
                "org.asteriskjava.manager"
            ],
            [
                "EventTimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbsoluteTimeoutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkedCallsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MessageSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIDeleteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VoicemailUsersListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddiesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIUpdateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowContactsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreSettingsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "IaxPeerListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentCallbackLoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapTransferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxCountAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeLockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapRestartAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VariableInheritance",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAddBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "HangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetCdrUserFieldAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ShowDialplanAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueSummaryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeRemoveBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAccountPropertyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOnAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgiAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueChangePriorityCallerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UpdateConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "EventsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExtensionStateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueRemoveAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeSetSingleVideoSrcAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePauseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListRoomsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExecAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStopRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePenaltyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "FilterAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueAddAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UnpauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDialOffhookAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueResetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChangeMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowRegistryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SendTextAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DahdiShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractMeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentLogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LocalOptimizeAwayAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnlockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CommandAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "JabberSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStartRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleSendSMSAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MuteAudioAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueLogAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleCheckAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapHangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleLoadAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelTreeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeChatSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueMemberRingInUseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSIPNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChallengeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbPutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AtxferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleShowDevicesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AsteriskMapping",
                "org.asteriskjava.manager"
            ],
            [
                "TimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "AuthenticationFailedException",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "DtmfEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SuccessfulAuthEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewConnectedLineEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeAccountStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPenaltyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractQueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AttendedTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueStatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ProtocolIdentifierReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DeviceStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentRingNoAnswerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeStopTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleDeviceEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleShowDevicesCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnpausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEnterEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxDocumentStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LogChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateSuccessEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FullyBootedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmClearEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerPushEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeChatMessageEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AntennaLevelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointList",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetailComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeMergeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractUnParkedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractConfbridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerRunEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MessageWaitingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtpStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidAccountId",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSBase64Event",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateFailureEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidPasswordEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnholdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JitterBufStatsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PriEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RequestBadFormatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeResponseFailedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DAHDIChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractAgentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CdrEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelUpdateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShowDialplanCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerAbandonEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "T38FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCENDEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JabberEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransportDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReceiveFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactList",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewCMGREvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberAddedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShutdownEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPauseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpReceiverStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UserEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallGiveUpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCallStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEnum",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeDestroyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMixMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PickupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberRemovedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "ModuleLoadReportEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AuthDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeCreateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeMuteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SoftHangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistrationsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AorDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeersEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewAccountCodeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpSenderStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ListDialplanEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtcpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueParamsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewCallerIdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallTimeOutEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentDumpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.manager"
            ],
            [
                "SendActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "Cli",
                "org.asteriskjava"
            ],
            [
                "ExampleCallIn",
                "org.asteriskjava.examples.fastagi"
            ],
            [
                "Hold",
                "org.asteriskjava.examples.activities"
            ],
            [
                "ExamplesAsteriskSettings",
                "org.asteriskjava.examples.activities"
            ],
            [
                "BlindTransfer",
                "org.asteriskjava.examples.activities"
            ],
            [
                "Dial",
                "org.asteriskjava.examples.activities"
            ],
            [
                "MeetMeUserState",
                "org.asteriskjava.live"
            ],
            [
                "MeetMeUser",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueEntry",
                "org.asteriskjava.live"
            ],
            [
                "SecureAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "Extension",
                "org.asteriskjava.live"
            ],
            [
                "ExtensionHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "AbstractAsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "RecordingException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelStateHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "QueueEntryState",
                "org.asteriskjava.live"
            ],
            [
                "LiveObject",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueue",
                "org.asteriskjava.live"
            ],
            [
                "LinkedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchChannelException",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchInterfaceException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelState",
                "org.asteriskjava.live"
            ],
            [
                "HangupCause",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgentImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueEntryImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeUserImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "QueueManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AgentManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueMemberImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "OriginateCallbackData",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskServerImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AbstractLiveObject",
                "org.asteriskjava.live.internal"
            ],
            [
                "ManagerCommunicationExceptionMapper",
                "org.asteriskjava.live.internal"
            ],
            [
                "CallDetailRecordImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoomImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "ChannelManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskChannelImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "Constants",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoom",
                "org.asteriskjava.live"
            ],
            [
                "AgentState",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskChannel",
                "org.asteriskjava.live"
            ],
            [
                "AmaFlags",
                "org.asteriskjava.live"
            ],
            [
                "Voicemailbox",
                "org.asteriskjava.live"
            ],
            [
                "QueueMemberState",
                "org.asteriskjava.live"
            ],
            [
                "DefaultAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueMember",
                "org.asteriskjava.live"
            ],
            [
                "LiveException",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "DialedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "CallDetailRecord",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgent",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueListener",
                "org.asteriskjava.live"
            ],
            [
                "Disposition",
                "org.asteriskjava.live"
            ],
            [
                "OriginateCallback",
                "org.asteriskjava.live"
            ],
            [
                "ManagerCommunicationException",
                "org.asteriskjava.live"
            ],
            [
                "CallerId",
                "org.asteriskjava.live"
            ],
            [
                "InvalidPenaltyException",
                "org.asteriskjava.live"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getDetermineVersionFromString",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Determine the Asterisk version from the string returned by Asterisk. The\n * string should contain \"Asterisk \" followed by a version number.\n *\n * @param coreLine\n * @return the detected version, or null if unknown\n */\npublic static AsteriskVersion getDetermineVersionFromString(String coreLine) {\n    for (AsteriskVersion version : knownVersions) {\n        for (Pattern pattern : version.patterns) {\n            if (pattern.matcher(coreLine).matches()) {\n                return version;\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "getChannel",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "/**\n * Returns the AgiChannel associated with the current thread.\n *\n * @return the AgiChannel associated with the current thread or\n * <code>null</code> if none is associated.\n */\npublic static AgiChannel getChannel() {\n    return AgiConnectionHandler.channel.get();\n}"
            ],
            [
                "getExtension",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * Returns the extension (the part after the last \".\") of the given script.\n *\n * @param scriptName the name of the script to return the extension of.\n * @return the extension of the script or <code>null</code> if there is no\n * extension.\n */\nprotected static String getExtension(String scriptName) {\n    if (scriptName == null) {\n        return null;\n    }\n    int filePosition = scriptName.lastIndexOf(\"/\");\n    String fileName;\n    if (scriptName.lastIndexOf(\"\\\\\") > filePosition) {\n        filePosition = scriptName.lastIndexOf(\"\\\\\");\n    }\n    if (filePosition >= 0) {\n        fileName = scriptName.substring(filePosition + 1);\n    } else {\n        fileName = scriptName;\n    }\n    final int extensionPosition = fileName.lastIndexOf(\".\");\n    if (extensionPosition >= 0) {\n        return fileName.substring(extensionPosition + 1);\n    }\n    return null;\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "protected static Reader getReader(File file) throws FileNotFoundException {\n    final InputStream is = new FileInputStream(file);\n    return new InputStreamReader(is, StandardCharsets.UTF_8);\n}"
            ],
            [
                "getLog",
                "org.asteriskjava.util",
                "LogFactory",
                "/**\n * Returns an instance of Log suitable for logging from the given class.\n *\n * @param clazz the class to create the logger for.\n * @return the created logger.\n */\npublic synchronized static Log getLog(Class<?> clazz) {\n    if (slf4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.slf4j.Logger\");\n            slf4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (slf4jLoggingAvailable) {\n        try {\n            return new Slf4JLogger(clazz);\n        } catch (Throwable e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.apache.logging.log4j.Logger\");\n            log4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            log4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable) {\n        return new Log4JLogger(clazz);\n    }\n    if (javaLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"java.util.logging.Logger\");\n            javaLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            javaLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (javaLoggingAvailable) {\n        return new JavaLoggingLog(clazz);\n    }\n    return new NullLog();\n}"
            ],
            [
                "byteArrayToBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into a Base64 string as per\n * Preferences.put(byte[]).\n */\npublic static String byteArrayToBase64(byte[] a) {\n    return byteArrayToBase64(a, false);\n}"
            ],
            [
                "byteArrayToAltBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into an \"alternate representation\"\n * Base64 string.  This non-standard variant uses an alphabet that does\n * not contain the uppercase alphabetic characters, which makes it\n * suitable for use in situations where case-folding occurs.\n */\npublic static String byteArrayToAltBase64(byte[] a) {\n    return byteArrayToBase64(a, true);\n}"
            ],
            [
                "base64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified Base64 string (as per Preferences.get(byte[]))\n * into a byte array.\n *\n * @throws IllegalArgumentException if <tt>s</tt> is not a valid Base64\n *                                  string.\n */\npublic static byte[] base64ToByteArray(String s) {\n    return base64ToByteArray(s, false);\n}"
            ],
            [
                "altBase64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified \"alternate representation\" Base64 string\n * into a byte array.\n *\n * @throws IllegalArgumentException or ArrayOutOfBoundsException\n *                                  if <tt>s</tt> is not a valid alternate representation\n *                                  Base64 string.\n */\npublic static byte[] altBase64ToByteArray(String s) {\n    return base64ToByteArray(s, true);\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.util.internal.streamreader",
                "FastScannerFactory",
                "public static FastScanner getReader(Readable reader, Pattern pattern) {\n    if (!useLegacyScanner) {\n        if (pattern.pattern().equals(\"\\r\\n\")) {\n            return new FastScannerCrNl(reader);\n        }\n        if (pattern.pattern().equals(\"\\n\")) {\n            return new FastScannerNl(reader);\n        }\n    }\n    // fall back to legacy Scanner\n    logger.warn(\"Using legacy scanner\");\n    Scanner scanner = new Scanner(reader);\n    scanner.useDelimiter(pattern);\n    return getWrappedScanner(scanner);\n}"
            ],
            [
                "isTrue",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if a String represents <code>true</code> or <code>false</code>\n * according to Asterisk's logic. <br>\n * The original implementation is <code>util.c</code> is as follows: <br>\n *\n * <pre>\n *     int ast_true(const char *s)\n *     {\n *         if (!s || ast_strlen_zero(s))\n *             return 0;\n * <br>\n *         if (!strcasecmp(s, &quot;yes&quot;) ||\n *             !strcasecmp(s, &quot;true&quot;) ||\n *             !strcasecmp(s, &quot;y&quot;) ||\n *             !strcasecmp(s, &quot;t&quot;) ||\n *             !strcasecmp(s, &quot;1&quot;) ||\n *             !strcasecmp(s, &quot;on&quot;))\n *             return -1;\n * <br>\n *         return 0;\n *     }\n * </pre>\n *\n * <br>\n * To support the dnd property of\n * {@link org.asteriskjava.manager.event.ZapShowChannelsEvent} this method\n * also consideres the string \"Enabled\" as true.\n *\n * @param o the Object (usually a String) to check for <code>true</code>.\n * @return <code>true</code> if s represents <code>true</code>,\n * <code>false</code> otherwise.\n */\npublic static boolean isTrue(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (o instanceof Boolean) {\n        return (Boolean) o;\n    }\n    return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n}"
            ],
            [
                "isEqual",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * @param a an object\n * @param b an object to be compared with {@code a} for equality\n * @return {@code true} if the arguments are equal to each other and\n * {@code false} otherwise\n */\npublic static boolean isEqual(Object a, Object b) {\n    return a == b || a != null && a.equals(b);\n}"
            ],
            [
                "parseCallerId",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Parses a string for caller id information. <br>\n * The caller id string should be in the form\n * <code>\"Some Name\" &lt;1234&gt;</code>. <br>\n * This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code>\n * but strips any whitespace.\n *\n * @param s the string to parse\n * @return a String[] with name (index 0) and number (index 1)\n */\npublic static String[] parseCallerId(String s) {\n    final String[] result = new String[2];\n    final int lbPosition;\n    final int rbPosition;\n    String name;\n    String number;\n    if (s == null) {\n        return result;\n    }\n    lbPosition = s.lastIndexOf('<');\n    rbPosition = s.lastIndexOf('>');\n    // no opening and closing brace? use value as CallerId name\n    if (lbPosition < 0 || rbPosition < 0) {\n        name = s.trim();\n        if (name.length() == 0) {\n            name = null;\n        }\n        result[0] = name;\n        return result;\n    }\n    number = s.substring(lbPosition + 1, rbPosition).trim();\n    if (number.length() == 0) {\n        number = null;\n    }\n    name = s.substring(0, lbPosition).trim();\n    if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1) {\n        name = name.substring(1, name.length() - 1).trim();\n    }\n    if (name.length() == 0) {\n        name = null;\n    }\n    result[0] = name;\n    result[1] = number;\n    return result;\n}"
            ],
            [
                "isNull",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if the value of s was <code>null</code> in Asterisk. <br>\n * This method is useful as Asterisk likes to replace <code>null</code>\n * values with different string values like \"unknown\", \"&lt;unknown&gt;\" or\n * \"&lt;null&gt;\". <br>\n * To find such replacements search for <code>S_OR</code> in Asterisk's\n * source code. You will find things like\n *\n * <pre>\n * S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\")\n * fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\"));\n * </pre>\n * <p>\n * and more...\n *\n * @param s the string to test, may be <code>null</code>. If s is not a\n *          string the only test that is performed is a check for\n *          <code>null</code>.\n * @return <code>true</code> if the s was <code>null</code> in Asterisk;\n * <code>false</code> otherwise.\n */\npublic static boolean isNull(Object s) {\n    if (s == null) {\n        return true;\n    }\n    if (!(s instanceof String)) {\n        return false;\n    }\n    return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n}"
            ],
            [
                "convertAsteriskBooleanStringToStandardBooleanString",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Converts a non-standard Asterisk boolean String value into something the Boolean class\n * String constructor recognizes.\n * <p>\n * Asterisk can return various strings that represent truth values.\n * This method converts them into standard True/False, or null if null.\n *\n * @param value\n * @return <code>true</code> if the String is \"true\" or \"yes\" (case insensitive).\n * <code>false</code> if the String is \"false\" or \"no\" (case insensitive).\n * <code>null</code> if the String is null.\n * @throws <code>IllegalArgumentException</code> if any other value not listed above.\n */\npublic static String convertAsteriskBooleanStringToStandardBooleanString(String value) {\n    if (value == null)\n        return null;\n    switch(value.toLowerCase()) {\n        case \"true\":\n        case \"yes\":\n            return \"True\";\n        case \"false\":\n        case \"no\":\n            return \"False\";\n        default:\n            throw new IllegalArgumentException(\"value of:\" + value + \" was not recognized as a boolean\");\n    }\n}"
            ],
            [
                "getDate",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Returns the real current date or the date set with overrideCurrentDate().\n *\n * @return the real current date or the date set with overrideCurrentDate().\n */\npublic static Date getDate() {\n    if (currentDate == null) {\n        return new Date();\n    }\n    return currentDate;\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the default time zone.\n *\n * @param s date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s) {\n    return parseDateTime(s, null);\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the given time zone.\n *\n * @param s  date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @param tz the timezone to use or <code>null</code> for the default time\n *           zone.\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s, TimeZone tz) {\n    DateFormat df;\n    if (s == null) {\n        return null;\n    }\n    df = new SimpleDateFormat(DATE_TIME_PATTERN);\n    if (tz != null) {\n        df.setTimeZone(tz);\n    }\n    try {\n        return df.parse(s);\n    } catch (ParseException e) {\n        return null;\n    }\n}"
            ],
            [
                "str2state",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.\n *\n * @param str state as a descriptive text.\n * @return numeric state.\n */\npublic static Integer str2state(String str) {\n    Integer state;\n    if (str == null) {\n        return null;\n    }\n    state = inverseStateMap.get(str);\n    if (state == null) {\n        Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n        if (matcher.matches()) {\n            try {\n                state = Integer.valueOf(matcher.group(1));\n            } catch (NumberFormatException e) {\n                // should not happen as the pattern requires \\d+ for the state.\n                throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n            }\n        }\n    }\n    return state;\n}"
            ],
            [
                "getGetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Returns a Map of getter methods of the given class.\n * <p>\n * The key of the map contains the name of the attribute that can be\n * accessed by the getter, the value the getter itself (an instance of\n * java.lang.reflect.Method). A method is considered a getter if its name\n * starts with \"get\", it is declared public and takes no arguments.\n *\n * @param clazz the class to return the getters for\n * @return a Map of attributes and their accessor methods (getters)\n */\npublic static Map<String, Method> getGetters(final Class<?> clazz) {\n    final Map<String, Method> accessors = new HashMap<>();\n    final Method[] methods = clazz.getMethods();\n    for (Method method : methods) {\n        String name = null;\n        String methodName = method.getName();\n        if (methodName.startsWith(\"get\")) {\n            name = methodName.substring(3);\n        } else if (methodName.startsWith(\"is\")) {\n            name = methodName.substring(2);\n        }\n        if (name == null || name.length() == 0) {\n            continue;\n        }\n        // skip methods with != 0 parameters\n        if (method.getParameterTypes().length != 0) {\n            continue;\n        }\n        accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n    }\n    return accessors;\n}"
            ],
            [
                "getSetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * The main benefit here is that there will not be repeated errors when\n * inspecting classes for setters on every single Event being processed.\n * <br>\n * <br>\n * While this method adds caching which is 100 times faster, the time\n * Benefit is largely insignificant as the execution time was already very\n * fast.\n *\n * @param clazz\n * @return\n */\npublic static Map<String, Method> getSetters(Class<?> clazz) {\n    return setterMap.computeIfAbsent(clazz, (c) -> {\n        return getSettersInternal(c);\n    });\n}"
            ],
            [
                "stripIllegalCharacters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Strips all illegal charaters from the given lower case string. Illegal\n * characters are all characters that are neither characters ('a' to 'z')\n * nor digits ('0' to '9').\n *\n * @param s the original string\n * @return the string with all illegal characters stripped\n */\npublic static String stripIllegalCharacters(String s) {\n    char c;\n    boolean needsStrip = false;\n    StringBuilder sb;\n    if (s == null) {\n        return null;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            // continue\n        } else // NOPMD\n        if (c >= 'a' && c <= 'z') {\n            // continue\n        } else // NOPMD\n        {\n            needsStrip = true;\n            break;\n        }\n    }\n    if (!needsStrip) {\n        return s;\n    }\n    sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sb.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "isClassAvailable",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Checks if the class is available on the current thread's context class\n * loader.\n *\n * @param s fully qualified name of the class to check.\n * @return <code>true</code> if the class is available, <code>false</code>\n * otherwise.\n */\npublic static boolean isClassAvailable(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        classLoader.loadClass(s);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}"
            ],
            [
                "newInstance",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Creates a new instance of the given class. The class is loaded using the\n * current thread's context class loader and instantiated using its default\n * constructor.\n *\n * @param s fully qualified name of the class to instantiate.\n * @return the new instance or <code>null</code> on failure.\n */\npublic static Object newInstance(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        Class<?> clazz = classLoader.loadClass(s);\n        Constructor<?> constructor = clazz.getConstructor();\n        return constructor.newInstance();\n    } catch (ClassNotFoundException e) {\n        return null;\n    } catch (IllegalAccessException e) {\n        return null;\n    } catch (InstantiationException e) {\n        return null;\n    } catch (NoSuchMethodException e) {\n        // no default constructor\n        return null;\n    } catch (InvocationTargetException e) {\n        // constructor threw an exception\n        return null;\n    }\n}"
            ],
            [
                "loadClasses",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * find and all non abstract classes that implement/extend\n * baseClassOrInterface in the package packageName\n *\n * @param packageName\n * @param baseClassOrInterface\n * @return\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface) {\n    Set<Class<T>> result = new HashSet<>();\n    try {\n        Set<String> classNames = getClassNamesFromPackage(packageName);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = classLoader.loadClass(packageName + \".\" + className);\n                if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz)) {\n                    result.add((Class<T>) clazz);\n                }\n            } catch (Throwable e) {\n                logger.error(e, e);\n            }\n        }\n        logger.info(\"Loaded \" + result.size());\n    } catch (Exception e) {\n        logger.error(e, e);\n    }\n    return result;\n}"
            ],
            [
                "doWithLock",
                "org.asteriskjava.lock",
                "Locker",
                "public static LockCloser doWithLock(final Lockable lockable) {\n    try {\n        if (diags) {\n            synchronized (sync) {\n                keepList.put(lockable.getLockableId(), lockable);\n            }\n            return lockWithDiags(lockable);\n        }\n        return simpleLock(lockable);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCaller",
                "org.asteriskjava.lock",
                "Locker",
                "/**\n * determine the caller to Locker\n *\n * @param lockable\n * @return\n */\nstatic String getCaller(Lockable lockable) {\n    StackTraceElement[] trace = new Exception().getStackTrace();\n    String name = lockable.getClass().getCanonicalName();\n    for (StackTraceElement element : trace) {\n        if (element.getFileName() != null && !element.getFileName().contains(Locker.class.getSimpleName())) {\n            name = element.getFileName() + \" \" + element.getMethodName() + \" \" + element.getLineNumber() + \" \" + element.getClassName();\n            break;\n        }\n    }\n    return name;\n}"
            ],
            [
                "addArrivalListener",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static AutoCloseable addArrivalListener(OriginateAction originate, ActivityArrivalListener listener) {\n    final String key = UUID.randomUUID().toString();\n    arrivalListeners.put(key, listener);\n    if (arrivalListeners.size() > 100) {\n        // pick one at random to remove\n        ActivityArrivalListener leaked = arrivalListeners.remove(arrivalListeners.keySet().iterator().next());\n        logger.error(\"Arrival Listeners are leaking\" + leaked.getClass().getCanonicalName());\n    }\n    Map<String, String> vars = new HashMap<>();\n    vars.put(\"_\" + ARRIVAL_KEY, key);\n    originate.setVariables(vars);\n    return new AutoCloseable() {\n\n        @Override\n        public void close() throws Exception {\n            arrivalListeners.remove(key);\n        }\n    };\n}"
            ],
            [
                "getActivePBX",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static PBX getActivePBX() {\n    return AsteriskPBX.SELF;\n}"
            ],
            [
                "getActiveProfile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static AsteriskSettings getActiveProfile() {\n    AsteriskSettings activeProfile = profile.get();\n    if (activeProfile == null) {\n        throw new RuntimeException(\"you must call setAsteriskSettings() before getActiveProfile() is called the first time\");\n    }\n    return activeProfile;\n}"
            ],
            [
                "valueOfDesc",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelState",
                "static ChannelState valueOfDesc(String description) {\n    ChannelState theState = null;\n    for (ChannelState aState : ChannelState.values()) {\n        if (aState._text.compareToIgnoreCase(description) == 0) {\n            theState = aState;\n            break;\n        }\n    }\n    return theState;\n}"
            ],
            [
                "registerChannel",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelEventHelper",
                "public static Channel registerChannel(final String channelName, final String uniqueId, final String callerIdNum, final String callerIdName) throws InvalidChannelName {\n    final AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n    final Channel channel = pbx.internalRegisterChannel(channelName, uniqueId);\n    channel.setCallerId(pbx.buildCallerID(callerIdNum, callerIdName));\n    return channel;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ExtensionStatusEvent",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "Status",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static synchronized CoherentManagerConnection getInstance() {\n    if (self == null)\n        throw new IllegalStateException(\"The CoherentManagerConnection has not been initialised\");\n    self.checkConnection();\n    return self;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction());\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, int timeout) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction(), timeout);\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Sends an Asterisk action and waits for a ManagerRespose.\n *\n * @param action\n * @param timeout timeout in milliseconds\n * @return\n * @throws IllegalArgumentException\n * @throws IllegalStateException\n * @throws IOException\n * @throws TimeoutException\n * @throws OperationNotSupportedException\n */\npublic static ManagerResponse sendAction(final ManagerAction action, final int timeout) throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException {\n    if (logger.isDebugEnabled())\n        CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString());\n    CoherentManagerConnection.getInstance();\n    if ((CoherentManagerConnection.managerConnection != null) && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED)) {\n        final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n        org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection.sendAction(ajAction, timeout);\n        ManagerResponse convertedResponse = null;\n        // UserEventActions always return a null\n        if (response != null)\n            convertedResponse = CoherentEventFactory.build(response);\n        if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0)) {\n            CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage());\n        }\n        return convertedResponse;\n    }\n    throw new IllegalStateException(\"not connected.\");\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "PeerMonitor",
                "public static synchronized PeerMonitor getInstance() {\n    if (PeerMonitor.self == null) {\n        //$NON-NLS-1$\n        throw new IllegalStateException(\"You must call PeerMonitor.init()\");\n    }\n    return PeerMonitor.self;\n}"
            ],
            [
                "getSIPADDHeader",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "static public String getSIPADDHeader(final boolean inherit, final boolean targetIsSIP) {\n    //$NON-NLS-1$\n    String sipHeader = \"SIPADDHEADER\";\n    if (!targetIsSIP || inherit) {\n        //$NON-NLS-1$\n        sipHeader = \"__\" + sipHeader;\n    }\n    return sipHeader;\n}"
            ],
            [
                "valueByName",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByName(final String value) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(value) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    return status;\n}"
            ],
            [
                "valueByChannelState",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByChannelState(final ChannelState state) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(state.name()) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    if (status == NOTSET)\n        //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        logger.warn(\"Unknown channelState: \" + state + \" recieved\", new Throwable(\"Unknown channelState\"));\n    return status;\n}"
            ],
            [
                "getShadowEvent",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static Class<? extends ManagerEvent> getShadowEvent(org.asteriskjava.manager.event.ManagerEvent event) {\n    Class<? extends ManagerEvent> result = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (result == null) {\n        Class<? extends ResponseEvent> response = CoherentEventFactory.mapResponses.get(event.getClass());\n        result = response;\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerEvent build(final org.asteriskjava.manager.event.ManagerEvent event) {\n    ManagerEvent iEvent = null;\n    Class<? extends ManagerEvent> target = null;\n    if (event instanceof org.asteriskjava.manager.event.ResponseEvent)\n        target = CoherentEventFactory.mapResponses.get(event.getClass());\n    else\n        target = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            iEvent = target.getDeclaredConstructor(event.getClass()).newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return iEvent;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ResponseEvent build(org.asteriskjava.manager.event.ResponseEvent event) {\n    ResponseEvent response = null;\n    final Class<? extends ResponseEvent> target = CoherentEventFactory.mapResponses.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            final Constructor<? extends ResponseEvent> declaredConstructor = target.getDeclaredConstructor(event.getClass());\n            response = declaredConstructor.newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return response;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerResponse build(org.asteriskjava.manager.response.ManagerResponse response) {\n    ManagerResponse result;\n    if (response instanceof org.asteriskjava.manager.response.CommandResponse) {\n        result = new CommandResponse(response);\n    } else if (response instanceof org.asteriskjava.manager.response.ManagerError) {\n        result = new ManagerError(response);\n    } else {\n        result = new ManagerResponse(response);\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static org.asteriskjava.manager.action.ManagerAction build(ManagerAction action) {\n    org.asteriskjava.manager.action.ManagerAction result = null;\n    // final Class<? extends org.asteriskjava.manager.action.ManagerAction>\n    // target = CoherentEventFactory.mapActions.get(action.getClass());\n    if (logger.isDebugEnabled())\n        //$NON-NLS-1$\n        logger.debug(\"Action \" + action);\n    // if (target == null)\n    // {\n    // logger.warn(\"The given action \" + action.getClass().getName() + \" is\n    // not supported \"); //$NON-NLS-1$ //$NON-NLS-2$\n    // }\n    // else\n    {\n        result = action.getAJAction();\n    }\n    return result;\n}"
            ],
            [
                "buildFromComponents",
                "org.asteriskjava.pbx.internal.asterisk",
                "CallerIDImpl",
                "/**\n * This is a little helper class which will buid the name component of a\n * clid from the first and lastnames. If both firstname and lastname are\n * null then the name component will be an empty string.\n *\n * @param firstname the person's firstname, may be null.\n * @param lastname  the person's lastname, may be null\n * @param number    the phone number.\n * @return\n */\npublic static CallerID buildFromComponents(final String firstname, final String lastname, final String number) {\n    //$NON-NLS-1$\n    String name = \"\";\n    if (firstname != null) {\n        name += firstname.trim();\n    }\n    if (lastname != null) {\n        if (name.length() > 0) {\n            //$NON-NLS-1$\n            name += \" \";\n        }\n        name += lastname.trim();\n    }\n    return PBXFactory.getActivePBX().buildCallerID(number, name);\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.asterisk",
                "MeetmeRoomControl",
                "public static MeetmeRoomControl getInstance() {\n    if (MeetmeRoomControl.self.get() == null) {\n        throw new IllegalStateException(//$NON-NLS-1$\n        \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\");\n    }\n    return MeetmeRoomControl.self.get();\n}"
            ],
            [
                "getNextChannelId",
                "org.asteriskjava.pbx",
                "ChannelFactory",
                "public static long getNextChannelId() {\n    return nextChannelId.incrementAndGet();\n}"
            ],
            [
                "getTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * Extracts the technology from a fully qualified endpoint string of the form:\n * TECH/NNNN\n *\n * @param fullyQualifiedEndPoint\n * @return\n */\npublic static TechType getTech(final String fullyQualifiedEndPoint) {\n    if (!TechType.hasValidTech(fullyQualifiedEndPoint)) {\n        throw new IllegalArgumentException(//$NON-NLS-1$\n        \"The provided end point '\" + fullyQualifiedEndPoint + //$NON-NLS-1$\n        \"' must contain a tech prefix. e.g. SIP/100\");\n    }\n    //$NON-NLS-1$\n    final String techName = fullyQualifiedEndPoint.substring(0, fullyQualifiedEndPoint.indexOf(\"/\"));\n    return TechType.valueOf(techName.toUpperCase());\n}"
            ],
            [
                "hasValidTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a valid tech descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasValidTech(final String endPointName) {\n    TechType tech = UNKNOWN;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index >= 1) {\n        final String techName = endPointName.substring(0, index);\n        try {\n            tech = TechType.valueOf(techName.toUpperCase());\n        } catch (final IllegalArgumentException e) {\n            //$NON-NLS-1$\n            TechType.logger.error(\"Invalid tech for endpoint:\" + endPointName);\n        }\n    }\n    return tech != UNKNOWN;\n}"
            ],
            [
                "hasTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a tech descriptor even if it isn't\n * a known descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasTech(final String endPointName) {\n    boolean hasTech = false;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index != -1) {\n        hasTech = true;\n    }\n    return hasTech;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx",
                "CallDirection",
                "public static CallDirection valueOf(final int dbValue) {\n    CallDirection result = null;\n    for (final CallDirection direction : CallDirection.values()) {\n        if (direction.dbValue == dbValue) {\n            result = direction;\n            break;\n        }\n    }\n    return result;\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "ManagerEventListenerProxy",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "Access",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "toHexString",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Converts a byte array to a hex string representing it. The hex digits are\n * lower case.\n *\n * @param b the byte array to convert\n * @return the hex representation of b\n */\npublic static String toHexString(byte[] b) {\n    final StringBuilder sb;\n    sb = new StringBuilder(b.length * 2);\n    for (byte aB : b) {\n        sb.append(hexChar[(aB & 0xf0) >>> 4]);\n        sb.append(hexChar[aB & 0x0f]);\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Returns the internal action id contained in the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the internal action id that has been added before.\n * @see #addInternalActionId(String, String)\n */\npublic static String getInternalActionId(String actionId) {\n    final int delimiterIndex;\n    if (actionId == null) {\n        return null;\n    }\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        return actionId.substring(0, delimiterIndex);\n    }\n    return null;\n}"
            ],
            [
                "stripInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Strips the internal action id from the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the original action id, that is the action id as it was before\n * the internal action id was added.\n * @see #addInternalActionId(String, String)\n */\npublic static String stripInternalActionId(String actionId) {\n    int delimiterIndex;\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        if (actionId.length() > delimiterIndex + 1) {\n            return actionId.substring(delimiterIndex + 1);\n        }\n        return null;\n    }\n    return null;\n}"
            ],
            [
                "addInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Adds the internal action id to the given action id.\n *\n * @param actionId         the action id as set by the user.\n * @param internalActionId the internal action id to add.\n * @return the action id prefixed by the internal action id suitable to be\n * sent to Asterisk.\n */\npublic static String addInternalActionId(String actionId, String internalActionId) {\n    if (actionId == null) {\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n    }\n    return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n}"
            ],
            [
                "determineSetterName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineSetterName(String getterName) {\n    if (getterName.startsWith(\"get\")) {\n        return \"set\" + getterName.substring(3);\n    } else if (getterName.startsWith(\"is\")) {\n        return \"set\" + getterName.substring(2);\n    } else {\n        throw new IllegalArgumentException(\"Getter '\" + getterName + \"' doesn't start with either 'get' or 'is'\");\n    }\n}"
            ],
            [
                "determineFieldName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineFieldName(String accessorName) {\n    if (accessorName.startsWith(\"get\")) {\n        return lcFirst(accessorName.substring(3));\n    } else if (accessorName.startsWith(\"is\")) {\n        return lcFirst(accessorName.substring(2));\n    } else if (accessorName.startsWith(\"set\")) {\n        return lcFirst(accessorName.substring(3));\n    } else {\n        throw new IllegalArgumentException(\"Accessor '\" + accessorName + \"' doesn't start with either 'get', 'is' or 'set'\");\n    }\n}"
            ],
            [
                "getSerialVersionUID",
                "org.asteriskjava.manager.event",
                "InvalidAccountId",
                "public static long getSerialVersionUID() {\n    return serialVersionUID;\n}"
            ],
            [
                "getSerialversionuid",
                "org.asteriskjava.manager.event",
                "TransportDetail",
                "public static long getSerialversionuid() {\n    return serialVersionUID;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "ChannelState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.AbstractChannelStateEvent#getChannelState()}.\n *\n * @param status integer representation of the status.\n * @return corresponding ChannelState object or <code>null</code> if none matches.\n */\npublic static ChannelState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (ChannelState tmp : ChannelState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "getByCode",
                "org.asteriskjava.live",
                "HangupCause",
                "/**\n * Returns the HangupCode by its numeric cause code.<p>\n * Using this method in client code is discouraged.\n *\n * @param code the numeric cause code.\n * @return the corresponding HangupCode enum or\n * <code>null</code> if there is no such HangupCause.\n */\npublic static synchronized HangupCause getByCode(int code) {\n    if (causes == null) {\n        causes = new HashMap<>();\n        for (HangupCause cause : values()) {\n            causes.put(cause.code, cause);\n        }\n    }\n    return causes.get(code);\n}"
            ],
            [
                "mapSendActionException",
                "org.asteriskjava.live.internal",
                "ManagerCommunicationExceptionMapper",
                "/**\n * Maps exceptions received from\n * {@link org.asteriskjava.manager.ManagerConnection} when sending a\n * {@link org.asteriskjava.manager.action.ManagerAction} to the corresponding\n * {@link org.asteriskjava.live.ManagerCommunicationException}.\n *\n * @param actionName name of the action that has been tried to send\n * @param exception  exception received\n * @return the corresponding ManagerCommunicationException\n */\nstatic ManagerCommunicationException mapSendActionException(String actionName, Exception exception) {\n    if (exception instanceof IllegalStateException) {\n        return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n    } else if (exception instanceof EventTimeoutException) {\n        return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n    } else {\n        return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n    }\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "QueueMemberState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.QueueMemberEvent#getStatus()}.\n *\n * @param status integer representation of the status.\n * @return corresponding QueueMemberState object or <code>null</code> if none matches.\n */\npublic static QueueMemberState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (QueueMemberState tmp : QueueMemberState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "CallerId",
                "/**\n * Parses a caller id string in the form\n * <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.\n *\n * @param s the caller id string to parse.\n * @return the corresponding CallerId object which is never <code>null</code>.\n * @see AstUtil#parseCallerId(String)\n */\npublic static CallerId valueOf(String s) {\n    final String[] parsedCallerId;\n    parsedCallerId = AstUtil.parseCallerId(s);\n    return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "ASTERISK_1_0",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.0 series.\n */\npublic static final AsteriskVersion ASTERISK_1_0 = new AsteriskVersion(100, \"Asterisk 1.0\");"
            ],
            [
                "ASTERISK_1_2",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.2 series.\n */\npublic static final AsteriskVersion ASTERISK_1_2 = new AsteriskVersion(120, \"Asterisk 1.2\");"
            ],
            [
                "ASTERISK_1_4",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.4 series.\n *\n * @since 0.3\n */\npublic static final AsteriskVersion ASTERISK_1_4 = new AsteriskVersion(140, \"Asterisk 1.4\");"
            ],
            [
                "ASTERISK_1_6",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.6 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_6 = new AsteriskVersion(160, \"Asterisk 1.6\");"
            ],
            [
                "ASTERISK_1_8",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.8 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_8 = new AsteriskVersion(180, \"Asterisk 1.8\");"
            ],
            [
                "ASTERISK_10",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 10 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_10 = new AsteriskVersion(1000, \"Asterisk 10\");"
            ],
            [
                "ASTERISK_11",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 11 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_11 = new AsteriskVersion(1100, \"Asterisk 11\");"
            ],
            [
                "ASTERISK_12",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 12 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_12 = new AsteriskVersion(1200, \"Asterisk 12\");"
            ],
            [
                "ASTERISK_13",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 13 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_13 = new AsteriskVersion(1300, \"Asterisk 13\", VERSION_PATTERN_13, VERSION_PATTERN_CERTIFIED_13);"
            ],
            [
                "ASTERISK_14",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 14 series.\n *\n * @since 1.1.0\n */\npublic static final AsteriskVersion ASTERISK_14 = new AsteriskVersion(1400, \"Asterisk 14\", VERSION_PATTERN_14);"
            ],
            [
                "ASTERISK_15",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 15 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_15 = new AsteriskVersion(1500, \"Asterisk 15\", VERSION_PATTERN_15);"
            ],
            [
                "ASTERISK_16",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 16 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_16 = new AsteriskVersion(1600, \"Asterisk 16\", VERSION_PATTERN_16, VERSION_PATTERN_CERTIFIED_16);"
            ],
            [
                "ASTERISK_17",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 17 series.\n *\n * @since 3.7.0\n */\npublic static final AsteriskVersion ASTERISK_17 = new AsteriskVersion(1700, \"Asterisk 17\", VERSION_PATTERN_17);"
            ],
            [
                "ASTERISK_18",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 18 series.\n *\n * @since 3.13.0\n */\npublic static final AsteriskVersion ASTERISK_18 = new AsteriskVersion(1800, \"Asterisk 18\", VERSION_PATTERN_18, VERSION_PATTERN_CERTIFIED_18);"
            ],
            [
                "ASTERISK_19",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 19 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_19 = new AsteriskVersion(1900, \"Asterisk 19\", VERSION_PATTERN_19);"
            ],
            [
                "ASTERISK_20",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 20 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_20 = new AsteriskVersion(2000, \"Asterisk 20\", VERSION_PATTERN_20);"
            ],
            [
                "DEFAULT_VERSION",
                "org.asteriskjava",
                "AsteriskVersion",
                "// current debian stable version, as of 09/10/2018\npublic static final AsteriskVersion DEFAULT_VERSION = ASTERISK_16;"
            ],
            [
                "AGI_CONNECTION_HANDLERS",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "public static final ConcurrentMap<AgiConnectionHandler, AgiChannel> AGI_CONNECTION_HANDLERS = new ConcurrentHashMap<>(32);"
            ],
            [
                "REQUEST",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI request is made available to scripts.\n */\npublic static final String REQUEST = \"request\";"
            ],
            [
                "CHANNEL",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI channel is made available to scripts.\n */\npublic static final String CHANNEL = \"channel\";"
            ],
            [
                "CRNL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern CRNL_PATTERN = Pattern.compile(\"\\r\\n\");"
            ],
            [
                "NL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern NL_PATTERN = Pattern.compile(\"\\n\");"
            ],
            [
                "MAX_SOCKET_READ_TIMEOUT_MILLIS",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "/**\n * 3 hrs = 3 * 3660 * 1000\n */\npublic static final int MAX_SOCKET_READ_TIMEOUT_MILLIS = 10800000;"
            ],
            [
                "FQCN",
                "org.asteriskjava.util.internal",
                "Slf4JLogger",
                "static String FQCN = Slf4JLogger.class.getName();"
            ],
            [
                "TRACE_DIRECTORY_PROPERTY",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "public static final String TRACE_DIRECTORY_PROPERTY = \"org.asteriskjava.trace.directory\";"
            ],
            [
                "FILE_PREFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_PREFIX = \"aj-trace\";"
            ],
            [
                "FILE_SUFFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_SUFFIX = \".txt\";"
            ],
            [
                "AST_STATE_DOWN",
                "org.asteriskjava.util",
                "AstState",
                "/* from include/asterisk/channel.h */\n/**\n * Channel is down and available.\n */\npublic static final int AST_STATE_DOWN = 0;"
            ],
            [
                "AST_STATE_RSRVD",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is down, but reserved.\n */\npublic static final int AST_STATE_RSRVD = 1;"
            ],
            [
                "AST_STATE_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is off hook.\n */\npublic static final int AST_STATE_OFFHOOK = 2;"
            ],
            [
                "AST_STATE_DIALING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed.\n */\npublic static final int AST_STATE_DIALING = 3;"
            ],
            [
                "AST_STATE_RING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is ringing.\n */\npublic static final int AST_STATE_RING = 4;"
            ],
            [
                "AST_STATE_RINGING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Remote end is ringing.\n */\npublic static final int AST_STATE_RINGING = 5;"
            ],
            [
                "AST_STATE_UP",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is up.\n */\npublic static final int AST_STATE_UP = 6;"
            ],
            [
                "AST_STATE_BUSY",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is busy.\n */\npublic static final int AST_STATE_BUSY = 7;"
            ],
            [
                "AST_STATE_DIALING_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed while offhook.\n */\npublic static final int AST_STATE_DIALING_OFFHOOK = 8;"
            ],
            [
                "AST_STATE_PRERING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel has detected an incoming call and is waiting for ring.\n */\npublic static final int AST_STATE_PRERING = 9;"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.agi.config",
                "ServiceAgiScriptImpl",
                "static transient Log logger = LogFactory.getLog(ServiceAgiScriptImpl.class);"
            ],
            [
                "ARRIVAL_KEY",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static final String ARRIVAL_KEY = \"ActivityAgiArrivalKey\";"
            ],
            [
                "profile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "final static AtomicReference<AsteriskSettings> profile = new AtomicReference<>();"
            ],
            [
                "eventStatistics",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "static Map<String, Integer> eventStatistics = new HashMap<>();"
            ],
            [
                "connector",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Used to instantiate the manager connection including the initial login.\n */\nstatic Connector connector = null;"
            ],
            [
                "managerConnection",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * The actual manager connection. AJ actually maintains two socket\n * connections one for reading events and the other writing events.\n */\nstatic ManagerConnection managerConnection = null;"
            ],
            [
                "ACTIVITY_AGI",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "public static final String ACTIVITY_AGI = \"activityAgi\";"
            ],
            [
                "mapEvents",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Events\nstatic Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();"
            ],
            [
                "mapResponses",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Response\nstatic Hashtable<Class<? extends org.asteriskjava.manager.event.ResponseEvent>, Class<? extends ResponseEvent>> mapResponses = new Hashtable<>();"
            ],
            [
                "ZOMBIE",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String ZOMBIE = \"<ZOMBIE>\";"
            ],
            [
                "MASQ",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String MASQ = \"<MASQ>\";"
            ],
            [
                "UNKNOWN_UNIQUE_ID",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String UNKNOWN_UNIQUE_ID = \"-1\";"
            ],
            [
                "_actions",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\npublic static final String[] _actions = new String[] { \"PARKED/\", \"ASYNCGOTO/\", \"BRIDGE/\" };"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.internal.managerAPI",
                "OriginateBaseClass",
                "/*\n     * this class generates and issues ActionEvents to asterisk through the\n     * manager. This is the asterisk coal face.\n     */\nprotected static final Log logger = LogFactory.getLog(OriginateBaseClass.class);"
            ],
            [
                "INTERNAL_ACTION_ID_DELIMITER",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "public static final char INTERNAL_ACTION_ID_DELIMITER = '#';"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbsoluteTimeoutAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 3073237188819825503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LogoffAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7576797478570238525L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreShowChannelsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIDeleteAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddiesAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIUpdateAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "GetConfigAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreSettingsAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "OriginateAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxCountAction",
                "static final long serialVersionUID = -6900421919824575941L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "RedirectAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1869279324159418150L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAddBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "HangupAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeRemoveBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbstractManagerAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -7667827187378395689L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "PROPERTY_SKYPENAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_SKYPENAME = \"skypename\";"
            ],
            [
                "PROPERTY_TIMEZONE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_TIMEZONE = \"timezone\";"
            ],
            [
                "PROPERTY_AVAILABILITY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_AVAILABILITY = \"availability\";"
            ],
            [
                "PROPERTY_FULLNAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_FULLNAME = \"fullname\";"
            ],
            [
                "PROPERTY_LANGUAGE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_LANGUAGE = \"language\";"
            ],
            [
                "PROPERTY_COUNTRY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_COUNTRY = \"country\";"
            ],
            [
                "PROPERTY_PHONE_HOME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_HOME = \"phone_home\";"
            ],
            [
                "PROPERTY_PHONE_OFFICE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_OFFICE = \"phone_office\";"
            ],
            [
                "PROPERTY_PHONE_MOBILE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_MOBILE = \"phone_mobile\";"
            ],
            [
                "PROPERTY_ABOUT",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_ABOUT = \"about\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgiAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgentsAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -320228893513973367L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "ACTION_NEWCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/* Actions accepted by commands in the sequence */\npublic static final String ACTION_NEWCAT = \"NewCat\";"
            ],
            [
                "ACTION_RENAMECAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_RENAMECAT = \"RenameCat\";"
            ],
            [
                "ACTION_DELCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELCAT = \"DelCat\";"
            ],
            [
                "ACTION_UPDATE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_UPDATE = \"Update\";"
            ],
            [
                "ACTION_DELETE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELETE = \"Delete\";"
            ],
            [
                "ACTION_APPEND",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_APPEND = \"Append\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "EventsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -8042435402644984875L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExtensionStateAction",
                "static final long serialVersionUID = 6537408784388696403L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExecAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "FilterAction",
                "static final long serialVersionUID = 5537508784388696503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseStatusAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxStatusAction",
                "static final long serialVersionUID = -3845028207155711950L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseListAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CommandAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "DongleSendSMSAction",
                "static final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleCheckAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LoginAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -2600694249339115032L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "SUBSYSTEM_CDR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_CDR = \"cdr\";"
            ],
            [
                "SUBSYSTEM_ENUM",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_ENUM = \"enum\";"
            ],
            [
                "SUBSYSTEM_DNSMGR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_DNSMGR = \"dnsmgr\";"
            ],
            [
                "SUBSYSTEM_EXTCONFIG",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_EXTCONFIG = \"extconfig\";"
            ],
            [
                "SUBSYSTEM_MANAGER",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_MANAGER = \"manager\";"
            ],
            [
                "SUBSYSTEM_RTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_RTP = \"rtp\";"
            ],
            [
                "SUBSYSTEM_HTTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_HTTP = \"http\";"
            ],
            [
                "LOAD_TYPE_LOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_LOAD = \"load\";"
            ],
            [
                "LOAD_TYPE_UNLOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_UNLOAD = \"unload\";"
            ],
            [
                "LOAD_TYPE_RELOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_RELOAD = \"reload\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeChatSendAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreStatusAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "StatusAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ChallengeAction",
                "static final long serialVersionUID = 7240516124871953971L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AtxferAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "STATUS_LOGGED_IN",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_IN = \"Logged In\";"
            ],
            [
                "STATUS_LOGGED_OUT",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_OUT = \"Logged Out\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREGISTERED = \"Unregistered\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_LAGGED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_LAGGED = \"Lagged\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -0L;"
            ],
            [
                "CEL_EVENT_CHAN_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_START = \"CHAN_START\";"
            ],
            [
                "CEL_EVENT_CHAN_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_END = \"CHAN_END\";"
            ],
            [
                "CEL_EVENT_ANSWER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ANSWER = \"ANSWER\";"
            ],
            [
                "CEL_EVENT_HANGUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_HANGUP = \"HANGUP\";"
            ],
            [
                "CEL_EVENT_BRIDGE_ENTER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_ENTER = \"BRIDGE_ENTER\";"
            ],
            [
                "CEL_EVENT_BRIDGE_EXIT",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_EXIT = \"BRIDGE_EXIT\";"
            ],
            [
                "CEL_EVENT_APP_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_START = \"APP_START\";"
            ],
            [
                "CEL_EVENT_APP_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_END = \"APP_END\";"
            ],
            [
                "CEL_EVENT_PARK_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_START = \"PARK_START\";"
            ],
            [
                "CEL_EVENT_PARK_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_END = \"PARK_END\";"
            ],
            [
                "CEL_EVENT_BLINDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BLINDTRANSFER = \"BLINDTRANSFER\";"
            ],
            [
                "CEL_EVENT_ATTENDEDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ATTENDEDTRANSFER = \"ATTENDEDTRANSFER\";"
            ],
            [
                "CEL_EVENT_PICKUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PICKUP = \"PICKUP\";"
            ],
            [
                "CEL_EVENT_FORWARD",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_FORWARD = \"FORWARD\";"
            ],
            [
                "CEL_EVENT_LINKEDID_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LINKEDID_END = \"LINKEDID_END\";"
            ],
            [
                "CEL_EVENT_LOCAL_OPTIMIZE",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LOCAL_OPTIMIZE = \"LOCAL_OPTIMIZE\";"
            ],
            [
                "CEL_EVENT_USER_DEFINED",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_USER_DEFINED = \"USER_DEFINED\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "MasqueradeEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DndStateEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "AST_DEVICE_UNKNOWN",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNKNOWN = 0;"
            ],
            [
                "AST_DEVICE_NOT_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "/**\n * Queue member is available.\n */\npublic static final int AST_DEVICE_NOT_INUSE = 1;"
            ],
            [
                "AST_DEVICE_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INUSE = 2;"
            ],
            [
                "AST_DEVICE_BUSY",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_BUSY = 3;"
            ],
            [
                "AST_DEVICE_INVALID",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INVALID = 4;"
            ],
            [
                "AST_DEVICE_UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNAVAILABLE = 5;"
            ],
            [
                "AST_DEVICE_RINGING",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGING = 6;"
            ],
            [
                "AST_DEVICE_RINGINUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGINUSE = 7;"
            ],
            [
                "AST_DEVICE_ONHOLD",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_ONHOLD = 8;"
            ],
            [
                "MEMBERSHIP_STATIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_STATIC = \"static\";"
            ],
            [
                "MEMBERSHIP_DYNAMIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_DYNAMIC = \"dynamic\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "MODULE_MANAGER",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_MANAGER = \"Manager\";"
            ],
            [
                "MODULE_CDR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_CDR = \"CDR\";"
            ],
            [
                "MODULE_DNS_MGR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_DNS_MGR = \"DNSmgr\";"
            ],
            [
                "MODULE_RTP",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_RTP = \"RTP\";"
            ],
            [
                "MODULE_ENUM",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_ENUM = \"ENUM\";"
            ],
            [
                "STATUS_ENABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_ENABLED = \"Enabled\";"
            ],
            [
                "STATUS_DISABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_DISABLED = \"Disabled\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "QueueEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -8554382298783676181L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnlinkEvent",
                "/**\n * Serial version identifier.\n */\nstatic final long serialVersionUID = -2943257621137870024L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LogChannelEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 650153034857116588L;"
            ],
            [
                "AGENT_STATUS_LOGGEDOFF",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent isn't logged in.\n */\npublic static final String AGENT_STATUS_LOGGEDOFF = \"AGENT_LOGGEDOFF\";"
            ],
            [
                "AGENT_STATUS_IDLE",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and waiting for call.\n */\npublic static final String AGENT_STATUS_IDLE = \"AGENT_IDLE\";"
            ],
            [
                "AGENT_STATUS_ONCALL",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and on a call.\n */\npublic static final String AGENT_STATUS_ONCALL = \"AGENT_ONCALL\";"
            ],
            [
                "AGENT_STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Don't know anything about agent. Shouldn't ever get this.\n */\npublic static final String AGENT_STATUS_UNKNOWN = \"AGENT_UNKNOWN\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "BUDDYSTATUS_WAITAUTHORIZATION",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_WAITAUTHORIZATION = \"Waiting for Authorization\";"
            ],
            [
                "BUDDYSTATUS_BLOCKED",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKED = \"Blocked\";"
            ],
            [
                "BUDDYSTATUS_BLOCKEDSKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKEDSKYPEOUT = \"Blocked Skypout\";"
            ],
            [
                "BUDDYSTATUS_SKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEOUT = \"Skypeout\";"
            ],
            [
                "BUDDYSTATUS_OFFLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINE = \"Offline\";"
            ],
            [
                "BUDDYSTATUS_ONLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_ONLINE = \"Online\";"
            ],
            [
                "BUDDYSTATUSS_AWAY",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUSS_AWAY = \"Away\";"
            ],
            [
                "BUDDYSTATUS_NOTAVAILABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_NOTAVAILABLE = \"Not Available\";"
            ],
            [
                "BUDDYSTATUS_DONTDISTURB",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_DONTDISTURB = \"Do Not Disturb\";"
            ],
            [
                "BUDDYSTATUS_SKYPEME",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEME = \"Skype Me\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEVOICEENABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEVOICEENABLE = \"Offline (Voicemail Enabled)\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEFORWARDENABLEL",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEFORWARDENABLEL = \"Offline (Call Forwarding Enabled)\";"
            ],
            [
                "BUDDYSTATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerPushEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "VarSetEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LinkEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -4023240534975776225L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerRunEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewExtenEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -467486409866099387L;"
            ],
            [
                "REASON_LOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been loaded for the first time.\n */\npublic static final String REASON_LOAD = \"LOAD\";"
            ],
            [
                "REASON_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded.\n */\npublic static final String REASON_RELOAD = \"RELOAD\";"
            ],
            [
                "REASON_CLI_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded from the command line.\n */\npublic static final String REASON_CLI_RELOAD = \"CLIRELOAD\";"
            ],
            [
                "REASON_MANAGER_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded due to a manager action.\n */\npublic static final String REASON_MANAGER_RELOAD = \"MANAGERRELOAD\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LeaveEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7450401017732634240L;"
            ],
            [
                "STATUS_CREATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_CREATED = \"Created\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_REMOVED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REMOVED = \"Removed\";"
            ],
            [
                "STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_UPDATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UPDATED = \"Updated\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnholdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ManagerEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 2L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "DISPOSITION_NO_ANSWER",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_NO_ANSWER = \"NO ANSWER\";"
            ],
            [
                "DISPOSITION_FAILED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_FAILED = \"FAILED\";"
            ],
            [
                "DISPOSITION_BUSY",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_BUSY = \"BUSY\";"
            ],
            [
                "DISPOSITION_ANSWERED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_ANSWERED = \"ANSWERED\";"
            ],
            [
                "DISPOSITION_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_UNKNOWN = \"UNKNOWN\";"
            ],
            [
                "AMA_FLAG_OMIT",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_OMIT = \"OMIT\";"
            ],
            [
                "AMA_FLAG_BILLING",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_BILLING = \"BILLING\";"
            ],
            [
                "AMA_FLAG_DOCUMENTATION",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_DOCUMENTATION = \"DOCUMENTATION\";"
            ],
            [
                "AMA_FLAG_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "CoreShowChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "JoinEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "NOT_INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * No device INUSE or BUSY.\n */\npublic static final int NOT_INUSE = 0;"
            ],
            [
                "INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices INUSE.\n */\npublic static final int INUSE = 1;"
            ],
            [
                "BUSY",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices BUSY.\n */\npublic static final int BUSY = 1 << 1;"
            ],
            [
                "UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices UNAVAILABLE/UNREGISTERED.\n */\npublic static final int UNAVAILABLE = 1 << 2;"
            ],
            [
                "RINGING",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices RINGING.\n */\npublic static final int RINGING = 1 << 3;"
            ],
            [
                "TRANSFER_METHOD_SIP",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_METHOD_SIP = \"SIP\";"
            ],
            [
                "TRANSFER_TYPE_ATTENDED",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_ATTENDED = \"Attended\";"
            ],
            [
                "TRANSFER_TYPE_BLIND",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_BLIND = \"Blind\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ShutdownEvent",
                "/**\n * Serial version identifier\n */\nstatic final long serialVersionUID = 2028136082664018423L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has started.\n */\npublic static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has finished.\n */\npublic static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "RenameEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 3400165738000349767L;"
            ],
            [
                "STATE_START",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_START = \"Start\";"
            ],
            [
                "STATE_STOP",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_STOP = \"Stop\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_EXEC",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_EXEC = \"Exec\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "CHANNEL_TYPE_SIP",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_SIP = \"SIP\";"
            ],
            [
                "CHANNEL_TYPE_IAX",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_IAX = \"IAX\";"
            ],
            [
                "MODULE_SELECTION_PRELOAD",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_PRELOAD = \"Preload\";"
            ],
            [
                "MODULE_SELECTION_ALL",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_ALL = \"All\";"
            ],
            [
                "MODULE_LOAD_STATUS_DONE",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_LOAD_STATUS_DONE = \"Done\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "SoftHangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewCallerIdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 6639570533512201213L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LocalBridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "RESPONSE_FAILED",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_FAILED = \"Failed\";"
            ],
            [
                "RESPONSE_SUCCESS",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_SUCCESS = \"Success\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "BRIDGE_STATE_LINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_LINK = \"Link\";"
            ],
            [
                "BRIDGE_STATE_UNLINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_UNLINK = \"Unlink\";"
            ],
            [
                "BRIDGE_TYPE_CORE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A <code>channel.c</code> bridge.\n */\npublic static final String BRIDGE_TYPE_CORE = \"core\";"
            ],
            [
                "BRIDGE_TYPE_RTP_NATIVE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP native bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_NATIVE = \"rtp-native\";"
            ],
            [
                "BRIDGE_TYPE_RTP_DIRECT",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP peer-2-peer bridge (NAT support only).\n */\npublic static final String BRIDGE_TYPE_RTP_DIRECT = \"rtp-direct\";"
            ],
            [
                "BRIDGE_TYPE_RTP_REMOTE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A remote (re-invite) bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_REMOTE = \"rtp-remote\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREGISTERED = \"Registered\";"
            ],
            [
                "STATUS_REQUEST_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REQUEST_SENT = \"Request Sent\";"
            ],
            [
                "STATUS_AUTH_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_AUTH_SENT = \"Auth. Sent\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "STATUS_TIMEOUT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_TIMEOUT = \"Timeout\";"
            ],
            [
                "STATUS_NO_AUTHENTICATION",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_NO_AUTHENTICATION = \"No Authentication\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "PT_SENDER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a sender report.\n */\npublic static final int PT_SENDER_REPORT = 200;"
            ],
            [
                "PT_RECEIVER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a receiver report.\n */\npublic static final int PT_RECEIVER_REPORT = 201;"
            ],
            [
                "PT_H261_FUR",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "public static final int PT_H261_FUR = 192;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "DIRECTION_RECEIVED",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_RECEIVED = \"Received\";"
            ],
            [
                "DIRECTION_SENT",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_SENT = \"Sent\";"
            ],
            [
                "SUBEVENT_BEGIN",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_BEGIN = \"Begin\";"
            ],
            [
                "SUBEVENT_END",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_END = \"End\";"
            ],
            [
                "DIALSTATUS_CHANUNAVAIL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CHANUNAVAIL = \"CHANUNAVAIL\";"
            ],
            [
                "DIALSTATUS_CONGESTION",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CONGESTION = \"CONGESTION\";"
            ],
            [
                "DIALSTATUS_NOANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_NOANSWER = \"NOANSWER\";"
            ],
            [
                "DIALSTATUS_BUSY",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_BUSY = \"BUSY\";"
            ],
            [
                "DIALSTATUS_ANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_ANSWER = \"ANSWER\";"
            ],
            [
                "DIALSTATUS_CANCEL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CANCEL = \"CANCEL\";"
            ],
            [
                "DIALSTATUS_DONTCALL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_DONTCALL = \"DONTCALL\";"
            ],
            [
                "DIALSTATUS_TORTURE",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_TORTURE = \"TORTURE\";"
            ],
            [
                "DIALSTATUS_INVALIDARGS",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_INVALIDARGS = \"INVALIDARGS\";"
            ],
            [
                "VARIABLE_TRACE_ID",
                "org.asteriskjava.live.internal",
                "Constants",
                "static final String VARIABLE_TRACE_ID = \"AJ_TRACE_ID\";"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1024",
                "int"
            ],
            [
                "0",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "\"ludicrous time\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "file",
                "java.lang",
                "String"
            ],
            [
                "timeout",
                "",
                "long"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getTimeout",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the timeout to wait for data.\n *\n * @return the timeout in milliseconds to wait for data.\n */\npublic long getTimeout() {\n    return timeout;\n}"
            ],
            [
                "toString",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "public String toString()"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String[] arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "buildCommand",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "@Override\npublic String buildCommand() {\n    if (maxDigits == DEFAULT_MAX_DIGITS) {\n        if (timeout == DEFAULT_TIMEOUT) {\n            return \"GET DATA \" + escapeAndQuote(file);\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n    }\n    return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String arg0)"
            ],
            [
                "getFile",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the name of the file to stream.\n *\n * @return the name of the file to stream.\n */\npublic String getFile() {\n    return file;\n}"
            ],
            [
                "getMaxDigits",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the maximum number of digits to read.\n *\n * @return the maximum number of digits to read.\n */\npublic int getMaxDigits() {\n    return maxDigits;\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getAsteriskVersion",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "AsteriskVersion getAsteriskVersion()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26703,
        "oracle": "true ? methodResultID.getTimeout() >= -1 : true;",
        "oracleType": "NORMAL_POST",
        "projectName": "asterisk-java",
        "packageName": "org.asteriskjava.fastagi.command",
        "className": "GetDataCommand",
        "javadocTag": "",
        "methodJavadoc": "    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */",
        "methodSourceCode": "public GetDataCommand(String file, long timeout){\n    super();\n    this.file = file;\n    this.timeout = timeout;\n    this.maxDigits = DEFAULT_MAX_DIGITS;\n}",
        "classJavadoc": "/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */",
        "classSourceCode": "/*\n *  Copyright 2004-2006 Stefan Reuter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.asteriskjava.fastagi.command;\n\n/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */\npublic class GetDataCommand extends AbstractAgiCommand {\n    private static final long serialVersionUID = 3978141041352128820L;\n\n    private static final int DEFAULT_TIMEOUT = 0;\n    private static final int DEFAULT_MAX_DIGITS = 1024;\n\n    /**\n     * The name of the file to stream.\n     */\n    private String file;\n\n    /**\n     * The timeout in milliseconds to wait for data.\n     * <p>\n     * 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    private long timeout;\n\n    /**\n     * The maximum number of digits to read.\n     * <p>\n     * Must be in [1..1024].\n     */\n    private int maxDigits;\n\n    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public GetDataCommand(String file) {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public GetDataCommand(String file, long timeout) {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException {\n        super();\n        validateMaxDigits(maxDigits);\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }\n\n    /**\n     * Returns the name of the file to stream.\n     *\n     * @return the name of the file to stream.\n     */\n    public String getFile() {\n        return file;\n    }\n\n    /**\n     * Sets the name of the file to stream.\n     * <p>\n     * This attribute is mandatory.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    /**\n     * Returns the timeout to wait for data.\n     *\n     * @return the timeout in milliseconds to wait for data.\n     */\n    public long getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Sets the timeout to wait for data.\n     *\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * Returns the maximum number of digits to read.\n     *\n     * @return the maximum number of digits to read.\n     */\n    public int getMaxDigits() {\n        return maxDigits;\n    }\n\n    /**\n     * Sets the maximum number of digits to read.\n     *\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public void setMaxDigits(int maxDigits) throws IllegalArgumentException {\n        validateMaxDigits(maxDigits);\n\n        this.maxDigits = maxDigits;\n    }\n\n    @Override\n    public String buildCommand() {\n        if (maxDigits == DEFAULT_MAX_DIGITS) {\n            if (timeout == DEFAULT_TIMEOUT) {\n                return \"GET DATA \" + escapeAndQuote(file);\n            }\n            return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n    }\n\n    private static void validateMaxDigits(int maxDigits) {\n        if (maxDigits < 1 || maxDigits > 1024) {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "AsteriskVersion",
                "org.asteriskjava"
            ],
            [
                "SimpleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidOrUnknownCommandException",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidCommandSyntaxException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServerThread",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiNetworkException",
                "org.asteriskjava.fastagi"
            ],
            [
                "MappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannelFactory",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiChannelImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiReplyImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "DefaultAgiChannelFactory",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiRequestImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "StaticMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "DefaultAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiHangupException",
                "org.asteriskjava.fastagi"
            ],
            [
                "CompositeMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiReply",
                "org.asteriskjava.fastagi.reply"
            ],
            [
                "SpeechRecognitionResult",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiOperations",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiRequest",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "ResourceBundleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "NamedAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "ScriptEngineMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiException",
                "org.asteriskjava.fastagi"
            ],
            [
                "ClassNameMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "QueueCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechLoadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDestroyCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechSetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ControlStreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabasePutCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelTreeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetFullVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ExecCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOffCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDateTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDigitsCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDeactivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetOptionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseGetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechUnloadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AnswerCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "WaitForDigitCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AbstractAgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayAlphaCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DialCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "MeetmeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "HangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechRecognizeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendImageCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayNumberCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "StreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AsyncAgiBreakCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetCallerIdCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "RecordFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "BridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ConfbridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetContextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveCharCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GosubCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetAutoHangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechActivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetDataCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "VerboseCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "TddModeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "NoopCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetPriorityCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechCreateCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ChannelStatusCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOnCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetExtensionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayPhoneticCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiReader",
                "org.asteriskjava.fastagi"
            ],
            [
                "BaseAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannel",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiSpeechException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiWriter",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "HtmlEventTracer",
                "org.asteriskjava.tools"
            ],
            [
                "LogFactory",
                "org.asteriskjava.util"
            ],
            [
                "DaemonThreadFactory",
                "org.asteriskjava.util"
            ],
            [
                "MixMonitorDirection",
                "org.asteriskjava.util"
            ],
            [
                "Base64",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "JavaLoggingLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "FastScannerCrNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScanner",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerFactory",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "Slf4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "LocationAwareWrapper",
                "org.asteriskjava.util.internal"
            ],
            [
                "ServerSocketFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "FileTrace",
                "org.asteriskjava.util.internal"
            ],
            [
                "Trace",
                "org.asteriskjava.util.internal"
            ],
            [
                "NullLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "Log4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "AstUtil",
                "org.asteriskjava.util"
            ],
            [
                "DateUtil",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacade",
                "org.asteriskjava.util"
            ],
            [
                "Log",
                "org.asteriskjava.util"
            ],
            [
                "AstState",
                "org.asteriskjava.util"
            ],
            [
                "ServerSocketFacade",
                "org.asteriskjava.util"
            ],
            [
                "ReflectionUtil",
                "org.asteriskjava.util"
            ],
            [
                "ConfigParseException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigDirective",
                "org.asteriskjava.config"
            ],
            [
                "ConfigElement",
                "org.asteriskjava.config"
            ],
            [
                "IncludeDirective",
                "org.asteriskjava.config"
            ],
            [
                "ExecDirective",
                "org.asteriskjava.config"
            ],
            [
                "Category",
                "org.asteriskjava.config"
            ],
            [
                "MissingDirectiveParameterException",
                "org.asteriskjava.config"
            ],
            [
                "ExtensionsConfigFileReader",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigInclude",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigExtension",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ExtensionsConfigFile",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigVariable",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileReader",
                "org.asteriskjava.config"
            ],
            [
                "MissingEqualSignException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFile",
                "org.asteriskjava.config"
            ],
            [
                "UnknownDirectiveException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.config"
            ],
            [
                "LockableSet",
                "org.asteriskjava.lock"
            ],
            [
                "Lockable",
                "org.asteriskjava.lock"
            ],
            [
                "LockableList",
                "org.asteriskjava.lock"
            ],
            [
                "Locker",
                "org.asteriskjava.lock"
            ],
            [
                "LockableMap",
                "org.asteriskjava.lock"
            ],
            [
                "AgiChannelActivityHangup",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "BlindTransferResultListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityDial",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ConfiguableAGIServer",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScript",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiMappingStragegy",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiConfiguration",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScriptImpl",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "DuplicateScriptException",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiChannelActivityHoldForBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityArrivalListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityTransientHoldSilence",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityQueue",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityHold",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityMeetme",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityPlayMessage",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityVoicemail",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityAgi",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBlindTransfer",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "CallStateAnswered",
                "org.asteriskjava.pbx"
            ],
            [
                "Activity",
                "org.asteriskjava.pbx"
            ],
            [
                "InvalidChannelName",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateData",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "PBX",
                "org.asteriskjava.pbx"
            ],
            [
                "CompletionAdaptor",
                "org.asteriskjava.pbx"
            ],
            [
                "AsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "LogTime",
                "org.asteriskjava.pbx.util"
            ],
            [
                "ManagerError",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "HangupAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "CommandAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelState",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEventHelper",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UserEvent",
                "org.asteriskjava.pbx.asterisk.wrap.userEvents"
            ],
            [
                "NewExtensionListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallImpl",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXException",
                "org.asteriskjava.pbx"
            ],
            [
                "DialPlanExtension",
                "org.asteriskjava.pbx"
            ],
            [
                "FilteredManagerListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerConnection",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallEndedListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerMonitor",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelProxy",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "FilteredManagerListenerWrapper",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "LiveChannelManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "AsteriskPBX",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerState",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "DialLocalToAgiActivity",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "Peer",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EndPointImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventQueue",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentEventFactory",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ActiveCallListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallTracker",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ListenerManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EventLifeMonitor",
                "org.asteriskjava.pbx.internal.eventQueue"
            ],
            [
                "EventListenerBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateResult",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "MonitorCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "DialToAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Connector",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateToExtension",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "HoldAtAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Dial",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectToMeetMe",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "NoMeetmeException",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DurationRoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "CallerIDImpl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoom",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "RoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoomControl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DialActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "HoldActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "DialToAgiActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "JoinActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BridgeActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ParkActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "SplitActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "RedirectToActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BlindTransferActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ActivityHelper",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ChannelHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataParked",
                "org.asteriskjava.pbx"
            ],
            [
                "ListenerPriority",
                "org.asteriskjava.pbx"
            ],
            [
                "Channel",
                "org.asteriskjava.pbx"
            ],
            [
                "Call",
                "org.asteriskjava.pbx"
            ],
            [
                "ChannelFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "Trunk",
                "org.asteriskjava.pbx"
            ],
            [
                "Tech",
                "org.asteriskjava.pbx"
            ],
            [
                "AgiChannelActivityAction",
                "org.asteriskjava.pbx"
            ],
            [
                "DefaultAsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "EndPoint",
                "org.asteriskjava.pbx"
            ],
            [
                "TechType",
                "org.asteriskjava.pbx"
            ],
            [
                "HoldActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BridgeActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "JoinActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "RedirectToActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "ParkActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BlindTransferActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "SplitActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialToAgiActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "NewChannelListener",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityCallback",
                "org.asteriskjava.pbx"
            ],
            [
                "CallHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "DTMFTone",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataNewInbound",
                "org.asteriskjava.pbx"
            ],
            [
                "PhoneNumber",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityStatusEnum",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataTransfer",
                "org.asteriskjava.pbx"
            ],
            [
                "CallDirection",
                "org.asteriskjava.pbx"
            ],
            [
                "CallerID",
                "org.asteriskjava.pbx"
            ],
            [
                "ManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerError",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxCountResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ChallengeResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ModuleCheckResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetVarResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreSettingsResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeBuddyResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetConfigResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ExtensionStateResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeLicenseStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SipShowPeerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "PingResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MixMonitorResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerConnectionState",
                "org.asteriskjava.manager"
            ],
            [
                "DefaultManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "EventAttributesHelper",
                "org.asteriskjava.manager.util"
            ],
            [
                "SendEventGeneratingActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnectionFactory",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerEventListenerProxy",
                "org.asteriskjava.manager"
            ],
            [
                "AbstractManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ExpectedResponse",
                "org.asteriskjava.manager"
            ],
            [
                "ResponseBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "BridgeEnterEventComparator",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgeState",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgesActive",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "MeetmeCompatibility",
                "org.asteriskjava.manager.internal.backwardsCompatibility.meetme"
            ],
            [
                "BackwardsCompatibilityForManagerEvents",
                "org.asteriskjava.manager.internal.backwardsCompatibility"
            ],
            [
                "EventBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReader",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriter",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerUtil",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerConnectionImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "EventBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "Dispatcher",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReaderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "AsyncEventPump",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseEventsImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ProtocolIdentifierWrapper",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriterImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "PingThread",
                "org.asteriskjava.manager"
            ],
            [
                "EventTimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbsoluteTimeoutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkedCallsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MessageSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIDeleteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VoicemailUsersListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddiesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIUpdateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowContactsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreSettingsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "IaxPeerListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentCallbackLoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapTransferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxCountAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeLockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapRestartAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VariableInheritance",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAddBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "HangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetCdrUserFieldAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ShowDialplanAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueSummaryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeRemoveBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAccountPropertyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOnAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgiAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueChangePriorityCallerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UpdateConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "EventsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExtensionStateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueRemoveAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeSetSingleVideoSrcAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePauseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListRoomsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExecAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStopRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePenaltyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "FilterAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueAddAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UnpauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDialOffhookAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueResetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChangeMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowRegistryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SendTextAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DahdiShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractMeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentLogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LocalOptimizeAwayAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnlockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CommandAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "JabberSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStartRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleSendSMSAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MuteAudioAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueLogAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleCheckAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapHangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleLoadAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelTreeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeChatSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueMemberRingInUseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSIPNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChallengeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbPutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AtxferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleShowDevicesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AsteriskMapping",
                "org.asteriskjava.manager"
            ],
            [
                "TimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "AuthenticationFailedException",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "DtmfEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SuccessfulAuthEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewConnectedLineEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeAccountStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPenaltyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractQueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AttendedTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueStatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ProtocolIdentifierReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DeviceStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentRingNoAnswerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeStopTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleDeviceEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleShowDevicesCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnpausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEnterEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxDocumentStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LogChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateSuccessEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FullyBootedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmClearEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerPushEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeChatMessageEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AntennaLevelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointList",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetailComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeMergeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractUnParkedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractConfbridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerRunEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MessageWaitingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtpStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidAccountId",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSBase64Event",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateFailureEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidPasswordEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnholdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JitterBufStatsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PriEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RequestBadFormatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeResponseFailedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DAHDIChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractAgentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CdrEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelUpdateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShowDialplanCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerAbandonEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "T38FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCENDEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JabberEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransportDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReceiveFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactList",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewCMGREvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberAddedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShutdownEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPauseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpReceiverStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UserEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallGiveUpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCallStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEnum",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeDestroyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMixMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PickupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberRemovedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "ModuleLoadReportEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AuthDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeCreateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeMuteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SoftHangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistrationsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AorDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeersEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewAccountCodeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpSenderStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ListDialplanEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtcpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueParamsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewCallerIdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallTimeOutEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentDumpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.manager"
            ],
            [
                "SendActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "Cli",
                "org.asteriskjava"
            ],
            [
                "ExampleCallIn",
                "org.asteriskjava.examples.fastagi"
            ],
            [
                "Hold",
                "org.asteriskjava.examples.activities"
            ],
            [
                "ExamplesAsteriskSettings",
                "org.asteriskjava.examples.activities"
            ],
            [
                "BlindTransfer",
                "org.asteriskjava.examples.activities"
            ],
            [
                "Dial",
                "org.asteriskjava.examples.activities"
            ],
            [
                "MeetMeUserState",
                "org.asteriskjava.live"
            ],
            [
                "MeetMeUser",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueEntry",
                "org.asteriskjava.live"
            ],
            [
                "SecureAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "Extension",
                "org.asteriskjava.live"
            ],
            [
                "ExtensionHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "AbstractAsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "RecordingException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelStateHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "QueueEntryState",
                "org.asteriskjava.live"
            ],
            [
                "LiveObject",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueue",
                "org.asteriskjava.live"
            ],
            [
                "LinkedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchChannelException",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchInterfaceException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelState",
                "org.asteriskjava.live"
            ],
            [
                "HangupCause",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgentImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueEntryImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeUserImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "QueueManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AgentManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueMemberImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "OriginateCallbackData",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskServerImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AbstractLiveObject",
                "org.asteriskjava.live.internal"
            ],
            [
                "ManagerCommunicationExceptionMapper",
                "org.asteriskjava.live.internal"
            ],
            [
                "CallDetailRecordImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoomImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "ChannelManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskChannelImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "Constants",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoom",
                "org.asteriskjava.live"
            ],
            [
                "AgentState",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskChannel",
                "org.asteriskjava.live"
            ],
            [
                "AmaFlags",
                "org.asteriskjava.live"
            ],
            [
                "Voicemailbox",
                "org.asteriskjava.live"
            ],
            [
                "QueueMemberState",
                "org.asteriskjava.live"
            ],
            [
                "DefaultAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueMember",
                "org.asteriskjava.live"
            ],
            [
                "LiveException",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "DialedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "CallDetailRecord",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgent",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueListener",
                "org.asteriskjava.live"
            ],
            [
                "Disposition",
                "org.asteriskjava.live"
            ],
            [
                "OriginateCallback",
                "org.asteriskjava.live"
            ],
            [
                "ManagerCommunicationException",
                "org.asteriskjava.live"
            ],
            [
                "CallerId",
                "org.asteriskjava.live"
            ],
            [
                "InvalidPenaltyException",
                "org.asteriskjava.live"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getDetermineVersionFromString",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Determine the Asterisk version from the string returned by Asterisk. The\n * string should contain \"Asterisk \" followed by a version number.\n *\n * @param coreLine\n * @return the detected version, or null if unknown\n */\npublic static AsteriskVersion getDetermineVersionFromString(String coreLine) {\n    for (AsteriskVersion version : knownVersions) {\n        for (Pattern pattern : version.patterns) {\n            if (pattern.matcher(coreLine).matches()) {\n                return version;\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "getChannel",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "/**\n * Returns the AgiChannel associated with the current thread.\n *\n * @return the AgiChannel associated with the current thread or\n * <code>null</code> if none is associated.\n */\npublic static AgiChannel getChannel() {\n    return AgiConnectionHandler.channel.get();\n}"
            ],
            [
                "getExtension",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * Returns the extension (the part after the last \".\") of the given script.\n *\n * @param scriptName the name of the script to return the extension of.\n * @return the extension of the script or <code>null</code> if there is no\n * extension.\n */\nprotected static String getExtension(String scriptName) {\n    if (scriptName == null) {\n        return null;\n    }\n    int filePosition = scriptName.lastIndexOf(\"/\");\n    String fileName;\n    if (scriptName.lastIndexOf(\"\\\\\") > filePosition) {\n        filePosition = scriptName.lastIndexOf(\"\\\\\");\n    }\n    if (filePosition >= 0) {\n        fileName = scriptName.substring(filePosition + 1);\n    } else {\n        fileName = scriptName;\n    }\n    final int extensionPosition = fileName.lastIndexOf(\".\");\n    if (extensionPosition >= 0) {\n        return fileName.substring(extensionPosition + 1);\n    }\n    return null;\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "protected static Reader getReader(File file) throws FileNotFoundException {\n    final InputStream is = new FileInputStream(file);\n    return new InputStreamReader(is, StandardCharsets.UTF_8);\n}"
            ],
            [
                "getLog",
                "org.asteriskjava.util",
                "LogFactory",
                "/**\n * Returns an instance of Log suitable for logging from the given class.\n *\n * @param clazz the class to create the logger for.\n * @return the created logger.\n */\npublic synchronized static Log getLog(Class<?> clazz) {\n    if (slf4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.slf4j.Logger\");\n            slf4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (slf4jLoggingAvailable) {\n        try {\n            return new Slf4JLogger(clazz);\n        } catch (Throwable e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.apache.logging.log4j.Logger\");\n            log4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            log4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable) {\n        return new Log4JLogger(clazz);\n    }\n    if (javaLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"java.util.logging.Logger\");\n            javaLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            javaLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (javaLoggingAvailable) {\n        return new JavaLoggingLog(clazz);\n    }\n    return new NullLog();\n}"
            ],
            [
                "byteArrayToBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into a Base64 string as per\n * Preferences.put(byte[]).\n */\npublic static String byteArrayToBase64(byte[] a) {\n    return byteArrayToBase64(a, false);\n}"
            ],
            [
                "byteArrayToAltBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into an \"alternate representation\"\n * Base64 string.  This non-standard variant uses an alphabet that does\n * not contain the uppercase alphabetic characters, which makes it\n * suitable for use in situations where case-folding occurs.\n */\npublic static String byteArrayToAltBase64(byte[] a) {\n    return byteArrayToBase64(a, true);\n}"
            ],
            [
                "base64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified Base64 string (as per Preferences.get(byte[]))\n * into a byte array.\n *\n * @throws IllegalArgumentException if <tt>s</tt> is not a valid Base64\n *                                  string.\n */\npublic static byte[] base64ToByteArray(String s) {\n    return base64ToByteArray(s, false);\n}"
            ],
            [
                "altBase64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified \"alternate representation\" Base64 string\n * into a byte array.\n *\n * @throws IllegalArgumentException or ArrayOutOfBoundsException\n *                                  if <tt>s</tt> is not a valid alternate representation\n *                                  Base64 string.\n */\npublic static byte[] altBase64ToByteArray(String s) {\n    return base64ToByteArray(s, true);\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.util.internal.streamreader",
                "FastScannerFactory",
                "public static FastScanner getReader(Readable reader, Pattern pattern) {\n    if (!useLegacyScanner) {\n        if (pattern.pattern().equals(\"\\r\\n\")) {\n            return new FastScannerCrNl(reader);\n        }\n        if (pattern.pattern().equals(\"\\n\")) {\n            return new FastScannerNl(reader);\n        }\n    }\n    // fall back to legacy Scanner\n    logger.warn(\"Using legacy scanner\");\n    Scanner scanner = new Scanner(reader);\n    scanner.useDelimiter(pattern);\n    return getWrappedScanner(scanner);\n}"
            ],
            [
                "isTrue",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if a String represents <code>true</code> or <code>false</code>\n * according to Asterisk's logic. <br>\n * The original implementation is <code>util.c</code> is as follows: <br>\n *\n * <pre>\n *     int ast_true(const char *s)\n *     {\n *         if (!s || ast_strlen_zero(s))\n *             return 0;\n * <br>\n *         if (!strcasecmp(s, &quot;yes&quot;) ||\n *             !strcasecmp(s, &quot;true&quot;) ||\n *             !strcasecmp(s, &quot;y&quot;) ||\n *             !strcasecmp(s, &quot;t&quot;) ||\n *             !strcasecmp(s, &quot;1&quot;) ||\n *             !strcasecmp(s, &quot;on&quot;))\n *             return -1;\n * <br>\n *         return 0;\n *     }\n * </pre>\n *\n * <br>\n * To support the dnd property of\n * {@link org.asteriskjava.manager.event.ZapShowChannelsEvent} this method\n * also consideres the string \"Enabled\" as true.\n *\n * @param o the Object (usually a String) to check for <code>true</code>.\n * @return <code>true</code> if s represents <code>true</code>,\n * <code>false</code> otherwise.\n */\npublic static boolean isTrue(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (o instanceof Boolean) {\n        return (Boolean) o;\n    }\n    return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n}"
            ],
            [
                "isEqual",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * @param a an object\n * @param b an object to be compared with {@code a} for equality\n * @return {@code true} if the arguments are equal to each other and\n * {@code false} otherwise\n */\npublic static boolean isEqual(Object a, Object b) {\n    return a == b || a != null && a.equals(b);\n}"
            ],
            [
                "parseCallerId",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Parses a string for caller id information. <br>\n * The caller id string should be in the form\n * <code>\"Some Name\" &lt;1234&gt;</code>. <br>\n * This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code>\n * but strips any whitespace.\n *\n * @param s the string to parse\n * @return a String[] with name (index 0) and number (index 1)\n */\npublic static String[] parseCallerId(String s) {\n    final String[] result = new String[2];\n    final int lbPosition;\n    final int rbPosition;\n    String name;\n    String number;\n    if (s == null) {\n        return result;\n    }\n    lbPosition = s.lastIndexOf('<');\n    rbPosition = s.lastIndexOf('>');\n    // no opening and closing brace? use value as CallerId name\n    if (lbPosition < 0 || rbPosition < 0) {\n        name = s.trim();\n        if (name.length() == 0) {\n            name = null;\n        }\n        result[0] = name;\n        return result;\n    }\n    number = s.substring(lbPosition + 1, rbPosition).trim();\n    if (number.length() == 0) {\n        number = null;\n    }\n    name = s.substring(0, lbPosition).trim();\n    if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1) {\n        name = name.substring(1, name.length() - 1).trim();\n    }\n    if (name.length() == 0) {\n        name = null;\n    }\n    result[0] = name;\n    result[1] = number;\n    return result;\n}"
            ],
            [
                "isNull",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if the value of s was <code>null</code> in Asterisk. <br>\n * This method is useful as Asterisk likes to replace <code>null</code>\n * values with different string values like \"unknown\", \"&lt;unknown&gt;\" or\n * \"&lt;null&gt;\". <br>\n * To find such replacements search for <code>S_OR</code> in Asterisk's\n * source code. You will find things like\n *\n * <pre>\n * S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\")\n * fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\"));\n * </pre>\n * <p>\n * and more...\n *\n * @param s the string to test, may be <code>null</code>. If s is not a\n *          string the only test that is performed is a check for\n *          <code>null</code>.\n * @return <code>true</code> if the s was <code>null</code> in Asterisk;\n * <code>false</code> otherwise.\n */\npublic static boolean isNull(Object s) {\n    if (s == null) {\n        return true;\n    }\n    if (!(s instanceof String)) {\n        return false;\n    }\n    return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n}"
            ],
            [
                "convertAsteriskBooleanStringToStandardBooleanString",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Converts a non-standard Asterisk boolean String value into something the Boolean class\n * String constructor recognizes.\n * <p>\n * Asterisk can return various strings that represent truth values.\n * This method converts them into standard True/False, or null if null.\n *\n * @param value\n * @return <code>true</code> if the String is \"true\" or \"yes\" (case insensitive).\n * <code>false</code> if the String is \"false\" or \"no\" (case insensitive).\n * <code>null</code> if the String is null.\n * @throws <code>IllegalArgumentException</code> if any other value not listed above.\n */\npublic static String convertAsteriskBooleanStringToStandardBooleanString(String value) {\n    if (value == null)\n        return null;\n    switch(value.toLowerCase()) {\n        case \"true\":\n        case \"yes\":\n            return \"True\";\n        case \"false\":\n        case \"no\":\n            return \"False\";\n        default:\n            throw new IllegalArgumentException(\"value of:\" + value + \" was not recognized as a boolean\");\n    }\n}"
            ],
            [
                "getDate",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Returns the real current date or the date set with overrideCurrentDate().\n *\n * @return the real current date or the date set with overrideCurrentDate().\n */\npublic static Date getDate() {\n    if (currentDate == null) {\n        return new Date();\n    }\n    return currentDate;\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the default time zone.\n *\n * @param s date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s) {\n    return parseDateTime(s, null);\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the given time zone.\n *\n * @param s  date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @param tz the timezone to use or <code>null</code> for the default time\n *           zone.\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s, TimeZone tz) {\n    DateFormat df;\n    if (s == null) {\n        return null;\n    }\n    df = new SimpleDateFormat(DATE_TIME_PATTERN);\n    if (tz != null) {\n        df.setTimeZone(tz);\n    }\n    try {\n        return df.parse(s);\n    } catch (ParseException e) {\n        return null;\n    }\n}"
            ],
            [
                "str2state",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.\n *\n * @param str state as a descriptive text.\n * @return numeric state.\n */\npublic static Integer str2state(String str) {\n    Integer state;\n    if (str == null) {\n        return null;\n    }\n    state = inverseStateMap.get(str);\n    if (state == null) {\n        Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n        if (matcher.matches()) {\n            try {\n                state = Integer.valueOf(matcher.group(1));\n            } catch (NumberFormatException e) {\n                // should not happen as the pattern requires \\d+ for the state.\n                throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n            }\n        }\n    }\n    return state;\n}"
            ],
            [
                "getGetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Returns a Map of getter methods of the given class.\n * <p>\n * The key of the map contains the name of the attribute that can be\n * accessed by the getter, the value the getter itself (an instance of\n * java.lang.reflect.Method). A method is considered a getter if its name\n * starts with \"get\", it is declared public and takes no arguments.\n *\n * @param clazz the class to return the getters for\n * @return a Map of attributes and their accessor methods (getters)\n */\npublic static Map<String, Method> getGetters(final Class<?> clazz) {\n    final Map<String, Method> accessors = new HashMap<>();\n    final Method[] methods = clazz.getMethods();\n    for (Method method : methods) {\n        String name = null;\n        String methodName = method.getName();\n        if (methodName.startsWith(\"get\")) {\n            name = methodName.substring(3);\n        } else if (methodName.startsWith(\"is\")) {\n            name = methodName.substring(2);\n        }\n        if (name == null || name.length() == 0) {\n            continue;\n        }\n        // skip methods with != 0 parameters\n        if (method.getParameterTypes().length != 0) {\n            continue;\n        }\n        accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n    }\n    return accessors;\n}"
            ],
            [
                "getSetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * The main benefit here is that there will not be repeated errors when\n * inspecting classes for setters on every single Event being processed.\n * <br>\n * <br>\n * While this method adds caching which is 100 times faster, the time\n * Benefit is largely insignificant as the execution time was already very\n * fast.\n *\n * @param clazz\n * @return\n */\npublic static Map<String, Method> getSetters(Class<?> clazz) {\n    return setterMap.computeIfAbsent(clazz, (c) -> {\n        return getSettersInternal(c);\n    });\n}"
            ],
            [
                "stripIllegalCharacters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Strips all illegal charaters from the given lower case string. Illegal\n * characters are all characters that are neither characters ('a' to 'z')\n * nor digits ('0' to '9').\n *\n * @param s the original string\n * @return the string with all illegal characters stripped\n */\npublic static String stripIllegalCharacters(String s) {\n    char c;\n    boolean needsStrip = false;\n    StringBuilder sb;\n    if (s == null) {\n        return null;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            // continue\n        } else // NOPMD\n        if (c >= 'a' && c <= 'z') {\n            // continue\n        } else // NOPMD\n        {\n            needsStrip = true;\n            break;\n        }\n    }\n    if (!needsStrip) {\n        return s;\n    }\n    sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sb.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "isClassAvailable",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Checks if the class is available on the current thread's context class\n * loader.\n *\n * @param s fully qualified name of the class to check.\n * @return <code>true</code> if the class is available, <code>false</code>\n * otherwise.\n */\npublic static boolean isClassAvailable(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        classLoader.loadClass(s);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}"
            ],
            [
                "newInstance",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Creates a new instance of the given class. The class is loaded using the\n * current thread's context class loader and instantiated using its default\n * constructor.\n *\n * @param s fully qualified name of the class to instantiate.\n * @return the new instance or <code>null</code> on failure.\n */\npublic static Object newInstance(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        Class<?> clazz = classLoader.loadClass(s);\n        Constructor<?> constructor = clazz.getConstructor();\n        return constructor.newInstance();\n    } catch (ClassNotFoundException e) {\n        return null;\n    } catch (IllegalAccessException e) {\n        return null;\n    } catch (InstantiationException e) {\n        return null;\n    } catch (NoSuchMethodException e) {\n        // no default constructor\n        return null;\n    } catch (InvocationTargetException e) {\n        // constructor threw an exception\n        return null;\n    }\n}"
            ],
            [
                "loadClasses",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * find and all non abstract classes that implement/extend\n * baseClassOrInterface in the package packageName\n *\n * @param packageName\n * @param baseClassOrInterface\n * @return\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface) {\n    Set<Class<T>> result = new HashSet<>();\n    try {\n        Set<String> classNames = getClassNamesFromPackage(packageName);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = classLoader.loadClass(packageName + \".\" + className);\n                if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz)) {\n                    result.add((Class<T>) clazz);\n                }\n            } catch (Throwable e) {\n                logger.error(e, e);\n            }\n        }\n        logger.info(\"Loaded \" + result.size());\n    } catch (Exception e) {\n        logger.error(e, e);\n    }\n    return result;\n}"
            ],
            [
                "doWithLock",
                "org.asteriskjava.lock",
                "Locker",
                "public static LockCloser doWithLock(final Lockable lockable) {\n    try {\n        if (diags) {\n            synchronized (sync) {\n                keepList.put(lockable.getLockableId(), lockable);\n            }\n            return lockWithDiags(lockable);\n        }\n        return simpleLock(lockable);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCaller",
                "org.asteriskjava.lock",
                "Locker",
                "/**\n * determine the caller to Locker\n *\n * @param lockable\n * @return\n */\nstatic String getCaller(Lockable lockable) {\n    StackTraceElement[] trace = new Exception().getStackTrace();\n    String name = lockable.getClass().getCanonicalName();\n    for (StackTraceElement element : trace) {\n        if (element.getFileName() != null && !element.getFileName().contains(Locker.class.getSimpleName())) {\n            name = element.getFileName() + \" \" + element.getMethodName() + \" \" + element.getLineNumber() + \" \" + element.getClassName();\n            break;\n        }\n    }\n    return name;\n}"
            ],
            [
                "addArrivalListener",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static AutoCloseable addArrivalListener(OriginateAction originate, ActivityArrivalListener listener) {\n    final String key = UUID.randomUUID().toString();\n    arrivalListeners.put(key, listener);\n    if (arrivalListeners.size() > 100) {\n        // pick one at random to remove\n        ActivityArrivalListener leaked = arrivalListeners.remove(arrivalListeners.keySet().iterator().next());\n        logger.error(\"Arrival Listeners are leaking\" + leaked.getClass().getCanonicalName());\n    }\n    Map<String, String> vars = new HashMap<>();\n    vars.put(\"_\" + ARRIVAL_KEY, key);\n    originate.setVariables(vars);\n    return new AutoCloseable() {\n\n        @Override\n        public void close() throws Exception {\n            arrivalListeners.remove(key);\n        }\n    };\n}"
            ],
            [
                "getActivePBX",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static PBX getActivePBX() {\n    return AsteriskPBX.SELF;\n}"
            ],
            [
                "getActiveProfile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static AsteriskSettings getActiveProfile() {\n    AsteriskSettings activeProfile = profile.get();\n    if (activeProfile == null) {\n        throw new RuntimeException(\"you must call setAsteriskSettings() before getActiveProfile() is called the first time\");\n    }\n    return activeProfile;\n}"
            ],
            [
                "valueOfDesc",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelState",
                "static ChannelState valueOfDesc(String description) {\n    ChannelState theState = null;\n    for (ChannelState aState : ChannelState.values()) {\n        if (aState._text.compareToIgnoreCase(description) == 0) {\n            theState = aState;\n            break;\n        }\n    }\n    return theState;\n}"
            ],
            [
                "registerChannel",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelEventHelper",
                "public static Channel registerChannel(final String channelName, final String uniqueId, final String callerIdNum, final String callerIdName) throws InvalidChannelName {\n    final AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n    final Channel channel = pbx.internalRegisterChannel(channelName, uniqueId);\n    channel.setCallerId(pbx.buildCallerID(callerIdNum, callerIdName));\n    return channel;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ExtensionStatusEvent",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "Status",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static synchronized CoherentManagerConnection getInstance() {\n    if (self == null)\n        throw new IllegalStateException(\"The CoherentManagerConnection has not been initialised\");\n    self.checkConnection();\n    return self;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction());\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, int timeout) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction(), timeout);\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Sends an Asterisk action and waits for a ManagerRespose.\n *\n * @param action\n * @param timeout timeout in milliseconds\n * @return\n * @throws IllegalArgumentException\n * @throws IllegalStateException\n * @throws IOException\n * @throws TimeoutException\n * @throws OperationNotSupportedException\n */\npublic static ManagerResponse sendAction(final ManagerAction action, final int timeout) throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException {\n    if (logger.isDebugEnabled())\n        CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString());\n    CoherentManagerConnection.getInstance();\n    if ((CoherentManagerConnection.managerConnection != null) && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED)) {\n        final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n        org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection.sendAction(ajAction, timeout);\n        ManagerResponse convertedResponse = null;\n        // UserEventActions always return a null\n        if (response != null)\n            convertedResponse = CoherentEventFactory.build(response);\n        if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0)) {\n            CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage());\n        }\n        return convertedResponse;\n    }\n    throw new IllegalStateException(\"not connected.\");\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "PeerMonitor",
                "public static synchronized PeerMonitor getInstance() {\n    if (PeerMonitor.self == null) {\n        //$NON-NLS-1$\n        throw new IllegalStateException(\"You must call PeerMonitor.init()\");\n    }\n    return PeerMonitor.self;\n}"
            ],
            [
                "getSIPADDHeader",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "static public String getSIPADDHeader(final boolean inherit, final boolean targetIsSIP) {\n    //$NON-NLS-1$\n    String sipHeader = \"SIPADDHEADER\";\n    if (!targetIsSIP || inherit) {\n        //$NON-NLS-1$\n        sipHeader = \"__\" + sipHeader;\n    }\n    return sipHeader;\n}"
            ],
            [
                "valueByName",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByName(final String value) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(value) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    return status;\n}"
            ],
            [
                "valueByChannelState",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByChannelState(final ChannelState state) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(state.name()) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    if (status == NOTSET)\n        //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        logger.warn(\"Unknown channelState: \" + state + \" recieved\", new Throwable(\"Unknown channelState\"));\n    return status;\n}"
            ],
            [
                "getShadowEvent",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static Class<? extends ManagerEvent> getShadowEvent(org.asteriskjava.manager.event.ManagerEvent event) {\n    Class<? extends ManagerEvent> result = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (result == null) {\n        Class<? extends ResponseEvent> response = CoherentEventFactory.mapResponses.get(event.getClass());\n        result = response;\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerEvent build(final org.asteriskjava.manager.event.ManagerEvent event) {\n    ManagerEvent iEvent = null;\n    Class<? extends ManagerEvent> target = null;\n    if (event instanceof org.asteriskjava.manager.event.ResponseEvent)\n        target = CoherentEventFactory.mapResponses.get(event.getClass());\n    else\n        target = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            iEvent = target.getDeclaredConstructor(event.getClass()).newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return iEvent;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ResponseEvent build(org.asteriskjava.manager.event.ResponseEvent event) {\n    ResponseEvent response = null;\n    final Class<? extends ResponseEvent> target = CoherentEventFactory.mapResponses.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            final Constructor<? extends ResponseEvent> declaredConstructor = target.getDeclaredConstructor(event.getClass());\n            response = declaredConstructor.newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return response;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerResponse build(org.asteriskjava.manager.response.ManagerResponse response) {\n    ManagerResponse result;\n    if (response instanceof org.asteriskjava.manager.response.CommandResponse) {\n        result = new CommandResponse(response);\n    } else if (response instanceof org.asteriskjava.manager.response.ManagerError) {\n        result = new ManagerError(response);\n    } else {\n        result = new ManagerResponse(response);\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static org.asteriskjava.manager.action.ManagerAction build(ManagerAction action) {\n    org.asteriskjava.manager.action.ManagerAction result = null;\n    // final Class<? extends org.asteriskjava.manager.action.ManagerAction>\n    // target = CoherentEventFactory.mapActions.get(action.getClass());\n    if (logger.isDebugEnabled())\n        //$NON-NLS-1$\n        logger.debug(\"Action \" + action);\n    // if (target == null)\n    // {\n    // logger.warn(\"The given action \" + action.getClass().getName() + \" is\n    // not supported \"); //$NON-NLS-1$ //$NON-NLS-2$\n    // }\n    // else\n    {\n        result = action.getAJAction();\n    }\n    return result;\n}"
            ],
            [
                "buildFromComponents",
                "org.asteriskjava.pbx.internal.asterisk",
                "CallerIDImpl",
                "/**\n * This is a little helper class which will buid the name component of a\n * clid from the first and lastnames. If both firstname and lastname are\n * null then the name component will be an empty string.\n *\n * @param firstname the person's firstname, may be null.\n * @param lastname  the person's lastname, may be null\n * @param number    the phone number.\n * @return\n */\npublic static CallerID buildFromComponents(final String firstname, final String lastname, final String number) {\n    //$NON-NLS-1$\n    String name = \"\";\n    if (firstname != null) {\n        name += firstname.trim();\n    }\n    if (lastname != null) {\n        if (name.length() > 0) {\n            //$NON-NLS-1$\n            name += \" \";\n        }\n        name += lastname.trim();\n    }\n    return PBXFactory.getActivePBX().buildCallerID(number, name);\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.asterisk",
                "MeetmeRoomControl",
                "public static MeetmeRoomControl getInstance() {\n    if (MeetmeRoomControl.self.get() == null) {\n        throw new IllegalStateException(//$NON-NLS-1$\n        \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\");\n    }\n    return MeetmeRoomControl.self.get();\n}"
            ],
            [
                "getNextChannelId",
                "org.asteriskjava.pbx",
                "ChannelFactory",
                "public static long getNextChannelId() {\n    return nextChannelId.incrementAndGet();\n}"
            ],
            [
                "getTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * Extracts the technology from a fully qualified endpoint string of the form:\n * TECH/NNNN\n *\n * @param fullyQualifiedEndPoint\n * @return\n */\npublic static TechType getTech(final String fullyQualifiedEndPoint) {\n    if (!TechType.hasValidTech(fullyQualifiedEndPoint)) {\n        throw new IllegalArgumentException(//$NON-NLS-1$\n        \"The provided end point '\" + fullyQualifiedEndPoint + //$NON-NLS-1$\n        \"' must contain a tech prefix. e.g. SIP/100\");\n    }\n    //$NON-NLS-1$\n    final String techName = fullyQualifiedEndPoint.substring(0, fullyQualifiedEndPoint.indexOf(\"/\"));\n    return TechType.valueOf(techName.toUpperCase());\n}"
            ],
            [
                "hasValidTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a valid tech descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasValidTech(final String endPointName) {\n    TechType tech = UNKNOWN;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index >= 1) {\n        final String techName = endPointName.substring(0, index);\n        try {\n            tech = TechType.valueOf(techName.toUpperCase());\n        } catch (final IllegalArgumentException e) {\n            //$NON-NLS-1$\n            TechType.logger.error(\"Invalid tech for endpoint:\" + endPointName);\n        }\n    }\n    return tech != UNKNOWN;\n}"
            ],
            [
                "hasTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a tech descriptor even if it isn't\n * a known descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasTech(final String endPointName) {\n    boolean hasTech = false;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index != -1) {\n        hasTech = true;\n    }\n    return hasTech;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx",
                "CallDirection",
                "public static CallDirection valueOf(final int dbValue) {\n    CallDirection result = null;\n    for (final CallDirection direction : CallDirection.values()) {\n        if (direction.dbValue == dbValue) {\n            result = direction;\n            break;\n        }\n    }\n    return result;\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "ManagerEventListenerProxy",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "Access",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "toHexString",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Converts a byte array to a hex string representing it. The hex digits are\n * lower case.\n *\n * @param b the byte array to convert\n * @return the hex representation of b\n */\npublic static String toHexString(byte[] b) {\n    final StringBuilder sb;\n    sb = new StringBuilder(b.length * 2);\n    for (byte aB : b) {\n        sb.append(hexChar[(aB & 0xf0) >>> 4]);\n        sb.append(hexChar[aB & 0x0f]);\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Returns the internal action id contained in the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the internal action id that has been added before.\n * @see #addInternalActionId(String, String)\n */\npublic static String getInternalActionId(String actionId) {\n    final int delimiterIndex;\n    if (actionId == null) {\n        return null;\n    }\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        return actionId.substring(0, delimiterIndex);\n    }\n    return null;\n}"
            ],
            [
                "stripInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Strips the internal action id from the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the original action id, that is the action id as it was before\n * the internal action id was added.\n * @see #addInternalActionId(String, String)\n */\npublic static String stripInternalActionId(String actionId) {\n    int delimiterIndex;\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        if (actionId.length() > delimiterIndex + 1) {\n            return actionId.substring(delimiterIndex + 1);\n        }\n        return null;\n    }\n    return null;\n}"
            ],
            [
                "addInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Adds the internal action id to the given action id.\n *\n * @param actionId         the action id as set by the user.\n * @param internalActionId the internal action id to add.\n * @return the action id prefixed by the internal action id suitable to be\n * sent to Asterisk.\n */\npublic static String addInternalActionId(String actionId, String internalActionId) {\n    if (actionId == null) {\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n    }\n    return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n}"
            ],
            [
                "determineSetterName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineSetterName(String getterName) {\n    if (getterName.startsWith(\"get\")) {\n        return \"set\" + getterName.substring(3);\n    } else if (getterName.startsWith(\"is\")) {\n        return \"set\" + getterName.substring(2);\n    } else {\n        throw new IllegalArgumentException(\"Getter '\" + getterName + \"' doesn't start with either 'get' or 'is'\");\n    }\n}"
            ],
            [
                "determineFieldName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineFieldName(String accessorName) {\n    if (accessorName.startsWith(\"get\")) {\n        return lcFirst(accessorName.substring(3));\n    } else if (accessorName.startsWith(\"is\")) {\n        return lcFirst(accessorName.substring(2));\n    } else if (accessorName.startsWith(\"set\")) {\n        return lcFirst(accessorName.substring(3));\n    } else {\n        throw new IllegalArgumentException(\"Accessor '\" + accessorName + \"' doesn't start with either 'get', 'is' or 'set'\");\n    }\n}"
            ],
            [
                "getSerialVersionUID",
                "org.asteriskjava.manager.event",
                "InvalidAccountId",
                "public static long getSerialVersionUID() {\n    return serialVersionUID;\n}"
            ],
            [
                "getSerialversionuid",
                "org.asteriskjava.manager.event",
                "TransportDetail",
                "public static long getSerialversionuid() {\n    return serialVersionUID;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "ChannelState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.AbstractChannelStateEvent#getChannelState()}.\n *\n * @param status integer representation of the status.\n * @return corresponding ChannelState object or <code>null</code> if none matches.\n */\npublic static ChannelState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (ChannelState tmp : ChannelState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "getByCode",
                "org.asteriskjava.live",
                "HangupCause",
                "/**\n * Returns the HangupCode by its numeric cause code.<p>\n * Using this method in client code is discouraged.\n *\n * @param code the numeric cause code.\n * @return the corresponding HangupCode enum or\n * <code>null</code> if there is no such HangupCause.\n */\npublic static synchronized HangupCause getByCode(int code) {\n    if (causes == null) {\n        causes = new HashMap<>();\n        for (HangupCause cause : values()) {\n            causes.put(cause.code, cause);\n        }\n    }\n    return causes.get(code);\n}"
            ],
            [
                "mapSendActionException",
                "org.asteriskjava.live.internal",
                "ManagerCommunicationExceptionMapper",
                "/**\n * Maps exceptions received from\n * {@link org.asteriskjava.manager.ManagerConnection} when sending a\n * {@link org.asteriskjava.manager.action.ManagerAction} to the corresponding\n * {@link org.asteriskjava.live.ManagerCommunicationException}.\n *\n * @param actionName name of the action that has been tried to send\n * @param exception  exception received\n * @return the corresponding ManagerCommunicationException\n */\nstatic ManagerCommunicationException mapSendActionException(String actionName, Exception exception) {\n    if (exception instanceof IllegalStateException) {\n        return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n    } else if (exception instanceof EventTimeoutException) {\n        return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n    } else {\n        return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n    }\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "QueueMemberState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.QueueMemberEvent#getStatus()}.\n *\n * @param status integer representation of the status.\n * @return corresponding QueueMemberState object or <code>null</code> if none matches.\n */\npublic static QueueMemberState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (QueueMemberState tmp : QueueMemberState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "CallerId",
                "/**\n * Parses a caller id string in the form\n * <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.\n *\n * @param s the caller id string to parse.\n * @return the corresponding CallerId object which is never <code>null</code>.\n * @see AstUtil#parseCallerId(String)\n */\npublic static CallerId valueOf(String s) {\n    final String[] parsedCallerId;\n    parsedCallerId = AstUtil.parseCallerId(s);\n    return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "ASTERISK_1_0",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.0 series.\n */\npublic static final AsteriskVersion ASTERISK_1_0 = new AsteriskVersion(100, \"Asterisk 1.0\");"
            ],
            [
                "ASTERISK_1_2",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.2 series.\n */\npublic static final AsteriskVersion ASTERISK_1_2 = new AsteriskVersion(120, \"Asterisk 1.2\");"
            ],
            [
                "ASTERISK_1_4",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.4 series.\n *\n * @since 0.3\n */\npublic static final AsteriskVersion ASTERISK_1_4 = new AsteriskVersion(140, \"Asterisk 1.4\");"
            ],
            [
                "ASTERISK_1_6",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.6 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_6 = new AsteriskVersion(160, \"Asterisk 1.6\");"
            ],
            [
                "ASTERISK_1_8",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.8 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_8 = new AsteriskVersion(180, \"Asterisk 1.8\");"
            ],
            [
                "ASTERISK_10",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 10 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_10 = new AsteriskVersion(1000, \"Asterisk 10\");"
            ],
            [
                "ASTERISK_11",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 11 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_11 = new AsteriskVersion(1100, \"Asterisk 11\");"
            ],
            [
                "ASTERISK_12",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 12 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_12 = new AsteriskVersion(1200, \"Asterisk 12\");"
            ],
            [
                "ASTERISK_13",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 13 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_13 = new AsteriskVersion(1300, \"Asterisk 13\", VERSION_PATTERN_13, VERSION_PATTERN_CERTIFIED_13);"
            ],
            [
                "ASTERISK_14",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 14 series.\n *\n * @since 1.1.0\n */\npublic static final AsteriskVersion ASTERISK_14 = new AsteriskVersion(1400, \"Asterisk 14\", VERSION_PATTERN_14);"
            ],
            [
                "ASTERISK_15",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 15 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_15 = new AsteriskVersion(1500, \"Asterisk 15\", VERSION_PATTERN_15);"
            ],
            [
                "ASTERISK_16",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 16 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_16 = new AsteriskVersion(1600, \"Asterisk 16\", VERSION_PATTERN_16, VERSION_PATTERN_CERTIFIED_16);"
            ],
            [
                "ASTERISK_17",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 17 series.\n *\n * @since 3.7.0\n */\npublic static final AsteriskVersion ASTERISK_17 = new AsteriskVersion(1700, \"Asterisk 17\", VERSION_PATTERN_17);"
            ],
            [
                "ASTERISK_18",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 18 series.\n *\n * @since 3.13.0\n */\npublic static final AsteriskVersion ASTERISK_18 = new AsteriskVersion(1800, \"Asterisk 18\", VERSION_PATTERN_18, VERSION_PATTERN_CERTIFIED_18);"
            ],
            [
                "ASTERISK_19",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 19 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_19 = new AsteriskVersion(1900, \"Asterisk 19\", VERSION_PATTERN_19);"
            ],
            [
                "ASTERISK_20",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 20 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_20 = new AsteriskVersion(2000, \"Asterisk 20\", VERSION_PATTERN_20);"
            ],
            [
                "DEFAULT_VERSION",
                "org.asteriskjava",
                "AsteriskVersion",
                "// current debian stable version, as of 09/10/2018\npublic static final AsteriskVersion DEFAULT_VERSION = ASTERISK_16;"
            ],
            [
                "AGI_CONNECTION_HANDLERS",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "public static final ConcurrentMap<AgiConnectionHandler, AgiChannel> AGI_CONNECTION_HANDLERS = new ConcurrentHashMap<>(32);"
            ],
            [
                "REQUEST",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI request is made available to scripts.\n */\npublic static final String REQUEST = \"request\";"
            ],
            [
                "CHANNEL",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI channel is made available to scripts.\n */\npublic static final String CHANNEL = \"channel\";"
            ],
            [
                "CRNL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern CRNL_PATTERN = Pattern.compile(\"\\r\\n\");"
            ],
            [
                "NL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern NL_PATTERN = Pattern.compile(\"\\n\");"
            ],
            [
                "MAX_SOCKET_READ_TIMEOUT_MILLIS",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "/**\n * 3 hrs = 3 * 3660 * 1000\n */\npublic static final int MAX_SOCKET_READ_TIMEOUT_MILLIS = 10800000;"
            ],
            [
                "FQCN",
                "org.asteriskjava.util.internal",
                "Slf4JLogger",
                "static String FQCN = Slf4JLogger.class.getName();"
            ],
            [
                "TRACE_DIRECTORY_PROPERTY",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "public static final String TRACE_DIRECTORY_PROPERTY = \"org.asteriskjava.trace.directory\";"
            ],
            [
                "FILE_PREFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_PREFIX = \"aj-trace\";"
            ],
            [
                "FILE_SUFFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_SUFFIX = \".txt\";"
            ],
            [
                "AST_STATE_DOWN",
                "org.asteriskjava.util",
                "AstState",
                "/* from include/asterisk/channel.h */\n/**\n * Channel is down and available.\n */\npublic static final int AST_STATE_DOWN = 0;"
            ],
            [
                "AST_STATE_RSRVD",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is down, but reserved.\n */\npublic static final int AST_STATE_RSRVD = 1;"
            ],
            [
                "AST_STATE_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is off hook.\n */\npublic static final int AST_STATE_OFFHOOK = 2;"
            ],
            [
                "AST_STATE_DIALING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed.\n */\npublic static final int AST_STATE_DIALING = 3;"
            ],
            [
                "AST_STATE_RING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is ringing.\n */\npublic static final int AST_STATE_RING = 4;"
            ],
            [
                "AST_STATE_RINGING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Remote end is ringing.\n */\npublic static final int AST_STATE_RINGING = 5;"
            ],
            [
                "AST_STATE_UP",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is up.\n */\npublic static final int AST_STATE_UP = 6;"
            ],
            [
                "AST_STATE_BUSY",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is busy.\n */\npublic static final int AST_STATE_BUSY = 7;"
            ],
            [
                "AST_STATE_DIALING_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed while offhook.\n */\npublic static final int AST_STATE_DIALING_OFFHOOK = 8;"
            ],
            [
                "AST_STATE_PRERING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel has detected an incoming call and is waiting for ring.\n */\npublic static final int AST_STATE_PRERING = 9;"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.agi.config",
                "ServiceAgiScriptImpl",
                "static transient Log logger = LogFactory.getLog(ServiceAgiScriptImpl.class);"
            ],
            [
                "ARRIVAL_KEY",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static final String ARRIVAL_KEY = \"ActivityAgiArrivalKey\";"
            ],
            [
                "profile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "final static AtomicReference<AsteriskSettings> profile = new AtomicReference<>();"
            ],
            [
                "eventStatistics",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "static Map<String, Integer> eventStatistics = new HashMap<>();"
            ],
            [
                "connector",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Used to instantiate the manager connection including the initial login.\n */\nstatic Connector connector = null;"
            ],
            [
                "managerConnection",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * The actual manager connection. AJ actually maintains two socket\n * connections one for reading events and the other writing events.\n */\nstatic ManagerConnection managerConnection = null;"
            ],
            [
                "ACTIVITY_AGI",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "public static final String ACTIVITY_AGI = \"activityAgi\";"
            ],
            [
                "mapEvents",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Events\nstatic Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();"
            ],
            [
                "mapResponses",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Response\nstatic Hashtable<Class<? extends org.asteriskjava.manager.event.ResponseEvent>, Class<? extends ResponseEvent>> mapResponses = new Hashtable<>();"
            ],
            [
                "ZOMBIE",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String ZOMBIE = \"<ZOMBIE>\";"
            ],
            [
                "MASQ",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String MASQ = \"<MASQ>\";"
            ],
            [
                "UNKNOWN_UNIQUE_ID",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String UNKNOWN_UNIQUE_ID = \"-1\";"
            ],
            [
                "_actions",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\npublic static final String[] _actions = new String[] { \"PARKED/\", \"ASYNCGOTO/\", \"BRIDGE/\" };"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.internal.managerAPI",
                "OriginateBaseClass",
                "/*\n     * this class generates and issues ActionEvents to asterisk through the\n     * manager. This is the asterisk coal face.\n     */\nprotected static final Log logger = LogFactory.getLog(OriginateBaseClass.class);"
            ],
            [
                "INTERNAL_ACTION_ID_DELIMITER",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "public static final char INTERNAL_ACTION_ID_DELIMITER = '#';"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbsoluteTimeoutAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 3073237188819825503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LogoffAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7576797478570238525L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreShowChannelsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIDeleteAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddiesAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIUpdateAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "GetConfigAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreSettingsAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "OriginateAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxCountAction",
                "static final long serialVersionUID = -6900421919824575941L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "RedirectAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1869279324159418150L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAddBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "HangupAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeRemoveBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbstractManagerAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -7667827187378395689L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "PROPERTY_SKYPENAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_SKYPENAME = \"skypename\";"
            ],
            [
                "PROPERTY_TIMEZONE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_TIMEZONE = \"timezone\";"
            ],
            [
                "PROPERTY_AVAILABILITY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_AVAILABILITY = \"availability\";"
            ],
            [
                "PROPERTY_FULLNAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_FULLNAME = \"fullname\";"
            ],
            [
                "PROPERTY_LANGUAGE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_LANGUAGE = \"language\";"
            ],
            [
                "PROPERTY_COUNTRY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_COUNTRY = \"country\";"
            ],
            [
                "PROPERTY_PHONE_HOME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_HOME = \"phone_home\";"
            ],
            [
                "PROPERTY_PHONE_OFFICE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_OFFICE = \"phone_office\";"
            ],
            [
                "PROPERTY_PHONE_MOBILE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_MOBILE = \"phone_mobile\";"
            ],
            [
                "PROPERTY_ABOUT",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_ABOUT = \"about\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgiAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgentsAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -320228893513973367L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "ACTION_NEWCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/* Actions accepted by commands in the sequence */\npublic static final String ACTION_NEWCAT = \"NewCat\";"
            ],
            [
                "ACTION_RENAMECAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_RENAMECAT = \"RenameCat\";"
            ],
            [
                "ACTION_DELCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELCAT = \"DelCat\";"
            ],
            [
                "ACTION_UPDATE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_UPDATE = \"Update\";"
            ],
            [
                "ACTION_DELETE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELETE = \"Delete\";"
            ],
            [
                "ACTION_APPEND",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_APPEND = \"Append\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "EventsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -8042435402644984875L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExtensionStateAction",
                "static final long serialVersionUID = 6537408784388696403L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExecAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "FilterAction",
                "static final long serialVersionUID = 5537508784388696503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseStatusAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxStatusAction",
                "static final long serialVersionUID = -3845028207155711950L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseListAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CommandAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "DongleSendSMSAction",
                "static final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleCheckAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LoginAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -2600694249339115032L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "SUBSYSTEM_CDR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_CDR = \"cdr\";"
            ],
            [
                "SUBSYSTEM_ENUM",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_ENUM = \"enum\";"
            ],
            [
                "SUBSYSTEM_DNSMGR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_DNSMGR = \"dnsmgr\";"
            ],
            [
                "SUBSYSTEM_EXTCONFIG",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_EXTCONFIG = \"extconfig\";"
            ],
            [
                "SUBSYSTEM_MANAGER",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_MANAGER = \"manager\";"
            ],
            [
                "SUBSYSTEM_RTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_RTP = \"rtp\";"
            ],
            [
                "SUBSYSTEM_HTTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_HTTP = \"http\";"
            ],
            [
                "LOAD_TYPE_LOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_LOAD = \"load\";"
            ],
            [
                "LOAD_TYPE_UNLOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_UNLOAD = \"unload\";"
            ],
            [
                "LOAD_TYPE_RELOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_RELOAD = \"reload\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeChatSendAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreStatusAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "StatusAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ChallengeAction",
                "static final long serialVersionUID = 7240516124871953971L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AtxferAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "STATUS_LOGGED_IN",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_IN = \"Logged In\";"
            ],
            [
                "STATUS_LOGGED_OUT",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_OUT = \"Logged Out\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREGISTERED = \"Unregistered\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_LAGGED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_LAGGED = \"Lagged\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -0L;"
            ],
            [
                "CEL_EVENT_CHAN_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_START = \"CHAN_START\";"
            ],
            [
                "CEL_EVENT_CHAN_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_END = \"CHAN_END\";"
            ],
            [
                "CEL_EVENT_ANSWER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ANSWER = \"ANSWER\";"
            ],
            [
                "CEL_EVENT_HANGUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_HANGUP = \"HANGUP\";"
            ],
            [
                "CEL_EVENT_BRIDGE_ENTER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_ENTER = \"BRIDGE_ENTER\";"
            ],
            [
                "CEL_EVENT_BRIDGE_EXIT",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_EXIT = \"BRIDGE_EXIT\";"
            ],
            [
                "CEL_EVENT_APP_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_START = \"APP_START\";"
            ],
            [
                "CEL_EVENT_APP_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_END = \"APP_END\";"
            ],
            [
                "CEL_EVENT_PARK_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_START = \"PARK_START\";"
            ],
            [
                "CEL_EVENT_PARK_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_END = \"PARK_END\";"
            ],
            [
                "CEL_EVENT_BLINDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BLINDTRANSFER = \"BLINDTRANSFER\";"
            ],
            [
                "CEL_EVENT_ATTENDEDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ATTENDEDTRANSFER = \"ATTENDEDTRANSFER\";"
            ],
            [
                "CEL_EVENT_PICKUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PICKUP = \"PICKUP\";"
            ],
            [
                "CEL_EVENT_FORWARD",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_FORWARD = \"FORWARD\";"
            ],
            [
                "CEL_EVENT_LINKEDID_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LINKEDID_END = \"LINKEDID_END\";"
            ],
            [
                "CEL_EVENT_LOCAL_OPTIMIZE",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LOCAL_OPTIMIZE = \"LOCAL_OPTIMIZE\";"
            ],
            [
                "CEL_EVENT_USER_DEFINED",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_USER_DEFINED = \"USER_DEFINED\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "MasqueradeEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DndStateEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "AST_DEVICE_UNKNOWN",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNKNOWN = 0;"
            ],
            [
                "AST_DEVICE_NOT_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "/**\n * Queue member is available.\n */\npublic static final int AST_DEVICE_NOT_INUSE = 1;"
            ],
            [
                "AST_DEVICE_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INUSE = 2;"
            ],
            [
                "AST_DEVICE_BUSY",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_BUSY = 3;"
            ],
            [
                "AST_DEVICE_INVALID",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INVALID = 4;"
            ],
            [
                "AST_DEVICE_UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNAVAILABLE = 5;"
            ],
            [
                "AST_DEVICE_RINGING",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGING = 6;"
            ],
            [
                "AST_DEVICE_RINGINUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGINUSE = 7;"
            ],
            [
                "AST_DEVICE_ONHOLD",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_ONHOLD = 8;"
            ],
            [
                "MEMBERSHIP_STATIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_STATIC = \"static\";"
            ],
            [
                "MEMBERSHIP_DYNAMIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_DYNAMIC = \"dynamic\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "MODULE_MANAGER",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_MANAGER = \"Manager\";"
            ],
            [
                "MODULE_CDR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_CDR = \"CDR\";"
            ],
            [
                "MODULE_DNS_MGR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_DNS_MGR = \"DNSmgr\";"
            ],
            [
                "MODULE_RTP",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_RTP = \"RTP\";"
            ],
            [
                "MODULE_ENUM",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_ENUM = \"ENUM\";"
            ],
            [
                "STATUS_ENABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_ENABLED = \"Enabled\";"
            ],
            [
                "STATUS_DISABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_DISABLED = \"Disabled\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "QueueEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -8554382298783676181L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnlinkEvent",
                "/**\n * Serial version identifier.\n */\nstatic final long serialVersionUID = -2943257621137870024L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LogChannelEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 650153034857116588L;"
            ],
            [
                "AGENT_STATUS_LOGGEDOFF",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent isn't logged in.\n */\npublic static final String AGENT_STATUS_LOGGEDOFF = \"AGENT_LOGGEDOFF\";"
            ],
            [
                "AGENT_STATUS_IDLE",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and waiting for call.\n */\npublic static final String AGENT_STATUS_IDLE = \"AGENT_IDLE\";"
            ],
            [
                "AGENT_STATUS_ONCALL",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and on a call.\n */\npublic static final String AGENT_STATUS_ONCALL = \"AGENT_ONCALL\";"
            ],
            [
                "AGENT_STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Don't know anything about agent. Shouldn't ever get this.\n */\npublic static final String AGENT_STATUS_UNKNOWN = \"AGENT_UNKNOWN\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "BUDDYSTATUS_WAITAUTHORIZATION",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_WAITAUTHORIZATION = \"Waiting for Authorization\";"
            ],
            [
                "BUDDYSTATUS_BLOCKED",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKED = \"Blocked\";"
            ],
            [
                "BUDDYSTATUS_BLOCKEDSKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKEDSKYPEOUT = \"Blocked Skypout\";"
            ],
            [
                "BUDDYSTATUS_SKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEOUT = \"Skypeout\";"
            ],
            [
                "BUDDYSTATUS_OFFLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINE = \"Offline\";"
            ],
            [
                "BUDDYSTATUS_ONLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_ONLINE = \"Online\";"
            ],
            [
                "BUDDYSTATUSS_AWAY",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUSS_AWAY = \"Away\";"
            ],
            [
                "BUDDYSTATUS_NOTAVAILABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_NOTAVAILABLE = \"Not Available\";"
            ],
            [
                "BUDDYSTATUS_DONTDISTURB",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_DONTDISTURB = \"Do Not Disturb\";"
            ],
            [
                "BUDDYSTATUS_SKYPEME",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEME = \"Skype Me\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEVOICEENABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEVOICEENABLE = \"Offline (Voicemail Enabled)\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEFORWARDENABLEL",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEFORWARDENABLEL = \"Offline (Call Forwarding Enabled)\";"
            ],
            [
                "BUDDYSTATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerPushEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "VarSetEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LinkEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -4023240534975776225L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerRunEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewExtenEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -467486409866099387L;"
            ],
            [
                "REASON_LOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been loaded for the first time.\n */\npublic static final String REASON_LOAD = \"LOAD\";"
            ],
            [
                "REASON_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded.\n */\npublic static final String REASON_RELOAD = \"RELOAD\";"
            ],
            [
                "REASON_CLI_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded from the command line.\n */\npublic static final String REASON_CLI_RELOAD = \"CLIRELOAD\";"
            ],
            [
                "REASON_MANAGER_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded due to a manager action.\n */\npublic static final String REASON_MANAGER_RELOAD = \"MANAGERRELOAD\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LeaveEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7450401017732634240L;"
            ],
            [
                "STATUS_CREATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_CREATED = \"Created\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_REMOVED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REMOVED = \"Removed\";"
            ],
            [
                "STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_UPDATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UPDATED = \"Updated\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnholdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ManagerEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 2L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "DISPOSITION_NO_ANSWER",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_NO_ANSWER = \"NO ANSWER\";"
            ],
            [
                "DISPOSITION_FAILED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_FAILED = \"FAILED\";"
            ],
            [
                "DISPOSITION_BUSY",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_BUSY = \"BUSY\";"
            ],
            [
                "DISPOSITION_ANSWERED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_ANSWERED = \"ANSWERED\";"
            ],
            [
                "DISPOSITION_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_UNKNOWN = \"UNKNOWN\";"
            ],
            [
                "AMA_FLAG_OMIT",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_OMIT = \"OMIT\";"
            ],
            [
                "AMA_FLAG_BILLING",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_BILLING = \"BILLING\";"
            ],
            [
                "AMA_FLAG_DOCUMENTATION",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_DOCUMENTATION = \"DOCUMENTATION\";"
            ],
            [
                "AMA_FLAG_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "CoreShowChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "JoinEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "NOT_INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * No device INUSE or BUSY.\n */\npublic static final int NOT_INUSE = 0;"
            ],
            [
                "INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices INUSE.\n */\npublic static final int INUSE = 1;"
            ],
            [
                "BUSY",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices BUSY.\n */\npublic static final int BUSY = 1 << 1;"
            ],
            [
                "UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices UNAVAILABLE/UNREGISTERED.\n */\npublic static final int UNAVAILABLE = 1 << 2;"
            ],
            [
                "RINGING",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices RINGING.\n */\npublic static final int RINGING = 1 << 3;"
            ],
            [
                "TRANSFER_METHOD_SIP",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_METHOD_SIP = \"SIP\";"
            ],
            [
                "TRANSFER_TYPE_ATTENDED",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_ATTENDED = \"Attended\";"
            ],
            [
                "TRANSFER_TYPE_BLIND",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_BLIND = \"Blind\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ShutdownEvent",
                "/**\n * Serial version identifier\n */\nstatic final long serialVersionUID = 2028136082664018423L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has started.\n */\npublic static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has finished.\n */\npublic static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "RenameEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 3400165738000349767L;"
            ],
            [
                "STATE_START",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_START = \"Start\";"
            ],
            [
                "STATE_STOP",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_STOP = \"Stop\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_EXEC",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_EXEC = \"Exec\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "CHANNEL_TYPE_SIP",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_SIP = \"SIP\";"
            ],
            [
                "CHANNEL_TYPE_IAX",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_IAX = \"IAX\";"
            ],
            [
                "MODULE_SELECTION_PRELOAD",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_PRELOAD = \"Preload\";"
            ],
            [
                "MODULE_SELECTION_ALL",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_ALL = \"All\";"
            ],
            [
                "MODULE_LOAD_STATUS_DONE",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_LOAD_STATUS_DONE = \"Done\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "SoftHangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewCallerIdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 6639570533512201213L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LocalBridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "RESPONSE_FAILED",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_FAILED = \"Failed\";"
            ],
            [
                "RESPONSE_SUCCESS",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_SUCCESS = \"Success\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "BRIDGE_STATE_LINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_LINK = \"Link\";"
            ],
            [
                "BRIDGE_STATE_UNLINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_UNLINK = \"Unlink\";"
            ],
            [
                "BRIDGE_TYPE_CORE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A <code>channel.c</code> bridge.\n */\npublic static final String BRIDGE_TYPE_CORE = \"core\";"
            ],
            [
                "BRIDGE_TYPE_RTP_NATIVE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP native bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_NATIVE = \"rtp-native\";"
            ],
            [
                "BRIDGE_TYPE_RTP_DIRECT",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP peer-2-peer bridge (NAT support only).\n */\npublic static final String BRIDGE_TYPE_RTP_DIRECT = \"rtp-direct\";"
            ],
            [
                "BRIDGE_TYPE_RTP_REMOTE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A remote (re-invite) bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_REMOTE = \"rtp-remote\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREGISTERED = \"Registered\";"
            ],
            [
                "STATUS_REQUEST_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REQUEST_SENT = \"Request Sent\";"
            ],
            [
                "STATUS_AUTH_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_AUTH_SENT = \"Auth. Sent\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "STATUS_TIMEOUT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_TIMEOUT = \"Timeout\";"
            ],
            [
                "STATUS_NO_AUTHENTICATION",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_NO_AUTHENTICATION = \"No Authentication\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "PT_SENDER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a sender report.\n */\npublic static final int PT_SENDER_REPORT = 200;"
            ],
            [
                "PT_RECEIVER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a receiver report.\n */\npublic static final int PT_RECEIVER_REPORT = 201;"
            ],
            [
                "PT_H261_FUR",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "public static final int PT_H261_FUR = 192;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "DIRECTION_RECEIVED",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_RECEIVED = \"Received\";"
            ],
            [
                "DIRECTION_SENT",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_SENT = \"Sent\";"
            ],
            [
                "SUBEVENT_BEGIN",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_BEGIN = \"Begin\";"
            ],
            [
                "SUBEVENT_END",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_END = \"End\";"
            ],
            [
                "DIALSTATUS_CHANUNAVAIL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CHANUNAVAIL = \"CHANUNAVAIL\";"
            ],
            [
                "DIALSTATUS_CONGESTION",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CONGESTION = \"CONGESTION\";"
            ],
            [
                "DIALSTATUS_NOANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_NOANSWER = \"NOANSWER\";"
            ],
            [
                "DIALSTATUS_BUSY",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_BUSY = \"BUSY\";"
            ],
            [
                "DIALSTATUS_ANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_ANSWER = \"ANSWER\";"
            ],
            [
                "DIALSTATUS_CANCEL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CANCEL = \"CANCEL\";"
            ],
            [
                "DIALSTATUS_DONTCALL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_DONTCALL = \"DONTCALL\";"
            ],
            [
                "DIALSTATUS_TORTURE",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_TORTURE = \"TORTURE\";"
            ],
            [
                "DIALSTATUS_INVALIDARGS",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_INVALIDARGS = \"INVALIDARGS\";"
            ],
            [
                "VARIABLE_TRACE_ID",
                "org.asteriskjava.live.internal",
                "Constants",
                "static final String VARIABLE_TRACE_ID = \"AJ_TRACE_ID\";"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1024",
                "int"
            ],
            [
                "0",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "\"ludicrous time\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "file",
                "java.lang",
                "String"
            ],
            [
                "timeout",
                "",
                "long"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "toString",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "public String toString()"
            ],
            [
                "getTimeout",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the timeout to wait for data.\n *\n * @return the timeout in milliseconds to wait for data.\n */\npublic long getTimeout() {\n    return timeout;\n}"
            ],
            [
                "getAsteriskVersion",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "AsteriskVersion getAsteriskVersion()"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String[] arg0)"
            ],
            [
                "buildCommand",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "@Override\npublic String buildCommand() {\n    if (maxDigits == DEFAULT_MAX_DIGITS) {\n        if (timeout == DEFAULT_TIMEOUT) {\n            return \"GET DATA \" + escapeAndQuote(file);\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n    }\n    return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getMaxDigits",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the maximum number of digits to read.\n *\n * @return the maximum number of digits to read.\n */\npublic int getMaxDigits() {\n    return maxDigits;\n}"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getFile",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the name of the file to stream.\n *\n * @return the name of the file to stream.\n */\npublic String getFile() {\n    return file;\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26704,
        "oracle": "(maxDigits >= 1 && maxDigits <= 1024) == false;",
        "oracleType": "EXCEPT_POST",
        "projectName": "asterisk-java",
        "packageName": "org.asteriskjava.fastagi.command",
        "className": "GetDataCommand",
        "javadocTag": "@throws IllegalArgumentException if maxDigits is not in [1..1024]",
        "methodJavadoc": "    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */",
        "methodSourceCode": "public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException{\n    super();\n    validateMaxDigits(maxDigits);\n    this.file = file;\n    this.timeout = timeout;\n    this.maxDigits = maxDigits;\n}",
        "classJavadoc": "/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */",
        "classSourceCode": "/*\n *  Copyright 2004-2006 Stefan Reuter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.asteriskjava.fastagi.command;\n\n/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */\npublic class GetDataCommand extends AbstractAgiCommand {\n    private static final long serialVersionUID = 3978141041352128820L;\n\n    private static final int DEFAULT_TIMEOUT = 0;\n    private static final int DEFAULT_MAX_DIGITS = 1024;\n\n    /**\n     * The name of the file to stream.\n     */\n    private String file;\n\n    /**\n     * The timeout in milliseconds to wait for data.\n     * <p>\n     * 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    private long timeout;\n\n    /**\n     * The maximum number of digits to read.\n     * <p>\n     * Must be in [1..1024].\n     */\n    private int maxDigits;\n\n    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public GetDataCommand(String file) {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public GetDataCommand(String file, long timeout) {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException {\n        super();\n        validateMaxDigits(maxDigits);\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }\n\n    /**\n     * Returns the name of the file to stream.\n     *\n     * @return the name of the file to stream.\n     */\n    public String getFile() {\n        return file;\n    }\n\n    /**\n     * Sets the name of the file to stream.\n     * <p>\n     * This attribute is mandatory.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    /**\n     * Returns the timeout to wait for data.\n     *\n     * @return the timeout in milliseconds to wait for data.\n     */\n    public long getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Sets the timeout to wait for data.\n     *\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * Returns the maximum number of digits to read.\n     *\n     * @return the maximum number of digits to read.\n     */\n    public int getMaxDigits() {\n        return maxDigits;\n    }\n\n    /**\n     * Sets the maximum number of digits to read.\n     *\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public void setMaxDigits(int maxDigits) throws IllegalArgumentException {\n        validateMaxDigits(maxDigits);\n\n        this.maxDigits = maxDigits;\n    }\n\n    @Override\n    public String buildCommand() {\n        if (maxDigits == DEFAULT_MAX_DIGITS) {\n            if (timeout == DEFAULT_TIMEOUT) {\n                return \"GET DATA \" + escapeAndQuote(file);\n            }\n            return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n    }\n\n    private static void validateMaxDigits(int maxDigits) {\n        if (maxDigits < 1 || maxDigits > 1024) {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "AsteriskVersion",
                "org.asteriskjava"
            ],
            [
                "SimpleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidOrUnknownCommandException",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidCommandSyntaxException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServerThread",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiNetworkException",
                "org.asteriskjava.fastagi"
            ],
            [
                "MappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannelFactory",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiChannelImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiReplyImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "DefaultAgiChannelFactory",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiRequestImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "StaticMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "DefaultAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiHangupException",
                "org.asteriskjava.fastagi"
            ],
            [
                "CompositeMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiReply",
                "org.asteriskjava.fastagi.reply"
            ],
            [
                "SpeechRecognitionResult",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiOperations",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiRequest",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "ResourceBundleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "NamedAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "ScriptEngineMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiException",
                "org.asteriskjava.fastagi"
            ],
            [
                "ClassNameMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "QueueCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechLoadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDestroyCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechSetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ControlStreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabasePutCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelTreeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetFullVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ExecCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOffCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDateTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDigitsCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDeactivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetOptionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseGetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechUnloadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AnswerCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "WaitForDigitCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AbstractAgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayAlphaCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DialCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "MeetmeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "HangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechRecognizeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendImageCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayNumberCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "StreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AsyncAgiBreakCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetCallerIdCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "RecordFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "BridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ConfbridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetContextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveCharCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GosubCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetAutoHangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechActivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetDataCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "VerboseCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "TddModeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "NoopCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetPriorityCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechCreateCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ChannelStatusCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOnCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetExtensionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayPhoneticCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiReader",
                "org.asteriskjava.fastagi"
            ],
            [
                "BaseAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannel",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiSpeechException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiWriter",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "HtmlEventTracer",
                "org.asteriskjava.tools"
            ],
            [
                "LogFactory",
                "org.asteriskjava.util"
            ],
            [
                "DaemonThreadFactory",
                "org.asteriskjava.util"
            ],
            [
                "MixMonitorDirection",
                "org.asteriskjava.util"
            ],
            [
                "Base64",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "JavaLoggingLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "FastScannerCrNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScanner",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerFactory",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "Slf4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "LocationAwareWrapper",
                "org.asteriskjava.util.internal"
            ],
            [
                "ServerSocketFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "FileTrace",
                "org.asteriskjava.util.internal"
            ],
            [
                "Trace",
                "org.asteriskjava.util.internal"
            ],
            [
                "NullLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "Log4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "AstUtil",
                "org.asteriskjava.util"
            ],
            [
                "DateUtil",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacade",
                "org.asteriskjava.util"
            ],
            [
                "Log",
                "org.asteriskjava.util"
            ],
            [
                "AstState",
                "org.asteriskjava.util"
            ],
            [
                "ServerSocketFacade",
                "org.asteriskjava.util"
            ],
            [
                "ReflectionUtil",
                "org.asteriskjava.util"
            ],
            [
                "ConfigParseException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigDirective",
                "org.asteriskjava.config"
            ],
            [
                "ConfigElement",
                "org.asteriskjava.config"
            ],
            [
                "IncludeDirective",
                "org.asteriskjava.config"
            ],
            [
                "ExecDirective",
                "org.asteriskjava.config"
            ],
            [
                "Category",
                "org.asteriskjava.config"
            ],
            [
                "MissingDirectiveParameterException",
                "org.asteriskjava.config"
            ],
            [
                "ExtensionsConfigFileReader",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigInclude",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigExtension",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ExtensionsConfigFile",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigVariable",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileReader",
                "org.asteriskjava.config"
            ],
            [
                "MissingEqualSignException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFile",
                "org.asteriskjava.config"
            ],
            [
                "UnknownDirectiveException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.config"
            ],
            [
                "LockableSet",
                "org.asteriskjava.lock"
            ],
            [
                "Lockable",
                "org.asteriskjava.lock"
            ],
            [
                "LockableList",
                "org.asteriskjava.lock"
            ],
            [
                "Locker",
                "org.asteriskjava.lock"
            ],
            [
                "LockableMap",
                "org.asteriskjava.lock"
            ],
            [
                "AgiChannelActivityHangup",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "BlindTransferResultListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityDial",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ConfiguableAGIServer",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScript",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiMappingStragegy",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiConfiguration",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScriptImpl",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "DuplicateScriptException",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiChannelActivityHoldForBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityArrivalListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityTransientHoldSilence",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityQueue",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityHold",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityMeetme",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityPlayMessage",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityVoicemail",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityAgi",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBlindTransfer",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "CallStateAnswered",
                "org.asteriskjava.pbx"
            ],
            [
                "Activity",
                "org.asteriskjava.pbx"
            ],
            [
                "InvalidChannelName",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateData",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "PBX",
                "org.asteriskjava.pbx"
            ],
            [
                "CompletionAdaptor",
                "org.asteriskjava.pbx"
            ],
            [
                "AsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "LogTime",
                "org.asteriskjava.pbx.util"
            ],
            [
                "ManagerError",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "HangupAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "CommandAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelState",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEventHelper",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UserEvent",
                "org.asteriskjava.pbx.asterisk.wrap.userEvents"
            ],
            [
                "NewExtensionListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallImpl",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXException",
                "org.asteriskjava.pbx"
            ],
            [
                "DialPlanExtension",
                "org.asteriskjava.pbx"
            ],
            [
                "FilteredManagerListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerConnection",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallEndedListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerMonitor",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelProxy",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "FilteredManagerListenerWrapper",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "LiveChannelManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "AsteriskPBX",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerState",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "DialLocalToAgiActivity",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "Peer",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EndPointImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventQueue",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentEventFactory",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ActiveCallListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallTracker",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ListenerManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EventLifeMonitor",
                "org.asteriskjava.pbx.internal.eventQueue"
            ],
            [
                "EventListenerBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateResult",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "MonitorCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "DialToAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Connector",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateToExtension",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "HoldAtAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Dial",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectToMeetMe",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "NoMeetmeException",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DurationRoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "CallerIDImpl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoom",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "RoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoomControl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DialActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "HoldActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "DialToAgiActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "JoinActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BridgeActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ParkActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "SplitActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "RedirectToActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BlindTransferActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ActivityHelper",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ChannelHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataParked",
                "org.asteriskjava.pbx"
            ],
            [
                "ListenerPriority",
                "org.asteriskjava.pbx"
            ],
            [
                "Channel",
                "org.asteriskjava.pbx"
            ],
            [
                "Call",
                "org.asteriskjava.pbx"
            ],
            [
                "ChannelFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "Trunk",
                "org.asteriskjava.pbx"
            ],
            [
                "Tech",
                "org.asteriskjava.pbx"
            ],
            [
                "AgiChannelActivityAction",
                "org.asteriskjava.pbx"
            ],
            [
                "DefaultAsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "EndPoint",
                "org.asteriskjava.pbx"
            ],
            [
                "TechType",
                "org.asteriskjava.pbx"
            ],
            [
                "HoldActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BridgeActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "JoinActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "RedirectToActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "ParkActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BlindTransferActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "SplitActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialToAgiActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "NewChannelListener",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityCallback",
                "org.asteriskjava.pbx"
            ],
            [
                "CallHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "DTMFTone",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataNewInbound",
                "org.asteriskjava.pbx"
            ],
            [
                "PhoneNumber",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityStatusEnum",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataTransfer",
                "org.asteriskjava.pbx"
            ],
            [
                "CallDirection",
                "org.asteriskjava.pbx"
            ],
            [
                "CallerID",
                "org.asteriskjava.pbx"
            ],
            [
                "ManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerError",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxCountResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ChallengeResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ModuleCheckResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetVarResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreSettingsResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeBuddyResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetConfigResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ExtensionStateResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeLicenseStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SipShowPeerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "PingResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MixMonitorResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerConnectionState",
                "org.asteriskjava.manager"
            ],
            [
                "DefaultManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "EventAttributesHelper",
                "org.asteriskjava.manager.util"
            ],
            [
                "SendEventGeneratingActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnectionFactory",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerEventListenerProxy",
                "org.asteriskjava.manager"
            ],
            [
                "AbstractManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ExpectedResponse",
                "org.asteriskjava.manager"
            ],
            [
                "ResponseBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "BridgeEnterEventComparator",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgeState",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgesActive",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "MeetmeCompatibility",
                "org.asteriskjava.manager.internal.backwardsCompatibility.meetme"
            ],
            [
                "BackwardsCompatibilityForManagerEvents",
                "org.asteriskjava.manager.internal.backwardsCompatibility"
            ],
            [
                "EventBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReader",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriter",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerUtil",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerConnectionImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "EventBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "Dispatcher",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReaderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "AsyncEventPump",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseEventsImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ProtocolIdentifierWrapper",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriterImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "PingThread",
                "org.asteriskjava.manager"
            ],
            [
                "EventTimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbsoluteTimeoutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkedCallsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MessageSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIDeleteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VoicemailUsersListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddiesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIUpdateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowContactsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreSettingsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "IaxPeerListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentCallbackLoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapTransferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxCountAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeLockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapRestartAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VariableInheritance",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAddBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "HangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetCdrUserFieldAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ShowDialplanAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueSummaryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeRemoveBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAccountPropertyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOnAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgiAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueChangePriorityCallerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UpdateConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "EventsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExtensionStateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueRemoveAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeSetSingleVideoSrcAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePauseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListRoomsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExecAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStopRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePenaltyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "FilterAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueAddAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UnpauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDialOffhookAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueResetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChangeMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowRegistryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SendTextAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DahdiShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractMeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentLogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LocalOptimizeAwayAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnlockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CommandAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "JabberSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStartRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleSendSMSAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MuteAudioAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueLogAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleCheckAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapHangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleLoadAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelTreeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeChatSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueMemberRingInUseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSIPNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChallengeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbPutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AtxferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleShowDevicesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AsteriskMapping",
                "org.asteriskjava.manager"
            ],
            [
                "TimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "AuthenticationFailedException",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "DtmfEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SuccessfulAuthEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewConnectedLineEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeAccountStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPenaltyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractQueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AttendedTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueStatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ProtocolIdentifierReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DeviceStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentRingNoAnswerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeStopTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleDeviceEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleShowDevicesCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnpausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEnterEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxDocumentStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LogChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateSuccessEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FullyBootedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmClearEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerPushEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeChatMessageEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AntennaLevelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointList",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetailComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeMergeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractUnParkedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractConfbridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerRunEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MessageWaitingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtpStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidAccountId",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSBase64Event",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateFailureEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidPasswordEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnholdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JitterBufStatsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PriEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RequestBadFormatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeResponseFailedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DAHDIChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractAgentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CdrEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelUpdateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShowDialplanCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerAbandonEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "T38FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCENDEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JabberEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransportDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReceiveFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactList",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewCMGREvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberAddedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShutdownEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPauseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpReceiverStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UserEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallGiveUpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCallStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEnum",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeDestroyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMixMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PickupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberRemovedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "ModuleLoadReportEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AuthDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeCreateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeMuteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SoftHangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistrationsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AorDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeersEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewAccountCodeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpSenderStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ListDialplanEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtcpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueParamsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewCallerIdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallTimeOutEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentDumpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.manager"
            ],
            [
                "SendActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "Cli",
                "org.asteriskjava"
            ],
            [
                "ExampleCallIn",
                "org.asteriskjava.examples.fastagi"
            ],
            [
                "Hold",
                "org.asteriskjava.examples.activities"
            ],
            [
                "ExamplesAsteriskSettings",
                "org.asteriskjava.examples.activities"
            ],
            [
                "BlindTransfer",
                "org.asteriskjava.examples.activities"
            ],
            [
                "Dial",
                "org.asteriskjava.examples.activities"
            ],
            [
                "MeetMeUserState",
                "org.asteriskjava.live"
            ],
            [
                "MeetMeUser",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueEntry",
                "org.asteriskjava.live"
            ],
            [
                "SecureAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "Extension",
                "org.asteriskjava.live"
            ],
            [
                "ExtensionHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "AbstractAsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "RecordingException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelStateHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "QueueEntryState",
                "org.asteriskjava.live"
            ],
            [
                "LiveObject",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueue",
                "org.asteriskjava.live"
            ],
            [
                "LinkedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchChannelException",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchInterfaceException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelState",
                "org.asteriskjava.live"
            ],
            [
                "HangupCause",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgentImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueEntryImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeUserImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "QueueManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AgentManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueMemberImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "OriginateCallbackData",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskServerImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AbstractLiveObject",
                "org.asteriskjava.live.internal"
            ],
            [
                "ManagerCommunicationExceptionMapper",
                "org.asteriskjava.live.internal"
            ],
            [
                "CallDetailRecordImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoomImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "ChannelManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskChannelImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "Constants",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoom",
                "org.asteriskjava.live"
            ],
            [
                "AgentState",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskChannel",
                "org.asteriskjava.live"
            ],
            [
                "AmaFlags",
                "org.asteriskjava.live"
            ],
            [
                "Voicemailbox",
                "org.asteriskjava.live"
            ],
            [
                "QueueMemberState",
                "org.asteriskjava.live"
            ],
            [
                "DefaultAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueMember",
                "org.asteriskjava.live"
            ],
            [
                "LiveException",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "DialedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "CallDetailRecord",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgent",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueListener",
                "org.asteriskjava.live"
            ],
            [
                "Disposition",
                "org.asteriskjava.live"
            ],
            [
                "OriginateCallback",
                "org.asteriskjava.live"
            ],
            [
                "ManagerCommunicationException",
                "org.asteriskjava.live"
            ],
            [
                "CallerId",
                "org.asteriskjava.live"
            ],
            [
                "InvalidPenaltyException",
                "org.asteriskjava.live"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getDetermineVersionFromString",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Determine the Asterisk version from the string returned by Asterisk. The\n * string should contain \"Asterisk \" followed by a version number.\n *\n * @param coreLine\n * @return the detected version, or null if unknown\n */\npublic static AsteriskVersion getDetermineVersionFromString(String coreLine) {\n    for (AsteriskVersion version : knownVersions) {\n        for (Pattern pattern : version.patterns) {\n            if (pattern.matcher(coreLine).matches()) {\n                return version;\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "getChannel",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "/**\n * Returns the AgiChannel associated with the current thread.\n *\n * @return the AgiChannel associated with the current thread or\n * <code>null</code> if none is associated.\n */\npublic static AgiChannel getChannel() {\n    return AgiConnectionHandler.channel.get();\n}"
            ],
            [
                "getExtension",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * Returns the extension (the part after the last \".\") of the given script.\n *\n * @param scriptName the name of the script to return the extension of.\n * @return the extension of the script or <code>null</code> if there is no\n * extension.\n */\nprotected static String getExtension(String scriptName) {\n    if (scriptName == null) {\n        return null;\n    }\n    int filePosition = scriptName.lastIndexOf(\"/\");\n    String fileName;\n    if (scriptName.lastIndexOf(\"\\\\\") > filePosition) {\n        filePosition = scriptName.lastIndexOf(\"\\\\\");\n    }\n    if (filePosition >= 0) {\n        fileName = scriptName.substring(filePosition + 1);\n    } else {\n        fileName = scriptName;\n    }\n    final int extensionPosition = fileName.lastIndexOf(\".\");\n    if (extensionPosition >= 0) {\n        return fileName.substring(extensionPosition + 1);\n    }\n    return null;\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "protected static Reader getReader(File file) throws FileNotFoundException {\n    final InputStream is = new FileInputStream(file);\n    return new InputStreamReader(is, StandardCharsets.UTF_8);\n}"
            ],
            [
                "getLog",
                "org.asteriskjava.util",
                "LogFactory",
                "/**\n * Returns an instance of Log suitable for logging from the given class.\n *\n * @param clazz the class to create the logger for.\n * @return the created logger.\n */\npublic synchronized static Log getLog(Class<?> clazz) {\n    if (slf4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.slf4j.Logger\");\n            slf4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (slf4jLoggingAvailable) {\n        try {\n            return new Slf4JLogger(clazz);\n        } catch (Throwable e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.apache.logging.log4j.Logger\");\n            log4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            log4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable) {\n        return new Log4JLogger(clazz);\n    }\n    if (javaLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"java.util.logging.Logger\");\n            javaLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            javaLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (javaLoggingAvailable) {\n        return new JavaLoggingLog(clazz);\n    }\n    return new NullLog();\n}"
            ],
            [
                "byteArrayToBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into a Base64 string as per\n * Preferences.put(byte[]).\n */\npublic static String byteArrayToBase64(byte[] a) {\n    return byteArrayToBase64(a, false);\n}"
            ],
            [
                "byteArrayToAltBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into an \"alternate representation\"\n * Base64 string.  This non-standard variant uses an alphabet that does\n * not contain the uppercase alphabetic characters, which makes it\n * suitable for use in situations where case-folding occurs.\n */\npublic static String byteArrayToAltBase64(byte[] a) {\n    return byteArrayToBase64(a, true);\n}"
            ],
            [
                "base64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified Base64 string (as per Preferences.get(byte[]))\n * into a byte array.\n *\n * @throws IllegalArgumentException if <tt>s</tt> is not a valid Base64\n *                                  string.\n */\npublic static byte[] base64ToByteArray(String s) {\n    return base64ToByteArray(s, false);\n}"
            ],
            [
                "altBase64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified \"alternate representation\" Base64 string\n * into a byte array.\n *\n * @throws IllegalArgumentException or ArrayOutOfBoundsException\n *                                  if <tt>s</tt> is not a valid alternate representation\n *                                  Base64 string.\n */\npublic static byte[] altBase64ToByteArray(String s) {\n    return base64ToByteArray(s, true);\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.util.internal.streamreader",
                "FastScannerFactory",
                "public static FastScanner getReader(Readable reader, Pattern pattern) {\n    if (!useLegacyScanner) {\n        if (pattern.pattern().equals(\"\\r\\n\")) {\n            return new FastScannerCrNl(reader);\n        }\n        if (pattern.pattern().equals(\"\\n\")) {\n            return new FastScannerNl(reader);\n        }\n    }\n    // fall back to legacy Scanner\n    logger.warn(\"Using legacy scanner\");\n    Scanner scanner = new Scanner(reader);\n    scanner.useDelimiter(pattern);\n    return getWrappedScanner(scanner);\n}"
            ],
            [
                "isTrue",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if a String represents <code>true</code> or <code>false</code>\n * according to Asterisk's logic. <br>\n * The original implementation is <code>util.c</code> is as follows: <br>\n *\n * <pre>\n *     int ast_true(const char *s)\n *     {\n *         if (!s || ast_strlen_zero(s))\n *             return 0;\n * <br>\n *         if (!strcasecmp(s, &quot;yes&quot;) ||\n *             !strcasecmp(s, &quot;true&quot;) ||\n *             !strcasecmp(s, &quot;y&quot;) ||\n *             !strcasecmp(s, &quot;t&quot;) ||\n *             !strcasecmp(s, &quot;1&quot;) ||\n *             !strcasecmp(s, &quot;on&quot;))\n *             return -1;\n * <br>\n *         return 0;\n *     }\n * </pre>\n *\n * <br>\n * To support the dnd property of\n * {@link org.asteriskjava.manager.event.ZapShowChannelsEvent} this method\n * also consideres the string \"Enabled\" as true.\n *\n * @param o the Object (usually a String) to check for <code>true</code>.\n * @return <code>true</code> if s represents <code>true</code>,\n * <code>false</code> otherwise.\n */\npublic static boolean isTrue(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (o instanceof Boolean) {\n        return (Boolean) o;\n    }\n    return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n}"
            ],
            [
                "isEqual",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * @param a an object\n * @param b an object to be compared with {@code a} for equality\n * @return {@code true} if the arguments are equal to each other and\n * {@code false} otherwise\n */\npublic static boolean isEqual(Object a, Object b) {\n    return a == b || a != null && a.equals(b);\n}"
            ],
            [
                "parseCallerId",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Parses a string for caller id information. <br>\n * The caller id string should be in the form\n * <code>\"Some Name\" &lt;1234&gt;</code>. <br>\n * This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code>\n * but strips any whitespace.\n *\n * @param s the string to parse\n * @return a String[] with name (index 0) and number (index 1)\n */\npublic static String[] parseCallerId(String s) {\n    final String[] result = new String[2];\n    final int lbPosition;\n    final int rbPosition;\n    String name;\n    String number;\n    if (s == null) {\n        return result;\n    }\n    lbPosition = s.lastIndexOf('<');\n    rbPosition = s.lastIndexOf('>');\n    // no opening and closing brace? use value as CallerId name\n    if (lbPosition < 0 || rbPosition < 0) {\n        name = s.trim();\n        if (name.length() == 0) {\n            name = null;\n        }\n        result[0] = name;\n        return result;\n    }\n    number = s.substring(lbPosition + 1, rbPosition).trim();\n    if (number.length() == 0) {\n        number = null;\n    }\n    name = s.substring(0, lbPosition).trim();\n    if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1) {\n        name = name.substring(1, name.length() - 1).trim();\n    }\n    if (name.length() == 0) {\n        name = null;\n    }\n    result[0] = name;\n    result[1] = number;\n    return result;\n}"
            ],
            [
                "isNull",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if the value of s was <code>null</code> in Asterisk. <br>\n * This method is useful as Asterisk likes to replace <code>null</code>\n * values with different string values like \"unknown\", \"&lt;unknown&gt;\" or\n * \"&lt;null&gt;\". <br>\n * To find such replacements search for <code>S_OR</code> in Asterisk's\n * source code. You will find things like\n *\n * <pre>\n * S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\")\n * fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\"));\n * </pre>\n * <p>\n * and more...\n *\n * @param s the string to test, may be <code>null</code>. If s is not a\n *          string the only test that is performed is a check for\n *          <code>null</code>.\n * @return <code>true</code> if the s was <code>null</code> in Asterisk;\n * <code>false</code> otherwise.\n */\npublic static boolean isNull(Object s) {\n    if (s == null) {\n        return true;\n    }\n    if (!(s instanceof String)) {\n        return false;\n    }\n    return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n}"
            ],
            [
                "convertAsteriskBooleanStringToStandardBooleanString",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Converts a non-standard Asterisk boolean String value into something the Boolean class\n * String constructor recognizes.\n * <p>\n * Asterisk can return various strings that represent truth values.\n * This method converts them into standard True/False, or null if null.\n *\n * @param value\n * @return <code>true</code> if the String is \"true\" or \"yes\" (case insensitive).\n * <code>false</code> if the String is \"false\" or \"no\" (case insensitive).\n * <code>null</code> if the String is null.\n * @throws <code>IllegalArgumentException</code> if any other value not listed above.\n */\npublic static String convertAsteriskBooleanStringToStandardBooleanString(String value) {\n    if (value == null)\n        return null;\n    switch(value.toLowerCase()) {\n        case \"true\":\n        case \"yes\":\n            return \"True\";\n        case \"false\":\n        case \"no\":\n            return \"False\";\n        default:\n            throw new IllegalArgumentException(\"value of:\" + value + \" was not recognized as a boolean\");\n    }\n}"
            ],
            [
                "getDate",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Returns the real current date or the date set with overrideCurrentDate().\n *\n * @return the real current date or the date set with overrideCurrentDate().\n */\npublic static Date getDate() {\n    if (currentDate == null) {\n        return new Date();\n    }\n    return currentDate;\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the default time zone.\n *\n * @param s date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s) {\n    return parseDateTime(s, null);\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the given time zone.\n *\n * @param s  date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @param tz the timezone to use or <code>null</code> for the default time\n *           zone.\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s, TimeZone tz) {\n    DateFormat df;\n    if (s == null) {\n        return null;\n    }\n    df = new SimpleDateFormat(DATE_TIME_PATTERN);\n    if (tz != null) {\n        df.setTimeZone(tz);\n    }\n    try {\n        return df.parse(s);\n    } catch (ParseException e) {\n        return null;\n    }\n}"
            ],
            [
                "str2state",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.\n *\n * @param str state as a descriptive text.\n * @return numeric state.\n */\npublic static Integer str2state(String str) {\n    Integer state;\n    if (str == null) {\n        return null;\n    }\n    state = inverseStateMap.get(str);\n    if (state == null) {\n        Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n        if (matcher.matches()) {\n            try {\n                state = Integer.valueOf(matcher.group(1));\n            } catch (NumberFormatException e) {\n                // should not happen as the pattern requires \\d+ for the state.\n                throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n            }\n        }\n    }\n    return state;\n}"
            ],
            [
                "getGetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Returns a Map of getter methods of the given class.\n * <p>\n * The key of the map contains the name of the attribute that can be\n * accessed by the getter, the value the getter itself (an instance of\n * java.lang.reflect.Method). A method is considered a getter if its name\n * starts with \"get\", it is declared public and takes no arguments.\n *\n * @param clazz the class to return the getters for\n * @return a Map of attributes and their accessor methods (getters)\n */\npublic static Map<String, Method> getGetters(final Class<?> clazz) {\n    final Map<String, Method> accessors = new HashMap<>();\n    final Method[] methods = clazz.getMethods();\n    for (Method method : methods) {\n        String name = null;\n        String methodName = method.getName();\n        if (methodName.startsWith(\"get\")) {\n            name = methodName.substring(3);\n        } else if (methodName.startsWith(\"is\")) {\n            name = methodName.substring(2);\n        }\n        if (name == null || name.length() == 0) {\n            continue;\n        }\n        // skip methods with != 0 parameters\n        if (method.getParameterTypes().length != 0) {\n            continue;\n        }\n        accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n    }\n    return accessors;\n}"
            ],
            [
                "getSetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * The main benefit here is that there will not be repeated errors when\n * inspecting classes for setters on every single Event being processed.\n * <br>\n * <br>\n * While this method adds caching which is 100 times faster, the time\n * Benefit is largely insignificant as the execution time was already very\n * fast.\n *\n * @param clazz\n * @return\n */\npublic static Map<String, Method> getSetters(Class<?> clazz) {\n    return setterMap.computeIfAbsent(clazz, (c) -> {\n        return getSettersInternal(c);\n    });\n}"
            ],
            [
                "stripIllegalCharacters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Strips all illegal charaters from the given lower case string. Illegal\n * characters are all characters that are neither characters ('a' to 'z')\n * nor digits ('0' to '9').\n *\n * @param s the original string\n * @return the string with all illegal characters stripped\n */\npublic static String stripIllegalCharacters(String s) {\n    char c;\n    boolean needsStrip = false;\n    StringBuilder sb;\n    if (s == null) {\n        return null;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            // continue\n        } else // NOPMD\n        if (c >= 'a' && c <= 'z') {\n            // continue\n        } else // NOPMD\n        {\n            needsStrip = true;\n            break;\n        }\n    }\n    if (!needsStrip) {\n        return s;\n    }\n    sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sb.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "isClassAvailable",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Checks if the class is available on the current thread's context class\n * loader.\n *\n * @param s fully qualified name of the class to check.\n * @return <code>true</code> if the class is available, <code>false</code>\n * otherwise.\n */\npublic static boolean isClassAvailable(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        classLoader.loadClass(s);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}"
            ],
            [
                "newInstance",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Creates a new instance of the given class. The class is loaded using the\n * current thread's context class loader and instantiated using its default\n * constructor.\n *\n * @param s fully qualified name of the class to instantiate.\n * @return the new instance or <code>null</code> on failure.\n */\npublic static Object newInstance(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        Class<?> clazz = classLoader.loadClass(s);\n        Constructor<?> constructor = clazz.getConstructor();\n        return constructor.newInstance();\n    } catch (ClassNotFoundException e) {\n        return null;\n    } catch (IllegalAccessException e) {\n        return null;\n    } catch (InstantiationException e) {\n        return null;\n    } catch (NoSuchMethodException e) {\n        // no default constructor\n        return null;\n    } catch (InvocationTargetException e) {\n        // constructor threw an exception\n        return null;\n    }\n}"
            ],
            [
                "loadClasses",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * find and all non abstract classes that implement/extend\n * baseClassOrInterface in the package packageName\n *\n * @param packageName\n * @param baseClassOrInterface\n * @return\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface) {\n    Set<Class<T>> result = new HashSet<>();\n    try {\n        Set<String> classNames = getClassNamesFromPackage(packageName);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = classLoader.loadClass(packageName + \".\" + className);\n                if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz)) {\n                    result.add((Class<T>) clazz);\n                }\n            } catch (Throwable e) {\n                logger.error(e, e);\n            }\n        }\n        logger.info(\"Loaded \" + result.size());\n    } catch (Exception e) {\n        logger.error(e, e);\n    }\n    return result;\n}"
            ],
            [
                "doWithLock",
                "org.asteriskjava.lock",
                "Locker",
                "public static LockCloser doWithLock(final Lockable lockable) {\n    try {\n        if (diags) {\n            synchronized (sync) {\n                keepList.put(lockable.getLockableId(), lockable);\n            }\n            return lockWithDiags(lockable);\n        }\n        return simpleLock(lockable);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCaller",
                "org.asteriskjava.lock",
                "Locker",
                "/**\n * determine the caller to Locker\n *\n * @param lockable\n * @return\n */\nstatic String getCaller(Lockable lockable) {\n    StackTraceElement[] trace = new Exception().getStackTrace();\n    String name = lockable.getClass().getCanonicalName();\n    for (StackTraceElement element : trace) {\n        if (element.getFileName() != null && !element.getFileName().contains(Locker.class.getSimpleName())) {\n            name = element.getFileName() + \" \" + element.getMethodName() + \" \" + element.getLineNumber() + \" \" + element.getClassName();\n            break;\n        }\n    }\n    return name;\n}"
            ],
            [
                "addArrivalListener",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static AutoCloseable addArrivalListener(OriginateAction originate, ActivityArrivalListener listener) {\n    final String key = UUID.randomUUID().toString();\n    arrivalListeners.put(key, listener);\n    if (arrivalListeners.size() > 100) {\n        // pick one at random to remove\n        ActivityArrivalListener leaked = arrivalListeners.remove(arrivalListeners.keySet().iterator().next());\n        logger.error(\"Arrival Listeners are leaking\" + leaked.getClass().getCanonicalName());\n    }\n    Map<String, String> vars = new HashMap<>();\n    vars.put(\"_\" + ARRIVAL_KEY, key);\n    originate.setVariables(vars);\n    return new AutoCloseable() {\n\n        @Override\n        public void close() throws Exception {\n            arrivalListeners.remove(key);\n        }\n    };\n}"
            ],
            [
                "getActivePBX",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static PBX getActivePBX() {\n    return AsteriskPBX.SELF;\n}"
            ],
            [
                "getActiveProfile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static AsteriskSettings getActiveProfile() {\n    AsteriskSettings activeProfile = profile.get();\n    if (activeProfile == null) {\n        throw new RuntimeException(\"you must call setAsteriskSettings() before getActiveProfile() is called the first time\");\n    }\n    return activeProfile;\n}"
            ],
            [
                "valueOfDesc",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelState",
                "static ChannelState valueOfDesc(String description) {\n    ChannelState theState = null;\n    for (ChannelState aState : ChannelState.values()) {\n        if (aState._text.compareToIgnoreCase(description) == 0) {\n            theState = aState;\n            break;\n        }\n    }\n    return theState;\n}"
            ],
            [
                "registerChannel",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelEventHelper",
                "public static Channel registerChannel(final String channelName, final String uniqueId, final String callerIdNum, final String callerIdName) throws InvalidChannelName {\n    final AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n    final Channel channel = pbx.internalRegisterChannel(channelName, uniqueId);\n    channel.setCallerId(pbx.buildCallerID(callerIdNum, callerIdName));\n    return channel;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ExtensionStatusEvent",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "Status",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static synchronized CoherentManagerConnection getInstance() {\n    if (self == null)\n        throw new IllegalStateException(\"The CoherentManagerConnection has not been initialised\");\n    self.checkConnection();\n    return self;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction());\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, int timeout) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction(), timeout);\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Sends an Asterisk action and waits for a ManagerRespose.\n *\n * @param action\n * @param timeout timeout in milliseconds\n * @return\n * @throws IllegalArgumentException\n * @throws IllegalStateException\n * @throws IOException\n * @throws TimeoutException\n * @throws OperationNotSupportedException\n */\npublic static ManagerResponse sendAction(final ManagerAction action, final int timeout) throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException {\n    if (logger.isDebugEnabled())\n        CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString());\n    CoherentManagerConnection.getInstance();\n    if ((CoherentManagerConnection.managerConnection != null) && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED)) {\n        final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n        org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection.sendAction(ajAction, timeout);\n        ManagerResponse convertedResponse = null;\n        // UserEventActions always return a null\n        if (response != null)\n            convertedResponse = CoherentEventFactory.build(response);\n        if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0)) {\n            CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage());\n        }\n        return convertedResponse;\n    }\n    throw new IllegalStateException(\"not connected.\");\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "PeerMonitor",
                "public static synchronized PeerMonitor getInstance() {\n    if (PeerMonitor.self == null) {\n        //$NON-NLS-1$\n        throw new IllegalStateException(\"You must call PeerMonitor.init()\");\n    }\n    return PeerMonitor.self;\n}"
            ],
            [
                "getSIPADDHeader",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "static public String getSIPADDHeader(final boolean inherit, final boolean targetIsSIP) {\n    //$NON-NLS-1$\n    String sipHeader = \"SIPADDHEADER\";\n    if (!targetIsSIP || inherit) {\n        //$NON-NLS-1$\n        sipHeader = \"__\" + sipHeader;\n    }\n    return sipHeader;\n}"
            ],
            [
                "valueByName",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByName(final String value) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(value) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    return status;\n}"
            ],
            [
                "valueByChannelState",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByChannelState(final ChannelState state) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(state.name()) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    if (status == NOTSET)\n        //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        logger.warn(\"Unknown channelState: \" + state + \" recieved\", new Throwable(\"Unknown channelState\"));\n    return status;\n}"
            ],
            [
                "getShadowEvent",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static Class<? extends ManagerEvent> getShadowEvent(org.asteriskjava.manager.event.ManagerEvent event) {\n    Class<? extends ManagerEvent> result = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (result == null) {\n        Class<? extends ResponseEvent> response = CoherentEventFactory.mapResponses.get(event.getClass());\n        result = response;\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerEvent build(final org.asteriskjava.manager.event.ManagerEvent event) {\n    ManagerEvent iEvent = null;\n    Class<? extends ManagerEvent> target = null;\n    if (event instanceof org.asteriskjava.manager.event.ResponseEvent)\n        target = CoherentEventFactory.mapResponses.get(event.getClass());\n    else\n        target = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            iEvent = target.getDeclaredConstructor(event.getClass()).newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return iEvent;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ResponseEvent build(org.asteriskjava.manager.event.ResponseEvent event) {\n    ResponseEvent response = null;\n    final Class<? extends ResponseEvent> target = CoherentEventFactory.mapResponses.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            final Constructor<? extends ResponseEvent> declaredConstructor = target.getDeclaredConstructor(event.getClass());\n            response = declaredConstructor.newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return response;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerResponse build(org.asteriskjava.manager.response.ManagerResponse response) {\n    ManagerResponse result;\n    if (response instanceof org.asteriskjava.manager.response.CommandResponse) {\n        result = new CommandResponse(response);\n    } else if (response instanceof org.asteriskjava.manager.response.ManagerError) {\n        result = new ManagerError(response);\n    } else {\n        result = new ManagerResponse(response);\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static org.asteriskjava.manager.action.ManagerAction build(ManagerAction action) {\n    org.asteriskjava.manager.action.ManagerAction result = null;\n    // final Class<? extends org.asteriskjava.manager.action.ManagerAction>\n    // target = CoherentEventFactory.mapActions.get(action.getClass());\n    if (logger.isDebugEnabled())\n        //$NON-NLS-1$\n        logger.debug(\"Action \" + action);\n    // if (target == null)\n    // {\n    // logger.warn(\"The given action \" + action.getClass().getName() + \" is\n    // not supported \"); //$NON-NLS-1$ //$NON-NLS-2$\n    // }\n    // else\n    {\n        result = action.getAJAction();\n    }\n    return result;\n}"
            ],
            [
                "buildFromComponents",
                "org.asteriskjava.pbx.internal.asterisk",
                "CallerIDImpl",
                "/**\n * This is a little helper class which will buid the name component of a\n * clid from the first and lastnames. If both firstname and lastname are\n * null then the name component will be an empty string.\n *\n * @param firstname the person's firstname, may be null.\n * @param lastname  the person's lastname, may be null\n * @param number    the phone number.\n * @return\n */\npublic static CallerID buildFromComponents(final String firstname, final String lastname, final String number) {\n    //$NON-NLS-1$\n    String name = \"\";\n    if (firstname != null) {\n        name += firstname.trim();\n    }\n    if (lastname != null) {\n        if (name.length() > 0) {\n            //$NON-NLS-1$\n            name += \" \";\n        }\n        name += lastname.trim();\n    }\n    return PBXFactory.getActivePBX().buildCallerID(number, name);\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.asterisk",
                "MeetmeRoomControl",
                "public static MeetmeRoomControl getInstance() {\n    if (MeetmeRoomControl.self.get() == null) {\n        throw new IllegalStateException(//$NON-NLS-1$\n        \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\");\n    }\n    return MeetmeRoomControl.self.get();\n}"
            ],
            [
                "getNextChannelId",
                "org.asteriskjava.pbx",
                "ChannelFactory",
                "public static long getNextChannelId() {\n    return nextChannelId.incrementAndGet();\n}"
            ],
            [
                "getTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * Extracts the technology from a fully qualified endpoint string of the form:\n * TECH/NNNN\n *\n * @param fullyQualifiedEndPoint\n * @return\n */\npublic static TechType getTech(final String fullyQualifiedEndPoint) {\n    if (!TechType.hasValidTech(fullyQualifiedEndPoint)) {\n        throw new IllegalArgumentException(//$NON-NLS-1$\n        \"The provided end point '\" + fullyQualifiedEndPoint + //$NON-NLS-1$\n        \"' must contain a tech prefix. e.g. SIP/100\");\n    }\n    //$NON-NLS-1$\n    final String techName = fullyQualifiedEndPoint.substring(0, fullyQualifiedEndPoint.indexOf(\"/\"));\n    return TechType.valueOf(techName.toUpperCase());\n}"
            ],
            [
                "hasValidTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a valid tech descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasValidTech(final String endPointName) {\n    TechType tech = UNKNOWN;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index >= 1) {\n        final String techName = endPointName.substring(0, index);\n        try {\n            tech = TechType.valueOf(techName.toUpperCase());\n        } catch (final IllegalArgumentException e) {\n            //$NON-NLS-1$\n            TechType.logger.error(\"Invalid tech for endpoint:\" + endPointName);\n        }\n    }\n    return tech != UNKNOWN;\n}"
            ],
            [
                "hasTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a tech descriptor even if it isn't\n * a known descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasTech(final String endPointName) {\n    boolean hasTech = false;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index != -1) {\n        hasTech = true;\n    }\n    return hasTech;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx",
                "CallDirection",
                "public static CallDirection valueOf(final int dbValue) {\n    CallDirection result = null;\n    for (final CallDirection direction : CallDirection.values()) {\n        if (direction.dbValue == dbValue) {\n            result = direction;\n            break;\n        }\n    }\n    return result;\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "ManagerEventListenerProxy",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "Access",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "toHexString",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Converts a byte array to a hex string representing it. The hex digits are\n * lower case.\n *\n * @param b the byte array to convert\n * @return the hex representation of b\n */\npublic static String toHexString(byte[] b) {\n    final StringBuilder sb;\n    sb = new StringBuilder(b.length * 2);\n    for (byte aB : b) {\n        sb.append(hexChar[(aB & 0xf0) >>> 4]);\n        sb.append(hexChar[aB & 0x0f]);\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Returns the internal action id contained in the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the internal action id that has been added before.\n * @see #addInternalActionId(String, String)\n */\npublic static String getInternalActionId(String actionId) {\n    final int delimiterIndex;\n    if (actionId == null) {\n        return null;\n    }\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        return actionId.substring(0, delimiterIndex);\n    }\n    return null;\n}"
            ],
            [
                "stripInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Strips the internal action id from the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the original action id, that is the action id as it was before\n * the internal action id was added.\n * @see #addInternalActionId(String, String)\n */\npublic static String stripInternalActionId(String actionId) {\n    int delimiterIndex;\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        if (actionId.length() > delimiterIndex + 1) {\n            return actionId.substring(delimiterIndex + 1);\n        }\n        return null;\n    }\n    return null;\n}"
            ],
            [
                "addInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Adds the internal action id to the given action id.\n *\n * @param actionId         the action id as set by the user.\n * @param internalActionId the internal action id to add.\n * @return the action id prefixed by the internal action id suitable to be\n * sent to Asterisk.\n */\npublic static String addInternalActionId(String actionId, String internalActionId) {\n    if (actionId == null) {\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n    }\n    return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n}"
            ],
            [
                "determineSetterName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineSetterName(String getterName) {\n    if (getterName.startsWith(\"get\")) {\n        return \"set\" + getterName.substring(3);\n    } else if (getterName.startsWith(\"is\")) {\n        return \"set\" + getterName.substring(2);\n    } else {\n        throw new IllegalArgumentException(\"Getter '\" + getterName + \"' doesn't start with either 'get' or 'is'\");\n    }\n}"
            ],
            [
                "determineFieldName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineFieldName(String accessorName) {\n    if (accessorName.startsWith(\"get\")) {\n        return lcFirst(accessorName.substring(3));\n    } else if (accessorName.startsWith(\"is\")) {\n        return lcFirst(accessorName.substring(2));\n    } else if (accessorName.startsWith(\"set\")) {\n        return lcFirst(accessorName.substring(3));\n    } else {\n        throw new IllegalArgumentException(\"Accessor '\" + accessorName + \"' doesn't start with either 'get', 'is' or 'set'\");\n    }\n}"
            ],
            [
                "getSerialVersionUID",
                "org.asteriskjava.manager.event",
                "InvalidAccountId",
                "public static long getSerialVersionUID() {\n    return serialVersionUID;\n}"
            ],
            [
                "getSerialversionuid",
                "org.asteriskjava.manager.event",
                "TransportDetail",
                "public static long getSerialversionuid() {\n    return serialVersionUID;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "ChannelState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.AbstractChannelStateEvent#getChannelState()}.\n *\n * @param status integer representation of the status.\n * @return corresponding ChannelState object or <code>null</code> if none matches.\n */\npublic static ChannelState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (ChannelState tmp : ChannelState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "getByCode",
                "org.asteriskjava.live",
                "HangupCause",
                "/**\n * Returns the HangupCode by its numeric cause code.<p>\n * Using this method in client code is discouraged.\n *\n * @param code the numeric cause code.\n * @return the corresponding HangupCode enum or\n * <code>null</code> if there is no such HangupCause.\n */\npublic static synchronized HangupCause getByCode(int code) {\n    if (causes == null) {\n        causes = new HashMap<>();\n        for (HangupCause cause : values()) {\n            causes.put(cause.code, cause);\n        }\n    }\n    return causes.get(code);\n}"
            ],
            [
                "mapSendActionException",
                "org.asteriskjava.live.internal",
                "ManagerCommunicationExceptionMapper",
                "/**\n * Maps exceptions received from\n * {@link org.asteriskjava.manager.ManagerConnection} when sending a\n * {@link org.asteriskjava.manager.action.ManagerAction} to the corresponding\n * {@link org.asteriskjava.live.ManagerCommunicationException}.\n *\n * @param actionName name of the action that has been tried to send\n * @param exception  exception received\n * @return the corresponding ManagerCommunicationException\n */\nstatic ManagerCommunicationException mapSendActionException(String actionName, Exception exception) {\n    if (exception instanceof IllegalStateException) {\n        return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n    } else if (exception instanceof EventTimeoutException) {\n        return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n    } else {\n        return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n    }\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "QueueMemberState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.QueueMemberEvent#getStatus()}.\n *\n * @param status integer representation of the status.\n * @return corresponding QueueMemberState object or <code>null</code> if none matches.\n */\npublic static QueueMemberState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (QueueMemberState tmp : QueueMemberState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "CallerId",
                "/**\n * Parses a caller id string in the form\n * <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.\n *\n * @param s the caller id string to parse.\n * @return the corresponding CallerId object which is never <code>null</code>.\n * @see AstUtil#parseCallerId(String)\n */\npublic static CallerId valueOf(String s) {\n    final String[] parsedCallerId;\n    parsedCallerId = AstUtil.parseCallerId(s);\n    return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "ASTERISK_1_0",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.0 series.\n */\npublic static final AsteriskVersion ASTERISK_1_0 = new AsteriskVersion(100, \"Asterisk 1.0\");"
            ],
            [
                "ASTERISK_1_2",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.2 series.\n */\npublic static final AsteriskVersion ASTERISK_1_2 = new AsteriskVersion(120, \"Asterisk 1.2\");"
            ],
            [
                "ASTERISK_1_4",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.4 series.\n *\n * @since 0.3\n */\npublic static final AsteriskVersion ASTERISK_1_4 = new AsteriskVersion(140, \"Asterisk 1.4\");"
            ],
            [
                "ASTERISK_1_6",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.6 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_6 = new AsteriskVersion(160, \"Asterisk 1.6\");"
            ],
            [
                "ASTERISK_1_8",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.8 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_8 = new AsteriskVersion(180, \"Asterisk 1.8\");"
            ],
            [
                "ASTERISK_10",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 10 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_10 = new AsteriskVersion(1000, \"Asterisk 10\");"
            ],
            [
                "ASTERISK_11",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 11 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_11 = new AsteriskVersion(1100, \"Asterisk 11\");"
            ],
            [
                "ASTERISK_12",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 12 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_12 = new AsteriskVersion(1200, \"Asterisk 12\");"
            ],
            [
                "ASTERISK_13",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 13 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_13 = new AsteriskVersion(1300, \"Asterisk 13\", VERSION_PATTERN_13, VERSION_PATTERN_CERTIFIED_13);"
            ],
            [
                "ASTERISK_14",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 14 series.\n *\n * @since 1.1.0\n */\npublic static final AsteriskVersion ASTERISK_14 = new AsteriskVersion(1400, \"Asterisk 14\", VERSION_PATTERN_14);"
            ],
            [
                "ASTERISK_15",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 15 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_15 = new AsteriskVersion(1500, \"Asterisk 15\", VERSION_PATTERN_15);"
            ],
            [
                "ASTERISK_16",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 16 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_16 = new AsteriskVersion(1600, \"Asterisk 16\", VERSION_PATTERN_16, VERSION_PATTERN_CERTIFIED_16);"
            ],
            [
                "ASTERISK_17",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 17 series.\n *\n * @since 3.7.0\n */\npublic static final AsteriskVersion ASTERISK_17 = new AsteriskVersion(1700, \"Asterisk 17\", VERSION_PATTERN_17);"
            ],
            [
                "ASTERISK_18",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 18 series.\n *\n * @since 3.13.0\n */\npublic static final AsteriskVersion ASTERISK_18 = new AsteriskVersion(1800, \"Asterisk 18\", VERSION_PATTERN_18, VERSION_PATTERN_CERTIFIED_18);"
            ],
            [
                "ASTERISK_19",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 19 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_19 = new AsteriskVersion(1900, \"Asterisk 19\", VERSION_PATTERN_19);"
            ],
            [
                "ASTERISK_20",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 20 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_20 = new AsteriskVersion(2000, \"Asterisk 20\", VERSION_PATTERN_20);"
            ],
            [
                "DEFAULT_VERSION",
                "org.asteriskjava",
                "AsteriskVersion",
                "// current debian stable version, as of 09/10/2018\npublic static final AsteriskVersion DEFAULT_VERSION = ASTERISK_16;"
            ],
            [
                "AGI_CONNECTION_HANDLERS",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "public static final ConcurrentMap<AgiConnectionHandler, AgiChannel> AGI_CONNECTION_HANDLERS = new ConcurrentHashMap<>(32);"
            ],
            [
                "REQUEST",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI request is made available to scripts.\n */\npublic static final String REQUEST = \"request\";"
            ],
            [
                "CHANNEL",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI channel is made available to scripts.\n */\npublic static final String CHANNEL = \"channel\";"
            ],
            [
                "CRNL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern CRNL_PATTERN = Pattern.compile(\"\\r\\n\");"
            ],
            [
                "NL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern NL_PATTERN = Pattern.compile(\"\\n\");"
            ],
            [
                "MAX_SOCKET_READ_TIMEOUT_MILLIS",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "/**\n * 3 hrs = 3 * 3660 * 1000\n */\npublic static final int MAX_SOCKET_READ_TIMEOUT_MILLIS = 10800000;"
            ],
            [
                "FQCN",
                "org.asteriskjava.util.internal",
                "Slf4JLogger",
                "static String FQCN = Slf4JLogger.class.getName();"
            ],
            [
                "TRACE_DIRECTORY_PROPERTY",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "public static final String TRACE_DIRECTORY_PROPERTY = \"org.asteriskjava.trace.directory\";"
            ],
            [
                "FILE_PREFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_PREFIX = \"aj-trace\";"
            ],
            [
                "FILE_SUFFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_SUFFIX = \".txt\";"
            ],
            [
                "AST_STATE_DOWN",
                "org.asteriskjava.util",
                "AstState",
                "/* from include/asterisk/channel.h */\n/**\n * Channel is down and available.\n */\npublic static final int AST_STATE_DOWN = 0;"
            ],
            [
                "AST_STATE_RSRVD",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is down, but reserved.\n */\npublic static final int AST_STATE_RSRVD = 1;"
            ],
            [
                "AST_STATE_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is off hook.\n */\npublic static final int AST_STATE_OFFHOOK = 2;"
            ],
            [
                "AST_STATE_DIALING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed.\n */\npublic static final int AST_STATE_DIALING = 3;"
            ],
            [
                "AST_STATE_RING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is ringing.\n */\npublic static final int AST_STATE_RING = 4;"
            ],
            [
                "AST_STATE_RINGING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Remote end is ringing.\n */\npublic static final int AST_STATE_RINGING = 5;"
            ],
            [
                "AST_STATE_UP",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is up.\n */\npublic static final int AST_STATE_UP = 6;"
            ],
            [
                "AST_STATE_BUSY",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is busy.\n */\npublic static final int AST_STATE_BUSY = 7;"
            ],
            [
                "AST_STATE_DIALING_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed while offhook.\n */\npublic static final int AST_STATE_DIALING_OFFHOOK = 8;"
            ],
            [
                "AST_STATE_PRERING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel has detected an incoming call and is waiting for ring.\n */\npublic static final int AST_STATE_PRERING = 9;"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.agi.config",
                "ServiceAgiScriptImpl",
                "static transient Log logger = LogFactory.getLog(ServiceAgiScriptImpl.class);"
            ],
            [
                "ARRIVAL_KEY",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static final String ARRIVAL_KEY = \"ActivityAgiArrivalKey\";"
            ],
            [
                "profile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "final static AtomicReference<AsteriskSettings> profile = new AtomicReference<>();"
            ],
            [
                "eventStatistics",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "static Map<String, Integer> eventStatistics = new HashMap<>();"
            ],
            [
                "connector",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Used to instantiate the manager connection including the initial login.\n */\nstatic Connector connector = null;"
            ],
            [
                "managerConnection",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * The actual manager connection. AJ actually maintains two socket\n * connections one for reading events and the other writing events.\n */\nstatic ManagerConnection managerConnection = null;"
            ],
            [
                "ACTIVITY_AGI",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "public static final String ACTIVITY_AGI = \"activityAgi\";"
            ],
            [
                "mapEvents",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Events\nstatic Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();"
            ],
            [
                "mapResponses",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Response\nstatic Hashtable<Class<? extends org.asteriskjava.manager.event.ResponseEvent>, Class<? extends ResponseEvent>> mapResponses = new Hashtable<>();"
            ],
            [
                "ZOMBIE",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String ZOMBIE = \"<ZOMBIE>\";"
            ],
            [
                "MASQ",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String MASQ = \"<MASQ>\";"
            ],
            [
                "UNKNOWN_UNIQUE_ID",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String UNKNOWN_UNIQUE_ID = \"-1\";"
            ],
            [
                "_actions",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\npublic static final String[] _actions = new String[] { \"PARKED/\", \"ASYNCGOTO/\", \"BRIDGE/\" };"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.internal.managerAPI",
                "OriginateBaseClass",
                "/*\n     * this class generates and issues ActionEvents to asterisk through the\n     * manager. This is the asterisk coal face.\n     */\nprotected static final Log logger = LogFactory.getLog(OriginateBaseClass.class);"
            ],
            [
                "INTERNAL_ACTION_ID_DELIMITER",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "public static final char INTERNAL_ACTION_ID_DELIMITER = '#';"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbsoluteTimeoutAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 3073237188819825503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LogoffAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7576797478570238525L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreShowChannelsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIDeleteAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddiesAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIUpdateAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "GetConfigAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreSettingsAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "OriginateAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxCountAction",
                "static final long serialVersionUID = -6900421919824575941L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "RedirectAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1869279324159418150L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAddBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "HangupAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeRemoveBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbstractManagerAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -7667827187378395689L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "PROPERTY_SKYPENAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_SKYPENAME = \"skypename\";"
            ],
            [
                "PROPERTY_TIMEZONE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_TIMEZONE = \"timezone\";"
            ],
            [
                "PROPERTY_AVAILABILITY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_AVAILABILITY = \"availability\";"
            ],
            [
                "PROPERTY_FULLNAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_FULLNAME = \"fullname\";"
            ],
            [
                "PROPERTY_LANGUAGE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_LANGUAGE = \"language\";"
            ],
            [
                "PROPERTY_COUNTRY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_COUNTRY = \"country\";"
            ],
            [
                "PROPERTY_PHONE_HOME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_HOME = \"phone_home\";"
            ],
            [
                "PROPERTY_PHONE_OFFICE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_OFFICE = \"phone_office\";"
            ],
            [
                "PROPERTY_PHONE_MOBILE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_MOBILE = \"phone_mobile\";"
            ],
            [
                "PROPERTY_ABOUT",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_ABOUT = \"about\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgiAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgentsAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -320228893513973367L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "ACTION_NEWCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/* Actions accepted by commands in the sequence */\npublic static final String ACTION_NEWCAT = \"NewCat\";"
            ],
            [
                "ACTION_RENAMECAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_RENAMECAT = \"RenameCat\";"
            ],
            [
                "ACTION_DELCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELCAT = \"DelCat\";"
            ],
            [
                "ACTION_UPDATE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_UPDATE = \"Update\";"
            ],
            [
                "ACTION_DELETE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELETE = \"Delete\";"
            ],
            [
                "ACTION_APPEND",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_APPEND = \"Append\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "EventsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -8042435402644984875L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExtensionStateAction",
                "static final long serialVersionUID = 6537408784388696403L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExecAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "FilterAction",
                "static final long serialVersionUID = 5537508784388696503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseStatusAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxStatusAction",
                "static final long serialVersionUID = -3845028207155711950L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseListAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CommandAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "DongleSendSMSAction",
                "static final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleCheckAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LoginAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -2600694249339115032L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "SUBSYSTEM_CDR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_CDR = \"cdr\";"
            ],
            [
                "SUBSYSTEM_ENUM",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_ENUM = \"enum\";"
            ],
            [
                "SUBSYSTEM_DNSMGR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_DNSMGR = \"dnsmgr\";"
            ],
            [
                "SUBSYSTEM_EXTCONFIG",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_EXTCONFIG = \"extconfig\";"
            ],
            [
                "SUBSYSTEM_MANAGER",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_MANAGER = \"manager\";"
            ],
            [
                "SUBSYSTEM_RTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_RTP = \"rtp\";"
            ],
            [
                "SUBSYSTEM_HTTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_HTTP = \"http\";"
            ],
            [
                "LOAD_TYPE_LOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_LOAD = \"load\";"
            ],
            [
                "LOAD_TYPE_UNLOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_UNLOAD = \"unload\";"
            ],
            [
                "LOAD_TYPE_RELOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_RELOAD = \"reload\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeChatSendAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreStatusAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "StatusAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ChallengeAction",
                "static final long serialVersionUID = 7240516124871953971L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AtxferAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "STATUS_LOGGED_IN",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_IN = \"Logged In\";"
            ],
            [
                "STATUS_LOGGED_OUT",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_OUT = \"Logged Out\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREGISTERED = \"Unregistered\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_LAGGED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_LAGGED = \"Lagged\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -0L;"
            ],
            [
                "CEL_EVENT_CHAN_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_START = \"CHAN_START\";"
            ],
            [
                "CEL_EVENT_CHAN_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_END = \"CHAN_END\";"
            ],
            [
                "CEL_EVENT_ANSWER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ANSWER = \"ANSWER\";"
            ],
            [
                "CEL_EVENT_HANGUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_HANGUP = \"HANGUP\";"
            ],
            [
                "CEL_EVENT_BRIDGE_ENTER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_ENTER = \"BRIDGE_ENTER\";"
            ],
            [
                "CEL_EVENT_BRIDGE_EXIT",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_EXIT = \"BRIDGE_EXIT\";"
            ],
            [
                "CEL_EVENT_APP_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_START = \"APP_START\";"
            ],
            [
                "CEL_EVENT_APP_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_END = \"APP_END\";"
            ],
            [
                "CEL_EVENT_PARK_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_START = \"PARK_START\";"
            ],
            [
                "CEL_EVENT_PARK_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_END = \"PARK_END\";"
            ],
            [
                "CEL_EVENT_BLINDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BLINDTRANSFER = \"BLINDTRANSFER\";"
            ],
            [
                "CEL_EVENT_ATTENDEDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ATTENDEDTRANSFER = \"ATTENDEDTRANSFER\";"
            ],
            [
                "CEL_EVENT_PICKUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PICKUP = \"PICKUP\";"
            ],
            [
                "CEL_EVENT_FORWARD",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_FORWARD = \"FORWARD\";"
            ],
            [
                "CEL_EVENT_LINKEDID_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LINKEDID_END = \"LINKEDID_END\";"
            ],
            [
                "CEL_EVENT_LOCAL_OPTIMIZE",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LOCAL_OPTIMIZE = \"LOCAL_OPTIMIZE\";"
            ],
            [
                "CEL_EVENT_USER_DEFINED",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_USER_DEFINED = \"USER_DEFINED\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "MasqueradeEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DndStateEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "AST_DEVICE_UNKNOWN",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNKNOWN = 0;"
            ],
            [
                "AST_DEVICE_NOT_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "/**\n * Queue member is available.\n */\npublic static final int AST_DEVICE_NOT_INUSE = 1;"
            ],
            [
                "AST_DEVICE_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INUSE = 2;"
            ],
            [
                "AST_DEVICE_BUSY",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_BUSY = 3;"
            ],
            [
                "AST_DEVICE_INVALID",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INVALID = 4;"
            ],
            [
                "AST_DEVICE_UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNAVAILABLE = 5;"
            ],
            [
                "AST_DEVICE_RINGING",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGING = 6;"
            ],
            [
                "AST_DEVICE_RINGINUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGINUSE = 7;"
            ],
            [
                "AST_DEVICE_ONHOLD",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_ONHOLD = 8;"
            ],
            [
                "MEMBERSHIP_STATIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_STATIC = \"static\";"
            ],
            [
                "MEMBERSHIP_DYNAMIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_DYNAMIC = \"dynamic\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "MODULE_MANAGER",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_MANAGER = \"Manager\";"
            ],
            [
                "MODULE_CDR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_CDR = \"CDR\";"
            ],
            [
                "MODULE_DNS_MGR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_DNS_MGR = \"DNSmgr\";"
            ],
            [
                "MODULE_RTP",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_RTP = \"RTP\";"
            ],
            [
                "MODULE_ENUM",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_ENUM = \"ENUM\";"
            ],
            [
                "STATUS_ENABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_ENABLED = \"Enabled\";"
            ],
            [
                "STATUS_DISABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_DISABLED = \"Disabled\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "QueueEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -8554382298783676181L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnlinkEvent",
                "/**\n * Serial version identifier.\n */\nstatic final long serialVersionUID = -2943257621137870024L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LogChannelEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 650153034857116588L;"
            ],
            [
                "AGENT_STATUS_LOGGEDOFF",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent isn't logged in.\n */\npublic static final String AGENT_STATUS_LOGGEDOFF = \"AGENT_LOGGEDOFF\";"
            ],
            [
                "AGENT_STATUS_IDLE",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and waiting for call.\n */\npublic static final String AGENT_STATUS_IDLE = \"AGENT_IDLE\";"
            ],
            [
                "AGENT_STATUS_ONCALL",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and on a call.\n */\npublic static final String AGENT_STATUS_ONCALL = \"AGENT_ONCALL\";"
            ],
            [
                "AGENT_STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Don't know anything about agent. Shouldn't ever get this.\n */\npublic static final String AGENT_STATUS_UNKNOWN = \"AGENT_UNKNOWN\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "BUDDYSTATUS_WAITAUTHORIZATION",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_WAITAUTHORIZATION = \"Waiting for Authorization\";"
            ],
            [
                "BUDDYSTATUS_BLOCKED",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKED = \"Blocked\";"
            ],
            [
                "BUDDYSTATUS_BLOCKEDSKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKEDSKYPEOUT = \"Blocked Skypout\";"
            ],
            [
                "BUDDYSTATUS_SKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEOUT = \"Skypeout\";"
            ],
            [
                "BUDDYSTATUS_OFFLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINE = \"Offline\";"
            ],
            [
                "BUDDYSTATUS_ONLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_ONLINE = \"Online\";"
            ],
            [
                "BUDDYSTATUSS_AWAY",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUSS_AWAY = \"Away\";"
            ],
            [
                "BUDDYSTATUS_NOTAVAILABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_NOTAVAILABLE = \"Not Available\";"
            ],
            [
                "BUDDYSTATUS_DONTDISTURB",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_DONTDISTURB = \"Do Not Disturb\";"
            ],
            [
                "BUDDYSTATUS_SKYPEME",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEME = \"Skype Me\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEVOICEENABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEVOICEENABLE = \"Offline (Voicemail Enabled)\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEFORWARDENABLEL",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEFORWARDENABLEL = \"Offline (Call Forwarding Enabled)\";"
            ],
            [
                "BUDDYSTATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerPushEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "VarSetEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LinkEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -4023240534975776225L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerRunEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewExtenEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -467486409866099387L;"
            ],
            [
                "REASON_LOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been loaded for the first time.\n */\npublic static final String REASON_LOAD = \"LOAD\";"
            ],
            [
                "REASON_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded.\n */\npublic static final String REASON_RELOAD = \"RELOAD\";"
            ],
            [
                "REASON_CLI_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded from the command line.\n */\npublic static final String REASON_CLI_RELOAD = \"CLIRELOAD\";"
            ],
            [
                "REASON_MANAGER_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded due to a manager action.\n */\npublic static final String REASON_MANAGER_RELOAD = \"MANAGERRELOAD\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LeaveEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7450401017732634240L;"
            ],
            [
                "STATUS_CREATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_CREATED = \"Created\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_REMOVED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REMOVED = \"Removed\";"
            ],
            [
                "STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_UPDATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UPDATED = \"Updated\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnholdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ManagerEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 2L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "DISPOSITION_NO_ANSWER",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_NO_ANSWER = \"NO ANSWER\";"
            ],
            [
                "DISPOSITION_FAILED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_FAILED = \"FAILED\";"
            ],
            [
                "DISPOSITION_BUSY",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_BUSY = \"BUSY\";"
            ],
            [
                "DISPOSITION_ANSWERED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_ANSWERED = \"ANSWERED\";"
            ],
            [
                "DISPOSITION_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_UNKNOWN = \"UNKNOWN\";"
            ],
            [
                "AMA_FLAG_OMIT",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_OMIT = \"OMIT\";"
            ],
            [
                "AMA_FLAG_BILLING",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_BILLING = \"BILLING\";"
            ],
            [
                "AMA_FLAG_DOCUMENTATION",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_DOCUMENTATION = \"DOCUMENTATION\";"
            ],
            [
                "AMA_FLAG_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "CoreShowChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "JoinEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "NOT_INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * No device INUSE or BUSY.\n */\npublic static final int NOT_INUSE = 0;"
            ],
            [
                "INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices INUSE.\n */\npublic static final int INUSE = 1;"
            ],
            [
                "BUSY",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices BUSY.\n */\npublic static final int BUSY = 1 << 1;"
            ],
            [
                "UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices UNAVAILABLE/UNREGISTERED.\n */\npublic static final int UNAVAILABLE = 1 << 2;"
            ],
            [
                "RINGING",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices RINGING.\n */\npublic static final int RINGING = 1 << 3;"
            ],
            [
                "TRANSFER_METHOD_SIP",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_METHOD_SIP = \"SIP\";"
            ],
            [
                "TRANSFER_TYPE_ATTENDED",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_ATTENDED = \"Attended\";"
            ],
            [
                "TRANSFER_TYPE_BLIND",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_BLIND = \"Blind\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ShutdownEvent",
                "/**\n * Serial version identifier\n */\nstatic final long serialVersionUID = 2028136082664018423L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has started.\n */\npublic static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has finished.\n */\npublic static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "RenameEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 3400165738000349767L;"
            ],
            [
                "STATE_START",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_START = \"Start\";"
            ],
            [
                "STATE_STOP",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_STOP = \"Stop\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_EXEC",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_EXEC = \"Exec\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "CHANNEL_TYPE_SIP",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_SIP = \"SIP\";"
            ],
            [
                "CHANNEL_TYPE_IAX",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_IAX = \"IAX\";"
            ],
            [
                "MODULE_SELECTION_PRELOAD",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_PRELOAD = \"Preload\";"
            ],
            [
                "MODULE_SELECTION_ALL",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_ALL = \"All\";"
            ],
            [
                "MODULE_LOAD_STATUS_DONE",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_LOAD_STATUS_DONE = \"Done\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "SoftHangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewCallerIdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 6639570533512201213L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LocalBridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "RESPONSE_FAILED",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_FAILED = \"Failed\";"
            ],
            [
                "RESPONSE_SUCCESS",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_SUCCESS = \"Success\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "BRIDGE_STATE_LINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_LINK = \"Link\";"
            ],
            [
                "BRIDGE_STATE_UNLINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_UNLINK = \"Unlink\";"
            ],
            [
                "BRIDGE_TYPE_CORE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A <code>channel.c</code> bridge.\n */\npublic static final String BRIDGE_TYPE_CORE = \"core\";"
            ],
            [
                "BRIDGE_TYPE_RTP_NATIVE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP native bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_NATIVE = \"rtp-native\";"
            ],
            [
                "BRIDGE_TYPE_RTP_DIRECT",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP peer-2-peer bridge (NAT support only).\n */\npublic static final String BRIDGE_TYPE_RTP_DIRECT = \"rtp-direct\";"
            ],
            [
                "BRIDGE_TYPE_RTP_REMOTE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A remote (re-invite) bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_REMOTE = \"rtp-remote\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREGISTERED = \"Registered\";"
            ],
            [
                "STATUS_REQUEST_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REQUEST_SENT = \"Request Sent\";"
            ],
            [
                "STATUS_AUTH_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_AUTH_SENT = \"Auth. Sent\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "STATUS_TIMEOUT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_TIMEOUT = \"Timeout\";"
            ],
            [
                "STATUS_NO_AUTHENTICATION",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_NO_AUTHENTICATION = \"No Authentication\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "PT_SENDER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a sender report.\n */\npublic static final int PT_SENDER_REPORT = 200;"
            ],
            [
                "PT_RECEIVER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a receiver report.\n */\npublic static final int PT_RECEIVER_REPORT = 201;"
            ],
            [
                "PT_H261_FUR",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "public static final int PT_H261_FUR = 192;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "DIRECTION_RECEIVED",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_RECEIVED = \"Received\";"
            ],
            [
                "DIRECTION_SENT",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_SENT = \"Sent\";"
            ],
            [
                "SUBEVENT_BEGIN",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_BEGIN = \"Begin\";"
            ],
            [
                "SUBEVENT_END",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_END = \"End\";"
            ],
            [
                "DIALSTATUS_CHANUNAVAIL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CHANUNAVAIL = \"CHANUNAVAIL\";"
            ],
            [
                "DIALSTATUS_CONGESTION",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CONGESTION = \"CONGESTION\";"
            ],
            [
                "DIALSTATUS_NOANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_NOANSWER = \"NOANSWER\";"
            ],
            [
                "DIALSTATUS_BUSY",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_BUSY = \"BUSY\";"
            ],
            [
                "DIALSTATUS_ANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_ANSWER = \"ANSWER\";"
            ],
            [
                "DIALSTATUS_CANCEL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CANCEL = \"CANCEL\";"
            ],
            [
                "DIALSTATUS_DONTCALL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_DONTCALL = \"DONTCALL\";"
            ],
            [
                "DIALSTATUS_TORTURE",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_TORTURE = \"TORTURE\";"
            ],
            [
                "DIALSTATUS_INVALIDARGS",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_INVALIDARGS = \"INVALIDARGS\";"
            ],
            [
                "VARIABLE_TRACE_ID",
                "org.asteriskjava.live.internal",
                "Constants",
                "static final String VARIABLE_TRACE_ID = \"AJ_TRACE_ID\";"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1024",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1024",
                "int"
            ],
            [
                "\"ludicrous time\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "file",
                "java.lang",
                "String"
            ],
            [
                "timeout",
                "",
                "long"
            ],
            [
                "maxDigits",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String[] arg0)"
            ],
            [
                "getAsteriskVersion",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "AsteriskVersion getAsteriskVersion()"
            ],
            [
                "getFile",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the name of the file to stream.\n *\n * @return the name of the file to stream.\n */\npublic String getFile() {\n    return file;\n}"
            ],
            [
                "getMaxDigits",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the maximum number of digits to read.\n *\n * @return the maximum number of digits to read.\n */\npublic int getMaxDigits() {\n    return maxDigits;\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "buildCommand",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "@Override\npublic String buildCommand() {\n    if (maxDigits == DEFAULT_MAX_DIGITS) {\n        if (timeout == DEFAULT_TIMEOUT) {\n            return \"GET DATA \" + escapeAndQuote(file);\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n    }\n    return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n}"
            ],
            [
                "toString",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getTimeout",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the timeout to wait for data.\n *\n * @return the timeout in milliseconds to wait for data.\n */\npublic long getTimeout() {\n    return timeout;\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26705,
        "oracle": "timeout >= -1;",
        "oracleType": "PRE",
        "projectName": "asterisk-java",
        "packageName": "org.asteriskjava.fastagi.command",
        "className": "GetDataCommand",
        "javadocTag": "@param timeout the timeout in milliseconds to wait for data.\n                 <p>\n                 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).",
        "methodJavadoc": "    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */",
        "methodSourceCode": "public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException{\n    super();\n    validateMaxDigits(maxDigits);\n    this.file = file;\n    this.timeout = timeout;\n    this.maxDigits = maxDigits;\n}",
        "classJavadoc": "/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */",
        "classSourceCode": "/*\n *  Copyright 2004-2006 Stefan Reuter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.asteriskjava.fastagi.command;\n\n/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */\npublic class GetDataCommand extends AbstractAgiCommand {\n    private static final long serialVersionUID = 3978141041352128820L;\n\n    private static final int DEFAULT_TIMEOUT = 0;\n    private static final int DEFAULT_MAX_DIGITS = 1024;\n\n    /**\n     * The name of the file to stream.\n     */\n    private String file;\n\n    /**\n     * The timeout in milliseconds to wait for data.\n     * <p>\n     * 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    private long timeout;\n\n    /**\n     * The maximum number of digits to read.\n     * <p>\n     * Must be in [1..1024].\n     */\n    private int maxDigits;\n\n    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public GetDataCommand(String file) {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public GetDataCommand(String file, long timeout) {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException {\n        super();\n        validateMaxDigits(maxDigits);\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }\n\n    /**\n     * Returns the name of the file to stream.\n     *\n     * @return the name of the file to stream.\n     */\n    public String getFile() {\n        return file;\n    }\n\n    /**\n     * Sets the name of the file to stream.\n     * <p>\n     * This attribute is mandatory.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    /**\n     * Returns the timeout to wait for data.\n     *\n     * @return the timeout in milliseconds to wait for data.\n     */\n    public long getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Sets the timeout to wait for data.\n     *\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * Returns the maximum number of digits to read.\n     *\n     * @return the maximum number of digits to read.\n     */\n    public int getMaxDigits() {\n        return maxDigits;\n    }\n\n    /**\n     * Sets the maximum number of digits to read.\n     *\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public void setMaxDigits(int maxDigits) throws IllegalArgumentException {\n        validateMaxDigits(maxDigits);\n\n        this.maxDigits = maxDigits;\n    }\n\n    @Override\n    public String buildCommand() {\n        if (maxDigits == DEFAULT_MAX_DIGITS) {\n            if (timeout == DEFAULT_TIMEOUT) {\n                return \"GET DATA \" + escapeAndQuote(file);\n            }\n            return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n    }\n\n    private static void validateMaxDigits(int maxDigits) {\n        if (maxDigits < 1 || maxDigits > 1024) {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "AsteriskVersion",
                "org.asteriskjava"
            ],
            [
                "SimpleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidOrUnknownCommandException",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidCommandSyntaxException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServerThread",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiNetworkException",
                "org.asteriskjava.fastagi"
            ],
            [
                "MappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannelFactory",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiChannelImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiReplyImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "DefaultAgiChannelFactory",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiRequestImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "StaticMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "DefaultAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiHangupException",
                "org.asteriskjava.fastagi"
            ],
            [
                "CompositeMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiReply",
                "org.asteriskjava.fastagi.reply"
            ],
            [
                "SpeechRecognitionResult",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiOperations",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiRequest",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "ResourceBundleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "NamedAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "ScriptEngineMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiException",
                "org.asteriskjava.fastagi"
            ],
            [
                "ClassNameMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "QueueCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechLoadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDestroyCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechSetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ControlStreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabasePutCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelTreeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetFullVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ExecCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOffCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDateTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDigitsCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDeactivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetOptionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseGetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechUnloadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AnswerCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "WaitForDigitCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AbstractAgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayAlphaCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DialCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "MeetmeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "HangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechRecognizeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendImageCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayNumberCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "StreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AsyncAgiBreakCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetCallerIdCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "RecordFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "BridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ConfbridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetContextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveCharCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GosubCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetAutoHangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechActivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetDataCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "VerboseCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "TddModeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "NoopCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetPriorityCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechCreateCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ChannelStatusCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOnCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetExtensionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayPhoneticCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiReader",
                "org.asteriskjava.fastagi"
            ],
            [
                "BaseAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannel",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiSpeechException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiWriter",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "HtmlEventTracer",
                "org.asteriskjava.tools"
            ],
            [
                "LogFactory",
                "org.asteriskjava.util"
            ],
            [
                "DaemonThreadFactory",
                "org.asteriskjava.util"
            ],
            [
                "MixMonitorDirection",
                "org.asteriskjava.util"
            ],
            [
                "Base64",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "JavaLoggingLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "FastScannerCrNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScanner",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerFactory",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "Slf4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "LocationAwareWrapper",
                "org.asteriskjava.util.internal"
            ],
            [
                "ServerSocketFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "FileTrace",
                "org.asteriskjava.util.internal"
            ],
            [
                "Trace",
                "org.asteriskjava.util.internal"
            ],
            [
                "NullLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "Log4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "AstUtil",
                "org.asteriskjava.util"
            ],
            [
                "DateUtil",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacade",
                "org.asteriskjava.util"
            ],
            [
                "Log",
                "org.asteriskjava.util"
            ],
            [
                "AstState",
                "org.asteriskjava.util"
            ],
            [
                "ServerSocketFacade",
                "org.asteriskjava.util"
            ],
            [
                "ReflectionUtil",
                "org.asteriskjava.util"
            ],
            [
                "ConfigParseException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigDirective",
                "org.asteriskjava.config"
            ],
            [
                "ConfigElement",
                "org.asteriskjava.config"
            ],
            [
                "IncludeDirective",
                "org.asteriskjava.config"
            ],
            [
                "ExecDirective",
                "org.asteriskjava.config"
            ],
            [
                "Category",
                "org.asteriskjava.config"
            ],
            [
                "MissingDirectiveParameterException",
                "org.asteriskjava.config"
            ],
            [
                "ExtensionsConfigFileReader",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigInclude",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigExtension",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ExtensionsConfigFile",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigVariable",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileReader",
                "org.asteriskjava.config"
            ],
            [
                "MissingEqualSignException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFile",
                "org.asteriskjava.config"
            ],
            [
                "UnknownDirectiveException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.config"
            ],
            [
                "LockableSet",
                "org.asteriskjava.lock"
            ],
            [
                "Lockable",
                "org.asteriskjava.lock"
            ],
            [
                "LockableList",
                "org.asteriskjava.lock"
            ],
            [
                "Locker",
                "org.asteriskjava.lock"
            ],
            [
                "LockableMap",
                "org.asteriskjava.lock"
            ],
            [
                "AgiChannelActivityHangup",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "BlindTransferResultListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityDial",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ConfiguableAGIServer",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScript",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiMappingStragegy",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiConfiguration",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScriptImpl",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "DuplicateScriptException",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiChannelActivityHoldForBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityArrivalListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityTransientHoldSilence",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityQueue",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityHold",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityMeetme",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityPlayMessage",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityVoicemail",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityAgi",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBlindTransfer",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "CallStateAnswered",
                "org.asteriskjava.pbx"
            ],
            [
                "Activity",
                "org.asteriskjava.pbx"
            ],
            [
                "InvalidChannelName",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateData",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "PBX",
                "org.asteriskjava.pbx"
            ],
            [
                "CompletionAdaptor",
                "org.asteriskjava.pbx"
            ],
            [
                "AsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "LogTime",
                "org.asteriskjava.pbx.util"
            ],
            [
                "ManagerError",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "HangupAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "CommandAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelState",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEventHelper",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UserEvent",
                "org.asteriskjava.pbx.asterisk.wrap.userEvents"
            ],
            [
                "NewExtensionListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallImpl",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXException",
                "org.asteriskjava.pbx"
            ],
            [
                "DialPlanExtension",
                "org.asteriskjava.pbx"
            ],
            [
                "FilteredManagerListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerConnection",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallEndedListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerMonitor",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelProxy",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "FilteredManagerListenerWrapper",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "LiveChannelManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "AsteriskPBX",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerState",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "DialLocalToAgiActivity",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "Peer",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EndPointImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventQueue",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentEventFactory",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ActiveCallListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallTracker",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ListenerManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EventLifeMonitor",
                "org.asteriskjava.pbx.internal.eventQueue"
            ],
            [
                "EventListenerBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateResult",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "MonitorCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "DialToAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Connector",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateToExtension",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "HoldAtAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Dial",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectToMeetMe",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "NoMeetmeException",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DurationRoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "CallerIDImpl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoom",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "RoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoomControl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DialActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "HoldActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "DialToAgiActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "JoinActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BridgeActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ParkActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "SplitActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "RedirectToActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BlindTransferActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ActivityHelper",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ChannelHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataParked",
                "org.asteriskjava.pbx"
            ],
            [
                "ListenerPriority",
                "org.asteriskjava.pbx"
            ],
            [
                "Channel",
                "org.asteriskjava.pbx"
            ],
            [
                "Call",
                "org.asteriskjava.pbx"
            ],
            [
                "ChannelFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "Trunk",
                "org.asteriskjava.pbx"
            ],
            [
                "Tech",
                "org.asteriskjava.pbx"
            ],
            [
                "AgiChannelActivityAction",
                "org.asteriskjava.pbx"
            ],
            [
                "DefaultAsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "EndPoint",
                "org.asteriskjava.pbx"
            ],
            [
                "TechType",
                "org.asteriskjava.pbx"
            ],
            [
                "HoldActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BridgeActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "JoinActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "RedirectToActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "ParkActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BlindTransferActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "SplitActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialToAgiActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "NewChannelListener",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityCallback",
                "org.asteriskjava.pbx"
            ],
            [
                "CallHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "DTMFTone",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataNewInbound",
                "org.asteriskjava.pbx"
            ],
            [
                "PhoneNumber",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityStatusEnum",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataTransfer",
                "org.asteriskjava.pbx"
            ],
            [
                "CallDirection",
                "org.asteriskjava.pbx"
            ],
            [
                "CallerID",
                "org.asteriskjava.pbx"
            ],
            [
                "ManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerError",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxCountResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ChallengeResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ModuleCheckResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetVarResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreSettingsResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeBuddyResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetConfigResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ExtensionStateResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeLicenseStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SipShowPeerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "PingResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MixMonitorResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerConnectionState",
                "org.asteriskjava.manager"
            ],
            [
                "DefaultManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "EventAttributesHelper",
                "org.asteriskjava.manager.util"
            ],
            [
                "SendEventGeneratingActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnectionFactory",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerEventListenerProxy",
                "org.asteriskjava.manager"
            ],
            [
                "AbstractManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ExpectedResponse",
                "org.asteriskjava.manager"
            ],
            [
                "ResponseBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "BridgeEnterEventComparator",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgeState",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgesActive",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "MeetmeCompatibility",
                "org.asteriskjava.manager.internal.backwardsCompatibility.meetme"
            ],
            [
                "BackwardsCompatibilityForManagerEvents",
                "org.asteriskjava.manager.internal.backwardsCompatibility"
            ],
            [
                "EventBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReader",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriter",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerUtil",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerConnectionImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "EventBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "Dispatcher",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReaderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "AsyncEventPump",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseEventsImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ProtocolIdentifierWrapper",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriterImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "PingThread",
                "org.asteriskjava.manager"
            ],
            [
                "EventTimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbsoluteTimeoutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkedCallsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MessageSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIDeleteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VoicemailUsersListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddiesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIUpdateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowContactsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreSettingsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "IaxPeerListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentCallbackLoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapTransferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxCountAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeLockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapRestartAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VariableInheritance",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAddBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "HangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetCdrUserFieldAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ShowDialplanAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueSummaryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeRemoveBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAccountPropertyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOnAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgiAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueChangePriorityCallerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UpdateConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "EventsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExtensionStateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueRemoveAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeSetSingleVideoSrcAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePauseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListRoomsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExecAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStopRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePenaltyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "FilterAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueAddAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UnpauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDialOffhookAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueResetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChangeMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowRegistryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SendTextAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DahdiShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractMeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentLogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LocalOptimizeAwayAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnlockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CommandAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "JabberSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStartRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleSendSMSAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MuteAudioAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueLogAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleCheckAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapHangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleLoadAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelTreeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeChatSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueMemberRingInUseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSIPNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChallengeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbPutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AtxferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleShowDevicesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AsteriskMapping",
                "org.asteriskjava.manager"
            ],
            [
                "TimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "AuthenticationFailedException",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "DtmfEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SuccessfulAuthEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewConnectedLineEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeAccountStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPenaltyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractQueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AttendedTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueStatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ProtocolIdentifierReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DeviceStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentRingNoAnswerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeStopTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleDeviceEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleShowDevicesCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnpausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEnterEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxDocumentStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LogChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateSuccessEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FullyBootedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmClearEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerPushEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeChatMessageEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AntennaLevelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointList",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetailComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeMergeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractUnParkedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractConfbridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerRunEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MessageWaitingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtpStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidAccountId",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSBase64Event",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateFailureEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidPasswordEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnholdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JitterBufStatsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PriEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RequestBadFormatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeResponseFailedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DAHDIChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractAgentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CdrEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelUpdateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShowDialplanCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerAbandonEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "T38FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCENDEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JabberEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransportDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReceiveFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactList",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewCMGREvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberAddedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShutdownEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPauseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpReceiverStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UserEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallGiveUpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCallStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEnum",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeDestroyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMixMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PickupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberRemovedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "ModuleLoadReportEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AuthDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeCreateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeMuteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SoftHangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistrationsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AorDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeersEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewAccountCodeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpSenderStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ListDialplanEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtcpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueParamsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewCallerIdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallTimeOutEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentDumpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.manager"
            ],
            [
                "SendActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "Cli",
                "org.asteriskjava"
            ],
            [
                "ExampleCallIn",
                "org.asteriskjava.examples.fastagi"
            ],
            [
                "Hold",
                "org.asteriskjava.examples.activities"
            ],
            [
                "ExamplesAsteriskSettings",
                "org.asteriskjava.examples.activities"
            ],
            [
                "BlindTransfer",
                "org.asteriskjava.examples.activities"
            ],
            [
                "Dial",
                "org.asteriskjava.examples.activities"
            ],
            [
                "MeetMeUserState",
                "org.asteriskjava.live"
            ],
            [
                "MeetMeUser",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueEntry",
                "org.asteriskjava.live"
            ],
            [
                "SecureAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "Extension",
                "org.asteriskjava.live"
            ],
            [
                "ExtensionHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "AbstractAsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "RecordingException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelStateHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "QueueEntryState",
                "org.asteriskjava.live"
            ],
            [
                "LiveObject",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueue",
                "org.asteriskjava.live"
            ],
            [
                "LinkedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchChannelException",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchInterfaceException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelState",
                "org.asteriskjava.live"
            ],
            [
                "HangupCause",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgentImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueEntryImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeUserImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "QueueManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AgentManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueMemberImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "OriginateCallbackData",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskServerImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AbstractLiveObject",
                "org.asteriskjava.live.internal"
            ],
            [
                "ManagerCommunicationExceptionMapper",
                "org.asteriskjava.live.internal"
            ],
            [
                "CallDetailRecordImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoomImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "ChannelManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskChannelImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "Constants",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoom",
                "org.asteriskjava.live"
            ],
            [
                "AgentState",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskChannel",
                "org.asteriskjava.live"
            ],
            [
                "AmaFlags",
                "org.asteriskjava.live"
            ],
            [
                "Voicemailbox",
                "org.asteriskjava.live"
            ],
            [
                "QueueMemberState",
                "org.asteriskjava.live"
            ],
            [
                "DefaultAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueMember",
                "org.asteriskjava.live"
            ],
            [
                "LiveException",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "DialedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "CallDetailRecord",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgent",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueListener",
                "org.asteriskjava.live"
            ],
            [
                "Disposition",
                "org.asteriskjava.live"
            ],
            [
                "OriginateCallback",
                "org.asteriskjava.live"
            ],
            [
                "ManagerCommunicationException",
                "org.asteriskjava.live"
            ],
            [
                "CallerId",
                "org.asteriskjava.live"
            ],
            [
                "InvalidPenaltyException",
                "org.asteriskjava.live"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getDetermineVersionFromString",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Determine the Asterisk version from the string returned by Asterisk. The\n * string should contain \"Asterisk \" followed by a version number.\n *\n * @param coreLine\n * @return the detected version, or null if unknown\n */\npublic static AsteriskVersion getDetermineVersionFromString(String coreLine) {\n    for (AsteriskVersion version : knownVersions) {\n        for (Pattern pattern : version.patterns) {\n            if (pattern.matcher(coreLine).matches()) {\n                return version;\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "getChannel",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "/**\n * Returns the AgiChannel associated with the current thread.\n *\n * @return the AgiChannel associated with the current thread or\n * <code>null</code> if none is associated.\n */\npublic static AgiChannel getChannel() {\n    return AgiConnectionHandler.channel.get();\n}"
            ],
            [
                "getExtension",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * Returns the extension (the part after the last \".\") of the given script.\n *\n * @param scriptName the name of the script to return the extension of.\n * @return the extension of the script or <code>null</code> if there is no\n * extension.\n */\nprotected static String getExtension(String scriptName) {\n    if (scriptName == null) {\n        return null;\n    }\n    int filePosition = scriptName.lastIndexOf(\"/\");\n    String fileName;\n    if (scriptName.lastIndexOf(\"\\\\\") > filePosition) {\n        filePosition = scriptName.lastIndexOf(\"\\\\\");\n    }\n    if (filePosition >= 0) {\n        fileName = scriptName.substring(filePosition + 1);\n    } else {\n        fileName = scriptName;\n    }\n    final int extensionPosition = fileName.lastIndexOf(\".\");\n    if (extensionPosition >= 0) {\n        return fileName.substring(extensionPosition + 1);\n    }\n    return null;\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "protected static Reader getReader(File file) throws FileNotFoundException {\n    final InputStream is = new FileInputStream(file);\n    return new InputStreamReader(is, StandardCharsets.UTF_8);\n}"
            ],
            [
                "getLog",
                "org.asteriskjava.util",
                "LogFactory",
                "/**\n * Returns an instance of Log suitable for logging from the given class.\n *\n * @param clazz the class to create the logger for.\n * @return the created logger.\n */\npublic synchronized static Log getLog(Class<?> clazz) {\n    if (slf4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.slf4j.Logger\");\n            slf4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (slf4jLoggingAvailable) {\n        try {\n            return new Slf4JLogger(clazz);\n        } catch (Throwable e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.apache.logging.log4j.Logger\");\n            log4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            log4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable) {\n        return new Log4JLogger(clazz);\n    }\n    if (javaLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"java.util.logging.Logger\");\n            javaLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            javaLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (javaLoggingAvailable) {\n        return new JavaLoggingLog(clazz);\n    }\n    return new NullLog();\n}"
            ],
            [
                "byteArrayToBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into a Base64 string as per\n * Preferences.put(byte[]).\n */\npublic static String byteArrayToBase64(byte[] a) {\n    return byteArrayToBase64(a, false);\n}"
            ],
            [
                "byteArrayToAltBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into an \"alternate representation\"\n * Base64 string.  This non-standard variant uses an alphabet that does\n * not contain the uppercase alphabetic characters, which makes it\n * suitable for use in situations where case-folding occurs.\n */\npublic static String byteArrayToAltBase64(byte[] a) {\n    return byteArrayToBase64(a, true);\n}"
            ],
            [
                "base64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified Base64 string (as per Preferences.get(byte[]))\n * into a byte array.\n *\n * @throws IllegalArgumentException if <tt>s</tt> is not a valid Base64\n *                                  string.\n */\npublic static byte[] base64ToByteArray(String s) {\n    return base64ToByteArray(s, false);\n}"
            ],
            [
                "altBase64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified \"alternate representation\" Base64 string\n * into a byte array.\n *\n * @throws IllegalArgumentException or ArrayOutOfBoundsException\n *                                  if <tt>s</tt> is not a valid alternate representation\n *                                  Base64 string.\n */\npublic static byte[] altBase64ToByteArray(String s) {\n    return base64ToByteArray(s, true);\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.util.internal.streamreader",
                "FastScannerFactory",
                "public static FastScanner getReader(Readable reader, Pattern pattern) {\n    if (!useLegacyScanner) {\n        if (pattern.pattern().equals(\"\\r\\n\")) {\n            return new FastScannerCrNl(reader);\n        }\n        if (pattern.pattern().equals(\"\\n\")) {\n            return new FastScannerNl(reader);\n        }\n    }\n    // fall back to legacy Scanner\n    logger.warn(\"Using legacy scanner\");\n    Scanner scanner = new Scanner(reader);\n    scanner.useDelimiter(pattern);\n    return getWrappedScanner(scanner);\n}"
            ],
            [
                "isTrue",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if a String represents <code>true</code> or <code>false</code>\n * according to Asterisk's logic. <br>\n * The original implementation is <code>util.c</code> is as follows: <br>\n *\n * <pre>\n *     int ast_true(const char *s)\n *     {\n *         if (!s || ast_strlen_zero(s))\n *             return 0;\n * <br>\n *         if (!strcasecmp(s, &quot;yes&quot;) ||\n *             !strcasecmp(s, &quot;true&quot;) ||\n *             !strcasecmp(s, &quot;y&quot;) ||\n *             !strcasecmp(s, &quot;t&quot;) ||\n *             !strcasecmp(s, &quot;1&quot;) ||\n *             !strcasecmp(s, &quot;on&quot;))\n *             return -1;\n * <br>\n *         return 0;\n *     }\n * </pre>\n *\n * <br>\n * To support the dnd property of\n * {@link org.asteriskjava.manager.event.ZapShowChannelsEvent} this method\n * also consideres the string \"Enabled\" as true.\n *\n * @param o the Object (usually a String) to check for <code>true</code>.\n * @return <code>true</code> if s represents <code>true</code>,\n * <code>false</code> otherwise.\n */\npublic static boolean isTrue(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (o instanceof Boolean) {\n        return (Boolean) o;\n    }\n    return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n}"
            ],
            [
                "isEqual",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * @param a an object\n * @param b an object to be compared with {@code a} for equality\n * @return {@code true} if the arguments are equal to each other and\n * {@code false} otherwise\n */\npublic static boolean isEqual(Object a, Object b) {\n    return a == b || a != null && a.equals(b);\n}"
            ],
            [
                "parseCallerId",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Parses a string for caller id information. <br>\n * The caller id string should be in the form\n * <code>\"Some Name\" &lt;1234&gt;</code>. <br>\n * This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code>\n * but strips any whitespace.\n *\n * @param s the string to parse\n * @return a String[] with name (index 0) and number (index 1)\n */\npublic static String[] parseCallerId(String s) {\n    final String[] result = new String[2];\n    final int lbPosition;\n    final int rbPosition;\n    String name;\n    String number;\n    if (s == null) {\n        return result;\n    }\n    lbPosition = s.lastIndexOf('<');\n    rbPosition = s.lastIndexOf('>');\n    // no opening and closing brace? use value as CallerId name\n    if (lbPosition < 0 || rbPosition < 0) {\n        name = s.trim();\n        if (name.length() == 0) {\n            name = null;\n        }\n        result[0] = name;\n        return result;\n    }\n    number = s.substring(lbPosition + 1, rbPosition).trim();\n    if (number.length() == 0) {\n        number = null;\n    }\n    name = s.substring(0, lbPosition).trim();\n    if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1) {\n        name = name.substring(1, name.length() - 1).trim();\n    }\n    if (name.length() == 0) {\n        name = null;\n    }\n    result[0] = name;\n    result[1] = number;\n    return result;\n}"
            ],
            [
                "isNull",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if the value of s was <code>null</code> in Asterisk. <br>\n * This method is useful as Asterisk likes to replace <code>null</code>\n * values with different string values like \"unknown\", \"&lt;unknown&gt;\" or\n * \"&lt;null&gt;\". <br>\n * To find such replacements search for <code>S_OR</code> in Asterisk's\n * source code. You will find things like\n *\n * <pre>\n * S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\")\n * fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\"));\n * </pre>\n * <p>\n * and more...\n *\n * @param s the string to test, may be <code>null</code>. If s is not a\n *          string the only test that is performed is a check for\n *          <code>null</code>.\n * @return <code>true</code> if the s was <code>null</code> in Asterisk;\n * <code>false</code> otherwise.\n */\npublic static boolean isNull(Object s) {\n    if (s == null) {\n        return true;\n    }\n    if (!(s instanceof String)) {\n        return false;\n    }\n    return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n}"
            ],
            [
                "convertAsteriskBooleanStringToStandardBooleanString",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Converts a non-standard Asterisk boolean String value into something the Boolean class\n * String constructor recognizes.\n * <p>\n * Asterisk can return various strings that represent truth values.\n * This method converts them into standard True/False, or null if null.\n *\n * @param value\n * @return <code>true</code> if the String is \"true\" or \"yes\" (case insensitive).\n * <code>false</code> if the String is \"false\" or \"no\" (case insensitive).\n * <code>null</code> if the String is null.\n * @throws <code>IllegalArgumentException</code> if any other value not listed above.\n */\npublic static String convertAsteriskBooleanStringToStandardBooleanString(String value) {\n    if (value == null)\n        return null;\n    switch(value.toLowerCase()) {\n        case \"true\":\n        case \"yes\":\n            return \"True\";\n        case \"false\":\n        case \"no\":\n            return \"False\";\n        default:\n            throw new IllegalArgumentException(\"value of:\" + value + \" was not recognized as a boolean\");\n    }\n}"
            ],
            [
                "getDate",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Returns the real current date or the date set with overrideCurrentDate().\n *\n * @return the real current date or the date set with overrideCurrentDate().\n */\npublic static Date getDate() {\n    if (currentDate == null) {\n        return new Date();\n    }\n    return currentDate;\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the default time zone.\n *\n * @param s date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s) {\n    return parseDateTime(s, null);\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the given time zone.\n *\n * @param s  date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @param tz the timezone to use or <code>null</code> for the default time\n *           zone.\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s, TimeZone tz) {\n    DateFormat df;\n    if (s == null) {\n        return null;\n    }\n    df = new SimpleDateFormat(DATE_TIME_PATTERN);\n    if (tz != null) {\n        df.setTimeZone(tz);\n    }\n    try {\n        return df.parse(s);\n    } catch (ParseException e) {\n        return null;\n    }\n}"
            ],
            [
                "str2state",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.\n *\n * @param str state as a descriptive text.\n * @return numeric state.\n */\npublic static Integer str2state(String str) {\n    Integer state;\n    if (str == null) {\n        return null;\n    }\n    state = inverseStateMap.get(str);\n    if (state == null) {\n        Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n        if (matcher.matches()) {\n            try {\n                state = Integer.valueOf(matcher.group(1));\n            } catch (NumberFormatException e) {\n                // should not happen as the pattern requires \\d+ for the state.\n                throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n            }\n        }\n    }\n    return state;\n}"
            ],
            [
                "getGetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Returns a Map of getter methods of the given class.\n * <p>\n * The key of the map contains the name of the attribute that can be\n * accessed by the getter, the value the getter itself (an instance of\n * java.lang.reflect.Method). A method is considered a getter if its name\n * starts with \"get\", it is declared public and takes no arguments.\n *\n * @param clazz the class to return the getters for\n * @return a Map of attributes and their accessor methods (getters)\n */\npublic static Map<String, Method> getGetters(final Class<?> clazz) {\n    final Map<String, Method> accessors = new HashMap<>();\n    final Method[] methods = clazz.getMethods();\n    for (Method method : methods) {\n        String name = null;\n        String methodName = method.getName();\n        if (methodName.startsWith(\"get\")) {\n            name = methodName.substring(3);\n        } else if (methodName.startsWith(\"is\")) {\n            name = methodName.substring(2);\n        }\n        if (name == null || name.length() == 0) {\n            continue;\n        }\n        // skip methods with != 0 parameters\n        if (method.getParameterTypes().length != 0) {\n            continue;\n        }\n        accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n    }\n    return accessors;\n}"
            ],
            [
                "getSetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * The main benefit here is that there will not be repeated errors when\n * inspecting classes for setters on every single Event being processed.\n * <br>\n * <br>\n * While this method adds caching which is 100 times faster, the time\n * Benefit is largely insignificant as the execution time was already very\n * fast.\n *\n * @param clazz\n * @return\n */\npublic static Map<String, Method> getSetters(Class<?> clazz) {\n    return setterMap.computeIfAbsent(clazz, (c) -> {\n        return getSettersInternal(c);\n    });\n}"
            ],
            [
                "stripIllegalCharacters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Strips all illegal charaters from the given lower case string. Illegal\n * characters are all characters that are neither characters ('a' to 'z')\n * nor digits ('0' to '9').\n *\n * @param s the original string\n * @return the string with all illegal characters stripped\n */\npublic static String stripIllegalCharacters(String s) {\n    char c;\n    boolean needsStrip = false;\n    StringBuilder sb;\n    if (s == null) {\n        return null;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            // continue\n        } else // NOPMD\n        if (c >= 'a' && c <= 'z') {\n            // continue\n        } else // NOPMD\n        {\n            needsStrip = true;\n            break;\n        }\n    }\n    if (!needsStrip) {\n        return s;\n    }\n    sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sb.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "isClassAvailable",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Checks if the class is available on the current thread's context class\n * loader.\n *\n * @param s fully qualified name of the class to check.\n * @return <code>true</code> if the class is available, <code>false</code>\n * otherwise.\n */\npublic static boolean isClassAvailable(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        classLoader.loadClass(s);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}"
            ],
            [
                "newInstance",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Creates a new instance of the given class. The class is loaded using the\n * current thread's context class loader and instantiated using its default\n * constructor.\n *\n * @param s fully qualified name of the class to instantiate.\n * @return the new instance or <code>null</code> on failure.\n */\npublic static Object newInstance(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        Class<?> clazz = classLoader.loadClass(s);\n        Constructor<?> constructor = clazz.getConstructor();\n        return constructor.newInstance();\n    } catch (ClassNotFoundException e) {\n        return null;\n    } catch (IllegalAccessException e) {\n        return null;\n    } catch (InstantiationException e) {\n        return null;\n    } catch (NoSuchMethodException e) {\n        // no default constructor\n        return null;\n    } catch (InvocationTargetException e) {\n        // constructor threw an exception\n        return null;\n    }\n}"
            ],
            [
                "loadClasses",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * find and all non abstract classes that implement/extend\n * baseClassOrInterface in the package packageName\n *\n * @param packageName\n * @param baseClassOrInterface\n * @return\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface) {\n    Set<Class<T>> result = new HashSet<>();\n    try {\n        Set<String> classNames = getClassNamesFromPackage(packageName);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = classLoader.loadClass(packageName + \".\" + className);\n                if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz)) {\n                    result.add((Class<T>) clazz);\n                }\n            } catch (Throwable e) {\n                logger.error(e, e);\n            }\n        }\n        logger.info(\"Loaded \" + result.size());\n    } catch (Exception e) {\n        logger.error(e, e);\n    }\n    return result;\n}"
            ],
            [
                "doWithLock",
                "org.asteriskjava.lock",
                "Locker",
                "public static LockCloser doWithLock(final Lockable lockable) {\n    try {\n        if (diags) {\n            synchronized (sync) {\n                keepList.put(lockable.getLockableId(), lockable);\n            }\n            return lockWithDiags(lockable);\n        }\n        return simpleLock(lockable);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCaller",
                "org.asteriskjava.lock",
                "Locker",
                "/**\n * determine the caller to Locker\n *\n * @param lockable\n * @return\n */\nstatic String getCaller(Lockable lockable) {\n    StackTraceElement[] trace = new Exception().getStackTrace();\n    String name = lockable.getClass().getCanonicalName();\n    for (StackTraceElement element : trace) {\n        if (element.getFileName() != null && !element.getFileName().contains(Locker.class.getSimpleName())) {\n            name = element.getFileName() + \" \" + element.getMethodName() + \" \" + element.getLineNumber() + \" \" + element.getClassName();\n            break;\n        }\n    }\n    return name;\n}"
            ],
            [
                "addArrivalListener",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static AutoCloseable addArrivalListener(OriginateAction originate, ActivityArrivalListener listener) {\n    final String key = UUID.randomUUID().toString();\n    arrivalListeners.put(key, listener);\n    if (arrivalListeners.size() > 100) {\n        // pick one at random to remove\n        ActivityArrivalListener leaked = arrivalListeners.remove(arrivalListeners.keySet().iterator().next());\n        logger.error(\"Arrival Listeners are leaking\" + leaked.getClass().getCanonicalName());\n    }\n    Map<String, String> vars = new HashMap<>();\n    vars.put(\"_\" + ARRIVAL_KEY, key);\n    originate.setVariables(vars);\n    return new AutoCloseable() {\n\n        @Override\n        public void close() throws Exception {\n            arrivalListeners.remove(key);\n        }\n    };\n}"
            ],
            [
                "getActivePBX",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static PBX getActivePBX() {\n    return AsteriskPBX.SELF;\n}"
            ],
            [
                "getActiveProfile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static AsteriskSettings getActiveProfile() {\n    AsteriskSettings activeProfile = profile.get();\n    if (activeProfile == null) {\n        throw new RuntimeException(\"you must call setAsteriskSettings() before getActiveProfile() is called the first time\");\n    }\n    return activeProfile;\n}"
            ],
            [
                "valueOfDesc",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelState",
                "static ChannelState valueOfDesc(String description) {\n    ChannelState theState = null;\n    for (ChannelState aState : ChannelState.values()) {\n        if (aState._text.compareToIgnoreCase(description) == 0) {\n            theState = aState;\n            break;\n        }\n    }\n    return theState;\n}"
            ],
            [
                "registerChannel",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelEventHelper",
                "public static Channel registerChannel(final String channelName, final String uniqueId, final String callerIdNum, final String callerIdName) throws InvalidChannelName {\n    final AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n    final Channel channel = pbx.internalRegisterChannel(channelName, uniqueId);\n    channel.setCallerId(pbx.buildCallerID(callerIdNum, callerIdName));\n    return channel;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ExtensionStatusEvent",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "Status",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static synchronized CoherentManagerConnection getInstance() {\n    if (self == null)\n        throw new IllegalStateException(\"The CoherentManagerConnection has not been initialised\");\n    self.checkConnection();\n    return self;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction());\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, int timeout) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction(), timeout);\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Sends an Asterisk action and waits for a ManagerRespose.\n *\n * @param action\n * @param timeout timeout in milliseconds\n * @return\n * @throws IllegalArgumentException\n * @throws IllegalStateException\n * @throws IOException\n * @throws TimeoutException\n * @throws OperationNotSupportedException\n */\npublic static ManagerResponse sendAction(final ManagerAction action, final int timeout) throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException {\n    if (logger.isDebugEnabled())\n        CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString());\n    CoherentManagerConnection.getInstance();\n    if ((CoherentManagerConnection.managerConnection != null) && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED)) {\n        final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n        org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection.sendAction(ajAction, timeout);\n        ManagerResponse convertedResponse = null;\n        // UserEventActions always return a null\n        if (response != null)\n            convertedResponse = CoherentEventFactory.build(response);\n        if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0)) {\n            CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage());\n        }\n        return convertedResponse;\n    }\n    throw new IllegalStateException(\"not connected.\");\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "PeerMonitor",
                "public static synchronized PeerMonitor getInstance() {\n    if (PeerMonitor.self == null) {\n        //$NON-NLS-1$\n        throw new IllegalStateException(\"You must call PeerMonitor.init()\");\n    }\n    return PeerMonitor.self;\n}"
            ],
            [
                "getSIPADDHeader",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "static public String getSIPADDHeader(final boolean inherit, final boolean targetIsSIP) {\n    //$NON-NLS-1$\n    String sipHeader = \"SIPADDHEADER\";\n    if (!targetIsSIP || inherit) {\n        //$NON-NLS-1$\n        sipHeader = \"__\" + sipHeader;\n    }\n    return sipHeader;\n}"
            ],
            [
                "valueByName",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByName(final String value) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(value) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    return status;\n}"
            ],
            [
                "valueByChannelState",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByChannelState(final ChannelState state) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(state.name()) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    if (status == NOTSET)\n        //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        logger.warn(\"Unknown channelState: \" + state + \" recieved\", new Throwable(\"Unknown channelState\"));\n    return status;\n}"
            ],
            [
                "getShadowEvent",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static Class<? extends ManagerEvent> getShadowEvent(org.asteriskjava.manager.event.ManagerEvent event) {\n    Class<? extends ManagerEvent> result = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (result == null) {\n        Class<? extends ResponseEvent> response = CoherentEventFactory.mapResponses.get(event.getClass());\n        result = response;\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerEvent build(final org.asteriskjava.manager.event.ManagerEvent event) {\n    ManagerEvent iEvent = null;\n    Class<? extends ManagerEvent> target = null;\n    if (event instanceof org.asteriskjava.manager.event.ResponseEvent)\n        target = CoherentEventFactory.mapResponses.get(event.getClass());\n    else\n        target = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            iEvent = target.getDeclaredConstructor(event.getClass()).newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return iEvent;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ResponseEvent build(org.asteriskjava.manager.event.ResponseEvent event) {\n    ResponseEvent response = null;\n    final Class<? extends ResponseEvent> target = CoherentEventFactory.mapResponses.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            final Constructor<? extends ResponseEvent> declaredConstructor = target.getDeclaredConstructor(event.getClass());\n            response = declaredConstructor.newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return response;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerResponse build(org.asteriskjava.manager.response.ManagerResponse response) {\n    ManagerResponse result;\n    if (response instanceof org.asteriskjava.manager.response.CommandResponse) {\n        result = new CommandResponse(response);\n    } else if (response instanceof org.asteriskjava.manager.response.ManagerError) {\n        result = new ManagerError(response);\n    } else {\n        result = new ManagerResponse(response);\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static org.asteriskjava.manager.action.ManagerAction build(ManagerAction action) {\n    org.asteriskjava.manager.action.ManagerAction result = null;\n    // final Class<? extends org.asteriskjava.manager.action.ManagerAction>\n    // target = CoherentEventFactory.mapActions.get(action.getClass());\n    if (logger.isDebugEnabled())\n        //$NON-NLS-1$\n        logger.debug(\"Action \" + action);\n    // if (target == null)\n    // {\n    // logger.warn(\"The given action \" + action.getClass().getName() + \" is\n    // not supported \"); //$NON-NLS-1$ //$NON-NLS-2$\n    // }\n    // else\n    {\n        result = action.getAJAction();\n    }\n    return result;\n}"
            ],
            [
                "buildFromComponents",
                "org.asteriskjava.pbx.internal.asterisk",
                "CallerIDImpl",
                "/**\n * This is a little helper class which will buid the name component of a\n * clid from the first and lastnames. If both firstname and lastname are\n * null then the name component will be an empty string.\n *\n * @param firstname the person's firstname, may be null.\n * @param lastname  the person's lastname, may be null\n * @param number    the phone number.\n * @return\n */\npublic static CallerID buildFromComponents(final String firstname, final String lastname, final String number) {\n    //$NON-NLS-1$\n    String name = \"\";\n    if (firstname != null) {\n        name += firstname.trim();\n    }\n    if (lastname != null) {\n        if (name.length() > 0) {\n            //$NON-NLS-1$\n            name += \" \";\n        }\n        name += lastname.trim();\n    }\n    return PBXFactory.getActivePBX().buildCallerID(number, name);\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.asterisk",
                "MeetmeRoomControl",
                "public static MeetmeRoomControl getInstance() {\n    if (MeetmeRoomControl.self.get() == null) {\n        throw new IllegalStateException(//$NON-NLS-1$\n        \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\");\n    }\n    return MeetmeRoomControl.self.get();\n}"
            ],
            [
                "getNextChannelId",
                "org.asteriskjava.pbx",
                "ChannelFactory",
                "public static long getNextChannelId() {\n    return nextChannelId.incrementAndGet();\n}"
            ],
            [
                "getTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * Extracts the technology from a fully qualified endpoint string of the form:\n * TECH/NNNN\n *\n * @param fullyQualifiedEndPoint\n * @return\n */\npublic static TechType getTech(final String fullyQualifiedEndPoint) {\n    if (!TechType.hasValidTech(fullyQualifiedEndPoint)) {\n        throw new IllegalArgumentException(//$NON-NLS-1$\n        \"The provided end point '\" + fullyQualifiedEndPoint + //$NON-NLS-1$\n        \"' must contain a tech prefix. e.g. SIP/100\");\n    }\n    //$NON-NLS-1$\n    final String techName = fullyQualifiedEndPoint.substring(0, fullyQualifiedEndPoint.indexOf(\"/\"));\n    return TechType.valueOf(techName.toUpperCase());\n}"
            ],
            [
                "hasValidTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a valid tech descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasValidTech(final String endPointName) {\n    TechType tech = UNKNOWN;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index >= 1) {\n        final String techName = endPointName.substring(0, index);\n        try {\n            tech = TechType.valueOf(techName.toUpperCase());\n        } catch (final IllegalArgumentException e) {\n            //$NON-NLS-1$\n            TechType.logger.error(\"Invalid tech for endpoint:\" + endPointName);\n        }\n    }\n    return tech != UNKNOWN;\n}"
            ],
            [
                "hasTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a tech descriptor even if it isn't\n * a known descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasTech(final String endPointName) {\n    boolean hasTech = false;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index != -1) {\n        hasTech = true;\n    }\n    return hasTech;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx",
                "CallDirection",
                "public static CallDirection valueOf(final int dbValue) {\n    CallDirection result = null;\n    for (final CallDirection direction : CallDirection.values()) {\n        if (direction.dbValue == dbValue) {\n            result = direction;\n            break;\n        }\n    }\n    return result;\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "ManagerEventListenerProxy",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "Access",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "toHexString",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Converts a byte array to a hex string representing it. The hex digits are\n * lower case.\n *\n * @param b the byte array to convert\n * @return the hex representation of b\n */\npublic static String toHexString(byte[] b) {\n    final StringBuilder sb;\n    sb = new StringBuilder(b.length * 2);\n    for (byte aB : b) {\n        sb.append(hexChar[(aB & 0xf0) >>> 4]);\n        sb.append(hexChar[aB & 0x0f]);\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Returns the internal action id contained in the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the internal action id that has been added before.\n * @see #addInternalActionId(String, String)\n */\npublic static String getInternalActionId(String actionId) {\n    final int delimiterIndex;\n    if (actionId == null) {\n        return null;\n    }\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        return actionId.substring(0, delimiterIndex);\n    }\n    return null;\n}"
            ],
            [
                "stripInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Strips the internal action id from the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the original action id, that is the action id as it was before\n * the internal action id was added.\n * @see #addInternalActionId(String, String)\n */\npublic static String stripInternalActionId(String actionId) {\n    int delimiterIndex;\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        if (actionId.length() > delimiterIndex + 1) {\n            return actionId.substring(delimiterIndex + 1);\n        }\n        return null;\n    }\n    return null;\n}"
            ],
            [
                "addInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Adds the internal action id to the given action id.\n *\n * @param actionId         the action id as set by the user.\n * @param internalActionId the internal action id to add.\n * @return the action id prefixed by the internal action id suitable to be\n * sent to Asterisk.\n */\npublic static String addInternalActionId(String actionId, String internalActionId) {\n    if (actionId == null) {\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n    }\n    return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n}"
            ],
            [
                "determineSetterName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineSetterName(String getterName) {\n    if (getterName.startsWith(\"get\")) {\n        return \"set\" + getterName.substring(3);\n    } else if (getterName.startsWith(\"is\")) {\n        return \"set\" + getterName.substring(2);\n    } else {\n        throw new IllegalArgumentException(\"Getter '\" + getterName + \"' doesn't start with either 'get' or 'is'\");\n    }\n}"
            ],
            [
                "determineFieldName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineFieldName(String accessorName) {\n    if (accessorName.startsWith(\"get\")) {\n        return lcFirst(accessorName.substring(3));\n    } else if (accessorName.startsWith(\"is\")) {\n        return lcFirst(accessorName.substring(2));\n    } else if (accessorName.startsWith(\"set\")) {\n        return lcFirst(accessorName.substring(3));\n    } else {\n        throw new IllegalArgumentException(\"Accessor '\" + accessorName + \"' doesn't start with either 'get', 'is' or 'set'\");\n    }\n}"
            ],
            [
                "getSerialVersionUID",
                "org.asteriskjava.manager.event",
                "InvalidAccountId",
                "public static long getSerialVersionUID() {\n    return serialVersionUID;\n}"
            ],
            [
                "getSerialversionuid",
                "org.asteriskjava.manager.event",
                "TransportDetail",
                "public static long getSerialversionuid() {\n    return serialVersionUID;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "ChannelState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.AbstractChannelStateEvent#getChannelState()}.\n *\n * @param status integer representation of the status.\n * @return corresponding ChannelState object or <code>null</code> if none matches.\n */\npublic static ChannelState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (ChannelState tmp : ChannelState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "getByCode",
                "org.asteriskjava.live",
                "HangupCause",
                "/**\n * Returns the HangupCode by its numeric cause code.<p>\n * Using this method in client code is discouraged.\n *\n * @param code the numeric cause code.\n * @return the corresponding HangupCode enum or\n * <code>null</code> if there is no such HangupCause.\n */\npublic static synchronized HangupCause getByCode(int code) {\n    if (causes == null) {\n        causes = new HashMap<>();\n        for (HangupCause cause : values()) {\n            causes.put(cause.code, cause);\n        }\n    }\n    return causes.get(code);\n}"
            ],
            [
                "mapSendActionException",
                "org.asteriskjava.live.internal",
                "ManagerCommunicationExceptionMapper",
                "/**\n * Maps exceptions received from\n * {@link org.asteriskjava.manager.ManagerConnection} when sending a\n * {@link org.asteriskjava.manager.action.ManagerAction} to the corresponding\n * {@link org.asteriskjava.live.ManagerCommunicationException}.\n *\n * @param actionName name of the action that has been tried to send\n * @param exception  exception received\n * @return the corresponding ManagerCommunicationException\n */\nstatic ManagerCommunicationException mapSendActionException(String actionName, Exception exception) {\n    if (exception instanceof IllegalStateException) {\n        return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n    } else if (exception instanceof EventTimeoutException) {\n        return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n    } else {\n        return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n    }\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "QueueMemberState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.QueueMemberEvent#getStatus()}.\n *\n * @param status integer representation of the status.\n * @return corresponding QueueMemberState object or <code>null</code> if none matches.\n */\npublic static QueueMemberState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (QueueMemberState tmp : QueueMemberState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "CallerId",
                "/**\n * Parses a caller id string in the form\n * <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.\n *\n * @param s the caller id string to parse.\n * @return the corresponding CallerId object which is never <code>null</code>.\n * @see AstUtil#parseCallerId(String)\n */\npublic static CallerId valueOf(String s) {\n    final String[] parsedCallerId;\n    parsedCallerId = AstUtil.parseCallerId(s);\n    return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "ASTERISK_1_0",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.0 series.\n */\npublic static final AsteriskVersion ASTERISK_1_0 = new AsteriskVersion(100, \"Asterisk 1.0\");"
            ],
            [
                "ASTERISK_1_2",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.2 series.\n */\npublic static final AsteriskVersion ASTERISK_1_2 = new AsteriskVersion(120, \"Asterisk 1.2\");"
            ],
            [
                "ASTERISK_1_4",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.4 series.\n *\n * @since 0.3\n */\npublic static final AsteriskVersion ASTERISK_1_4 = new AsteriskVersion(140, \"Asterisk 1.4\");"
            ],
            [
                "ASTERISK_1_6",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.6 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_6 = new AsteriskVersion(160, \"Asterisk 1.6\");"
            ],
            [
                "ASTERISK_1_8",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.8 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_8 = new AsteriskVersion(180, \"Asterisk 1.8\");"
            ],
            [
                "ASTERISK_10",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 10 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_10 = new AsteriskVersion(1000, \"Asterisk 10\");"
            ],
            [
                "ASTERISK_11",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 11 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_11 = new AsteriskVersion(1100, \"Asterisk 11\");"
            ],
            [
                "ASTERISK_12",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 12 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_12 = new AsteriskVersion(1200, \"Asterisk 12\");"
            ],
            [
                "ASTERISK_13",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 13 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_13 = new AsteriskVersion(1300, \"Asterisk 13\", VERSION_PATTERN_13, VERSION_PATTERN_CERTIFIED_13);"
            ],
            [
                "ASTERISK_14",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 14 series.\n *\n * @since 1.1.0\n */\npublic static final AsteriskVersion ASTERISK_14 = new AsteriskVersion(1400, \"Asterisk 14\", VERSION_PATTERN_14);"
            ],
            [
                "ASTERISK_15",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 15 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_15 = new AsteriskVersion(1500, \"Asterisk 15\", VERSION_PATTERN_15);"
            ],
            [
                "ASTERISK_16",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 16 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_16 = new AsteriskVersion(1600, \"Asterisk 16\", VERSION_PATTERN_16, VERSION_PATTERN_CERTIFIED_16);"
            ],
            [
                "ASTERISK_17",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 17 series.\n *\n * @since 3.7.0\n */\npublic static final AsteriskVersion ASTERISK_17 = new AsteriskVersion(1700, \"Asterisk 17\", VERSION_PATTERN_17);"
            ],
            [
                "ASTERISK_18",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 18 series.\n *\n * @since 3.13.0\n */\npublic static final AsteriskVersion ASTERISK_18 = new AsteriskVersion(1800, \"Asterisk 18\", VERSION_PATTERN_18, VERSION_PATTERN_CERTIFIED_18);"
            ],
            [
                "ASTERISK_19",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 19 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_19 = new AsteriskVersion(1900, \"Asterisk 19\", VERSION_PATTERN_19);"
            ],
            [
                "ASTERISK_20",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 20 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_20 = new AsteriskVersion(2000, \"Asterisk 20\", VERSION_PATTERN_20);"
            ],
            [
                "DEFAULT_VERSION",
                "org.asteriskjava",
                "AsteriskVersion",
                "// current debian stable version, as of 09/10/2018\npublic static final AsteriskVersion DEFAULT_VERSION = ASTERISK_16;"
            ],
            [
                "AGI_CONNECTION_HANDLERS",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "public static final ConcurrentMap<AgiConnectionHandler, AgiChannel> AGI_CONNECTION_HANDLERS = new ConcurrentHashMap<>(32);"
            ],
            [
                "REQUEST",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI request is made available to scripts.\n */\npublic static final String REQUEST = \"request\";"
            ],
            [
                "CHANNEL",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI channel is made available to scripts.\n */\npublic static final String CHANNEL = \"channel\";"
            ],
            [
                "CRNL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern CRNL_PATTERN = Pattern.compile(\"\\r\\n\");"
            ],
            [
                "NL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern NL_PATTERN = Pattern.compile(\"\\n\");"
            ],
            [
                "MAX_SOCKET_READ_TIMEOUT_MILLIS",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "/**\n * 3 hrs = 3 * 3660 * 1000\n */\npublic static final int MAX_SOCKET_READ_TIMEOUT_MILLIS = 10800000;"
            ],
            [
                "FQCN",
                "org.asteriskjava.util.internal",
                "Slf4JLogger",
                "static String FQCN = Slf4JLogger.class.getName();"
            ],
            [
                "TRACE_DIRECTORY_PROPERTY",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "public static final String TRACE_DIRECTORY_PROPERTY = \"org.asteriskjava.trace.directory\";"
            ],
            [
                "FILE_PREFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_PREFIX = \"aj-trace\";"
            ],
            [
                "FILE_SUFFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_SUFFIX = \".txt\";"
            ],
            [
                "AST_STATE_DOWN",
                "org.asteriskjava.util",
                "AstState",
                "/* from include/asterisk/channel.h */\n/**\n * Channel is down and available.\n */\npublic static final int AST_STATE_DOWN = 0;"
            ],
            [
                "AST_STATE_RSRVD",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is down, but reserved.\n */\npublic static final int AST_STATE_RSRVD = 1;"
            ],
            [
                "AST_STATE_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is off hook.\n */\npublic static final int AST_STATE_OFFHOOK = 2;"
            ],
            [
                "AST_STATE_DIALING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed.\n */\npublic static final int AST_STATE_DIALING = 3;"
            ],
            [
                "AST_STATE_RING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is ringing.\n */\npublic static final int AST_STATE_RING = 4;"
            ],
            [
                "AST_STATE_RINGING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Remote end is ringing.\n */\npublic static final int AST_STATE_RINGING = 5;"
            ],
            [
                "AST_STATE_UP",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is up.\n */\npublic static final int AST_STATE_UP = 6;"
            ],
            [
                "AST_STATE_BUSY",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is busy.\n */\npublic static final int AST_STATE_BUSY = 7;"
            ],
            [
                "AST_STATE_DIALING_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed while offhook.\n */\npublic static final int AST_STATE_DIALING_OFFHOOK = 8;"
            ],
            [
                "AST_STATE_PRERING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel has detected an incoming call and is waiting for ring.\n */\npublic static final int AST_STATE_PRERING = 9;"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.agi.config",
                "ServiceAgiScriptImpl",
                "static transient Log logger = LogFactory.getLog(ServiceAgiScriptImpl.class);"
            ],
            [
                "ARRIVAL_KEY",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static final String ARRIVAL_KEY = \"ActivityAgiArrivalKey\";"
            ],
            [
                "profile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "final static AtomicReference<AsteriskSettings> profile = new AtomicReference<>();"
            ],
            [
                "eventStatistics",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "static Map<String, Integer> eventStatistics = new HashMap<>();"
            ],
            [
                "connector",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Used to instantiate the manager connection including the initial login.\n */\nstatic Connector connector = null;"
            ],
            [
                "managerConnection",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * The actual manager connection. AJ actually maintains two socket\n * connections one for reading events and the other writing events.\n */\nstatic ManagerConnection managerConnection = null;"
            ],
            [
                "ACTIVITY_AGI",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "public static final String ACTIVITY_AGI = \"activityAgi\";"
            ],
            [
                "mapEvents",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Events\nstatic Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();"
            ],
            [
                "mapResponses",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Response\nstatic Hashtable<Class<? extends org.asteriskjava.manager.event.ResponseEvent>, Class<? extends ResponseEvent>> mapResponses = new Hashtable<>();"
            ],
            [
                "ZOMBIE",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String ZOMBIE = \"<ZOMBIE>\";"
            ],
            [
                "MASQ",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String MASQ = \"<MASQ>\";"
            ],
            [
                "UNKNOWN_UNIQUE_ID",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String UNKNOWN_UNIQUE_ID = \"-1\";"
            ],
            [
                "_actions",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\npublic static final String[] _actions = new String[] { \"PARKED/\", \"ASYNCGOTO/\", \"BRIDGE/\" };"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.internal.managerAPI",
                "OriginateBaseClass",
                "/*\n     * this class generates and issues ActionEvents to asterisk through the\n     * manager. This is the asterisk coal face.\n     */\nprotected static final Log logger = LogFactory.getLog(OriginateBaseClass.class);"
            ],
            [
                "INTERNAL_ACTION_ID_DELIMITER",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "public static final char INTERNAL_ACTION_ID_DELIMITER = '#';"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbsoluteTimeoutAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 3073237188819825503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LogoffAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7576797478570238525L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreShowChannelsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIDeleteAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddiesAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIUpdateAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "GetConfigAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreSettingsAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "OriginateAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxCountAction",
                "static final long serialVersionUID = -6900421919824575941L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "RedirectAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1869279324159418150L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAddBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "HangupAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeRemoveBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbstractManagerAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -7667827187378395689L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "PROPERTY_SKYPENAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_SKYPENAME = \"skypename\";"
            ],
            [
                "PROPERTY_TIMEZONE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_TIMEZONE = \"timezone\";"
            ],
            [
                "PROPERTY_AVAILABILITY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_AVAILABILITY = \"availability\";"
            ],
            [
                "PROPERTY_FULLNAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_FULLNAME = \"fullname\";"
            ],
            [
                "PROPERTY_LANGUAGE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_LANGUAGE = \"language\";"
            ],
            [
                "PROPERTY_COUNTRY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_COUNTRY = \"country\";"
            ],
            [
                "PROPERTY_PHONE_HOME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_HOME = \"phone_home\";"
            ],
            [
                "PROPERTY_PHONE_OFFICE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_OFFICE = \"phone_office\";"
            ],
            [
                "PROPERTY_PHONE_MOBILE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_MOBILE = \"phone_mobile\";"
            ],
            [
                "PROPERTY_ABOUT",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_ABOUT = \"about\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgiAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgentsAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -320228893513973367L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "ACTION_NEWCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/* Actions accepted by commands in the sequence */\npublic static final String ACTION_NEWCAT = \"NewCat\";"
            ],
            [
                "ACTION_RENAMECAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_RENAMECAT = \"RenameCat\";"
            ],
            [
                "ACTION_DELCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELCAT = \"DelCat\";"
            ],
            [
                "ACTION_UPDATE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_UPDATE = \"Update\";"
            ],
            [
                "ACTION_DELETE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELETE = \"Delete\";"
            ],
            [
                "ACTION_APPEND",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_APPEND = \"Append\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "EventsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -8042435402644984875L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExtensionStateAction",
                "static final long serialVersionUID = 6537408784388696403L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExecAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "FilterAction",
                "static final long serialVersionUID = 5537508784388696503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseStatusAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxStatusAction",
                "static final long serialVersionUID = -3845028207155711950L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseListAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CommandAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "DongleSendSMSAction",
                "static final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleCheckAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LoginAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -2600694249339115032L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "SUBSYSTEM_CDR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_CDR = \"cdr\";"
            ],
            [
                "SUBSYSTEM_ENUM",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_ENUM = \"enum\";"
            ],
            [
                "SUBSYSTEM_DNSMGR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_DNSMGR = \"dnsmgr\";"
            ],
            [
                "SUBSYSTEM_EXTCONFIG",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_EXTCONFIG = \"extconfig\";"
            ],
            [
                "SUBSYSTEM_MANAGER",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_MANAGER = \"manager\";"
            ],
            [
                "SUBSYSTEM_RTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_RTP = \"rtp\";"
            ],
            [
                "SUBSYSTEM_HTTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_HTTP = \"http\";"
            ],
            [
                "LOAD_TYPE_LOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_LOAD = \"load\";"
            ],
            [
                "LOAD_TYPE_UNLOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_UNLOAD = \"unload\";"
            ],
            [
                "LOAD_TYPE_RELOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_RELOAD = \"reload\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeChatSendAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreStatusAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "StatusAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ChallengeAction",
                "static final long serialVersionUID = 7240516124871953971L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AtxferAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "STATUS_LOGGED_IN",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_IN = \"Logged In\";"
            ],
            [
                "STATUS_LOGGED_OUT",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_OUT = \"Logged Out\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREGISTERED = \"Unregistered\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_LAGGED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_LAGGED = \"Lagged\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -0L;"
            ],
            [
                "CEL_EVENT_CHAN_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_START = \"CHAN_START\";"
            ],
            [
                "CEL_EVENT_CHAN_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_END = \"CHAN_END\";"
            ],
            [
                "CEL_EVENT_ANSWER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ANSWER = \"ANSWER\";"
            ],
            [
                "CEL_EVENT_HANGUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_HANGUP = \"HANGUP\";"
            ],
            [
                "CEL_EVENT_BRIDGE_ENTER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_ENTER = \"BRIDGE_ENTER\";"
            ],
            [
                "CEL_EVENT_BRIDGE_EXIT",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_EXIT = \"BRIDGE_EXIT\";"
            ],
            [
                "CEL_EVENT_APP_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_START = \"APP_START\";"
            ],
            [
                "CEL_EVENT_APP_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_END = \"APP_END\";"
            ],
            [
                "CEL_EVENT_PARK_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_START = \"PARK_START\";"
            ],
            [
                "CEL_EVENT_PARK_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_END = \"PARK_END\";"
            ],
            [
                "CEL_EVENT_BLINDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BLINDTRANSFER = \"BLINDTRANSFER\";"
            ],
            [
                "CEL_EVENT_ATTENDEDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ATTENDEDTRANSFER = \"ATTENDEDTRANSFER\";"
            ],
            [
                "CEL_EVENT_PICKUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PICKUP = \"PICKUP\";"
            ],
            [
                "CEL_EVENT_FORWARD",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_FORWARD = \"FORWARD\";"
            ],
            [
                "CEL_EVENT_LINKEDID_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LINKEDID_END = \"LINKEDID_END\";"
            ],
            [
                "CEL_EVENT_LOCAL_OPTIMIZE",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LOCAL_OPTIMIZE = \"LOCAL_OPTIMIZE\";"
            ],
            [
                "CEL_EVENT_USER_DEFINED",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_USER_DEFINED = \"USER_DEFINED\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "MasqueradeEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DndStateEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "AST_DEVICE_UNKNOWN",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNKNOWN = 0;"
            ],
            [
                "AST_DEVICE_NOT_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "/**\n * Queue member is available.\n */\npublic static final int AST_DEVICE_NOT_INUSE = 1;"
            ],
            [
                "AST_DEVICE_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INUSE = 2;"
            ],
            [
                "AST_DEVICE_BUSY",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_BUSY = 3;"
            ],
            [
                "AST_DEVICE_INVALID",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INVALID = 4;"
            ],
            [
                "AST_DEVICE_UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNAVAILABLE = 5;"
            ],
            [
                "AST_DEVICE_RINGING",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGING = 6;"
            ],
            [
                "AST_DEVICE_RINGINUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGINUSE = 7;"
            ],
            [
                "AST_DEVICE_ONHOLD",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_ONHOLD = 8;"
            ],
            [
                "MEMBERSHIP_STATIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_STATIC = \"static\";"
            ],
            [
                "MEMBERSHIP_DYNAMIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_DYNAMIC = \"dynamic\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "MODULE_MANAGER",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_MANAGER = \"Manager\";"
            ],
            [
                "MODULE_CDR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_CDR = \"CDR\";"
            ],
            [
                "MODULE_DNS_MGR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_DNS_MGR = \"DNSmgr\";"
            ],
            [
                "MODULE_RTP",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_RTP = \"RTP\";"
            ],
            [
                "MODULE_ENUM",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_ENUM = \"ENUM\";"
            ],
            [
                "STATUS_ENABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_ENABLED = \"Enabled\";"
            ],
            [
                "STATUS_DISABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_DISABLED = \"Disabled\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "QueueEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -8554382298783676181L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnlinkEvent",
                "/**\n * Serial version identifier.\n */\nstatic final long serialVersionUID = -2943257621137870024L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LogChannelEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 650153034857116588L;"
            ],
            [
                "AGENT_STATUS_LOGGEDOFF",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent isn't logged in.\n */\npublic static final String AGENT_STATUS_LOGGEDOFF = \"AGENT_LOGGEDOFF\";"
            ],
            [
                "AGENT_STATUS_IDLE",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and waiting for call.\n */\npublic static final String AGENT_STATUS_IDLE = \"AGENT_IDLE\";"
            ],
            [
                "AGENT_STATUS_ONCALL",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and on a call.\n */\npublic static final String AGENT_STATUS_ONCALL = \"AGENT_ONCALL\";"
            ],
            [
                "AGENT_STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Don't know anything about agent. Shouldn't ever get this.\n */\npublic static final String AGENT_STATUS_UNKNOWN = \"AGENT_UNKNOWN\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "BUDDYSTATUS_WAITAUTHORIZATION",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_WAITAUTHORIZATION = \"Waiting for Authorization\";"
            ],
            [
                "BUDDYSTATUS_BLOCKED",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKED = \"Blocked\";"
            ],
            [
                "BUDDYSTATUS_BLOCKEDSKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKEDSKYPEOUT = \"Blocked Skypout\";"
            ],
            [
                "BUDDYSTATUS_SKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEOUT = \"Skypeout\";"
            ],
            [
                "BUDDYSTATUS_OFFLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINE = \"Offline\";"
            ],
            [
                "BUDDYSTATUS_ONLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_ONLINE = \"Online\";"
            ],
            [
                "BUDDYSTATUSS_AWAY",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUSS_AWAY = \"Away\";"
            ],
            [
                "BUDDYSTATUS_NOTAVAILABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_NOTAVAILABLE = \"Not Available\";"
            ],
            [
                "BUDDYSTATUS_DONTDISTURB",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_DONTDISTURB = \"Do Not Disturb\";"
            ],
            [
                "BUDDYSTATUS_SKYPEME",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEME = \"Skype Me\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEVOICEENABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEVOICEENABLE = \"Offline (Voicemail Enabled)\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEFORWARDENABLEL",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEFORWARDENABLEL = \"Offline (Call Forwarding Enabled)\";"
            ],
            [
                "BUDDYSTATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerPushEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "VarSetEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LinkEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -4023240534975776225L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerRunEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewExtenEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -467486409866099387L;"
            ],
            [
                "REASON_LOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been loaded for the first time.\n */\npublic static final String REASON_LOAD = \"LOAD\";"
            ],
            [
                "REASON_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded.\n */\npublic static final String REASON_RELOAD = \"RELOAD\";"
            ],
            [
                "REASON_CLI_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded from the command line.\n */\npublic static final String REASON_CLI_RELOAD = \"CLIRELOAD\";"
            ],
            [
                "REASON_MANAGER_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded due to a manager action.\n */\npublic static final String REASON_MANAGER_RELOAD = \"MANAGERRELOAD\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LeaveEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7450401017732634240L;"
            ],
            [
                "STATUS_CREATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_CREATED = \"Created\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_REMOVED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REMOVED = \"Removed\";"
            ],
            [
                "STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_UPDATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UPDATED = \"Updated\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnholdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ManagerEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 2L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "DISPOSITION_NO_ANSWER",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_NO_ANSWER = \"NO ANSWER\";"
            ],
            [
                "DISPOSITION_FAILED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_FAILED = \"FAILED\";"
            ],
            [
                "DISPOSITION_BUSY",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_BUSY = \"BUSY\";"
            ],
            [
                "DISPOSITION_ANSWERED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_ANSWERED = \"ANSWERED\";"
            ],
            [
                "DISPOSITION_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_UNKNOWN = \"UNKNOWN\";"
            ],
            [
                "AMA_FLAG_OMIT",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_OMIT = \"OMIT\";"
            ],
            [
                "AMA_FLAG_BILLING",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_BILLING = \"BILLING\";"
            ],
            [
                "AMA_FLAG_DOCUMENTATION",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_DOCUMENTATION = \"DOCUMENTATION\";"
            ],
            [
                "AMA_FLAG_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "CoreShowChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "JoinEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "NOT_INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * No device INUSE or BUSY.\n */\npublic static final int NOT_INUSE = 0;"
            ],
            [
                "INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices INUSE.\n */\npublic static final int INUSE = 1;"
            ],
            [
                "BUSY",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices BUSY.\n */\npublic static final int BUSY = 1 << 1;"
            ],
            [
                "UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices UNAVAILABLE/UNREGISTERED.\n */\npublic static final int UNAVAILABLE = 1 << 2;"
            ],
            [
                "RINGING",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices RINGING.\n */\npublic static final int RINGING = 1 << 3;"
            ],
            [
                "TRANSFER_METHOD_SIP",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_METHOD_SIP = \"SIP\";"
            ],
            [
                "TRANSFER_TYPE_ATTENDED",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_ATTENDED = \"Attended\";"
            ],
            [
                "TRANSFER_TYPE_BLIND",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_BLIND = \"Blind\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ShutdownEvent",
                "/**\n * Serial version identifier\n */\nstatic final long serialVersionUID = 2028136082664018423L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has started.\n */\npublic static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has finished.\n */\npublic static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "RenameEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 3400165738000349767L;"
            ],
            [
                "STATE_START",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_START = \"Start\";"
            ],
            [
                "STATE_STOP",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_STOP = \"Stop\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_EXEC",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_EXEC = \"Exec\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "CHANNEL_TYPE_SIP",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_SIP = \"SIP\";"
            ],
            [
                "CHANNEL_TYPE_IAX",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_IAX = \"IAX\";"
            ],
            [
                "MODULE_SELECTION_PRELOAD",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_PRELOAD = \"Preload\";"
            ],
            [
                "MODULE_SELECTION_ALL",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_ALL = \"All\";"
            ],
            [
                "MODULE_LOAD_STATUS_DONE",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_LOAD_STATUS_DONE = \"Done\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "SoftHangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewCallerIdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 6639570533512201213L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LocalBridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "RESPONSE_FAILED",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_FAILED = \"Failed\";"
            ],
            [
                "RESPONSE_SUCCESS",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_SUCCESS = \"Success\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "BRIDGE_STATE_LINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_LINK = \"Link\";"
            ],
            [
                "BRIDGE_STATE_UNLINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_UNLINK = \"Unlink\";"
            ],
            [
                "BRIDGE_TYPE_CORE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A <code>channel.c</code> bridge.\n */\npublic static final String BRIDGE_TYPE_CORE = \"core\";"
            ],
            [
                "BRIDGE_TYPE_RTP_NATIVE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP native bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_NATIVE = \"rtp-native\";"
            ],
            [
                "BRIDGE_TYPE_RTP_DIRECT",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP peer-2-peer bridge (NAT support only).\n */\npublic static final String BRIDGE_TYPE_RTP_DIRECT = \"rtp-direct\";"
            ],
            [
                "BRIDGE_TYPE_RTP_REMOTE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A remote (re-invite) bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_REMOTE = \"rtp-remote\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREGISTERED = \"Registered\";"
            ],
            [
                "STATUS_REQUEST_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REQUEST_SENT = \"Request Sent\";"
            ],
            [
                "STATUS_AUTH_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_AUTH_SENT = \"Auth. Sent\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "STATUS_TIMEOUT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_TIMEOUT = \"Timeout\";"
            ],
            [
                "STATUS_NO_AUTHENTICATION",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_NO_AUTHENTICATION = \"No Authentication\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "PT_SENDER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a sender report.\n */\npublic static final int PT_SENDER_REPORT = 200;"
            ],
            [
                "PT_RECEIVER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a receiver report.\n */\npublic static final int PT_RECEIVER_REPORT = 201;"
            ],
            [
                "PT_H261_FUR",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "public static final int PT_H261_FUR = 192;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "DIRECTION_RECEIVED",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_RECEIVED = \"Received\";"
            ],
            [
                "DIRECTION_SENT",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_SENT = \"Sent\";"
            ],
            [
                "SUBEVENT_BEGIN",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_BEGIN = \"Begin\";"
            ],
            [
                "SUBEVENT_END",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_END = \"End\";"
            ],
            [
                "DIALSTATUS_CHANUNAVAIL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CHANUNAVAIL = \"CHANUNAVAIL\";"
            ],
            [
                "DIALSTATUS_CONGESTION",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CONGESTION = \"CONGESTION\";"
            ],
            [
                "DIALSTATUS_NOANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_NOANSWER = \"NOANSWER\";"
            ],
            [
                "DIALSTATUS_BUSY",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_BUSY = \"BUSY\";"
            ],
            [
                "DIALSTATUS_ANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_ANSWER = \"ANSWER\";"
            ],
            [
                "DIALSTATUS_CANCEL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CANCEL = \"CANCEL\";"
            ],
            [
                "DIALSTATUS_DONTCALL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_DONTCALL = \"DONTCALL\";"
            ],
            [
                "DIALSTATUS_TORTURE",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_TORTURE = \"TORTURE\";"
            ],
            [
                "DIALSTATUS_INVALIDARGS",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_INVALIDARGS = \"INVALIDARGS\";"
            ],
            [
                "VARIABLE_TRACE_ID",
                "org.asteriskjava.live.internal",
                "Constants",
                "static final String VARIABLE_TRACE_ID = \"AJ_TRACE_ID\";"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1024",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1024",
                "int"
            ],
            [
                "\"ludicrous time\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "file",
                "java.lang",
                "String"
            ],
            [
                "timeout",
                "",
                "long"
            ],
            [
                "maxDigits",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getMaxDigits",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the maximum number of digits to read.\n *\n * @return the maximum number of digits to read.\n */\npublic int getMaxDigits() {\n    return maxDigits;\n}"
            ],
            [
                "getTimeout",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the timeout to wait for data.\n *\n * @return the timeout in milliseconds to wait for data.\n */\npublic long getTimeout() {\n    return timeout;\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "public String toString()"
            ],
            [
                "getFile",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the name of the file to stream.\n *\n * @return the name of the file to stream.\n */\npublic String getFile() {\n    return file;\n}"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String[] arg0)"
            ],
            [
                "buildCommand",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "@Override\npublic String buildCommand() {\n    if (maxDigits == DEFAULT_MAX_DIGITS) {\n        if (timeout == DEFAULT_TIMEOUT) {\n            return \"GET DATA \" + escapeAndQuote(file);\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n    }\n    return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n}"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getAsteriskVersion",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "AsteriskVersion getAsteriskVersion()"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 26706,
        "oracle": "maxDigits >= 1 && maxDigits <= 1024;",
        "oracleType": "PRE",
        "projectName": "asterisk-java",
        "packageName": "org.asteriskjava.fastagi.command",
        "className": "GetDataCommand",
        "javadocTag": "@param maxDigits the maximum number of digits to read.\n                 <p>\n                 Must be in [1..1024].",
        "methodJavadoc": "    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */",
        "methodSourceCode": "public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException{\n    super();\n    validateMaxDigits(maxDigits);\n    this.file = file;\n    this.timeout = timeout;\n    this.maxDigits = maxDigits;\n}",
        "classJavadoc": "/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */",
        "classSourceCode": "/*\n *  Copyright 2004-2006 Stefan Reuter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage org.asteriskjava.fastagi.command;\n\n/**\n * AGI Command: <b>GET DATA</b>\n * <p>\n * Stream the given file, and receive DTMF data. The user may interrupt the streaming by starting to enter digits.<br>\n * Returns the digits received from the channel at the other end.\n * <p>\n * Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.\n * <p>\n * See: <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+18+AGICommand_get+data\">AGI Command GET DATA (Asterisk 18)</a>\n *\n * @author srt\n */\npublic class GetDataCommand extends AbstractAgiCommand {\n    private static final long serialVersionUID = 3978141041352128820L;\n\n    private static final int DEFAULT_TIMEOUT = 0;\n    private static final int DEFAULT_MAX_DIGITS = 1024;\n\n    /**\n     * The name of the file to stream.\n     */\n    private String file;\n\n    /**\n     * The timeout in milliseconds to wait for data.\n     * <p>\n     * 0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    private long timeout;\n\n    /**\n     * The maximum number of digits to read.\n     * <p>\n     * Must be in [1..1024].\n     */\n    private int maxDigits;\n\n    /**\n     * Creates a new GetDataCommand with default timeout and maxDigits set to 1024.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public GetDataCommand(String file) {\n        super();\n        this.file = file;\n        this.timeout = DEFAULT_TIMEOUT;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits set to\n     * 1024.\n     *\n     * @param file    the name of the file to stream, must not include extension.\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public GetDataCommand(String file, long timeout) {\n        super();\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = DEFAULT_MAX_DIGITS;\n    }\n\n    /**\n     * Creates a new GetDataCommand with the given timeout and maxDigits.\n     *\n     * @param file      the name of the file to stream, must not include extension.\n     * @param timeout   the timeout in milliseconds to wait for data.\n     *                  <p>\n     *                  0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public GetDataCommand(String file, long timeout, int maxDigits) throws IllegalArgumentException {\n        super();\n        validateMaxDigits(maxDigits);\n\n        this.file = file;\n        this.timeout = timeout;\n        this.maxDigits = maxDigits;\n    }\n\n    /**\n     * Returns the name of the file to stream.\n     *\n     * @return the name of the file to stream.\n     */\n    public String getFile() {\n        return file;\n    }\n\n    /**\n     * Sets the name of the file to stream.\n     * <p>\n     * This attribute is mandatory.\n     *\n     * @param file the name of the file to stream, must not include extension.\n     */\n    public void setFile(String file) {\n        this.file = file;\n    }\n\n    /**\n     * Returns the timeout to wait for data.\n     *\n     * @return the timeout in milliseconds to wait for data.\n     */\n    public long getTimeout() {\n        return timeout;\n    }\n\n    /**\n     * Sets the timeout to wait for data.\n     *\n     * @param timeout the timeout in milliseconds to wait for data.\n     *                <p>\n     *                0 means standard timeout value, -1 means \"ludicrous time\" (essentially never times out).\n     */\n    public void setTimeout(long timeout) {\n        this.timeout = timeout;\n    }\n\n    /**\n     * Returns the maximum number of digits to read.\n     *\n     * @return the maximum number of digits to read.\n     */\n    public int getMaxDigits() {\n        return maxDigits;\n    }\n\n    /**\n     * Sets the maximum number of digits to read.\n     *\n     * @param maxDigits the maximum number of digits to read.\n     *                  <p>\n     *                  Must be in [1..1024].\n     * @throws IllegalArgumentException if maxDigits is not in [1..1024]\n     */\n    public void setMaxDigits(int maxDigits) throws IllegalArgumentException {\n        validateMaxDigits(maxDigits);\n\n        this.maxDigits = maxDigits;\n    }\n\n    @Override\n    public String buildCommand() {\n        if (maxDigits == DEFAULT_MAX_DIGITS) {\n            if (timeout == DEFAULT_TIMEOUT) {\n                return \"GET DATA \" + escapeAndQuote(file);\n            }\n            return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n    }\n\n    private static void validateMaxDigits(int maxDigits) {\n        if (maxDigits < 1 || maxDigits > 1024) {\n            throw new IllegalArgumentException(\"maxDigits must be in [1..1024]\");\n        }\n    }\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "AsteriskVersion",
                "org.asteriskjava"
            ],
            [
                "SimpleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidOrUnknownCommandException",
                "org.asteriskjava.fastagi"
            ],
            [
                "InvalidCommandSyntaxException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServerThread",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiNetworkException",
                "org.asteriskjava.fastagi"
            ],
            [
                "MappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannelFactory",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiChannelImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AsyncAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiReader",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiReplyImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "FastAgiWriter",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "DefaultAgiChannelFactory",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiConnectionHandler",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "AgiRequestImpl",
                "org.asteriskjava.fastagi.internal"
            ],
            [
                "StaticMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "DefaultAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AsyncAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiHangupException",
                "org.asteriskjava.fastagi"
            ],
            [
                "CompositeMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiReply",
                "org.asteriskjava.fastagi.reply"
            ],
            [
                "SpeechRecognitionResult",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiOperations",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiRequest",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "ResourceBundleMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "NamedAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "ScriptEngineMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiException",
                "org.asteriskjava.fastagi"
            ],
            [
                "ClassNameMappingStrategy",
                "org.asteriskjava.fastagi"
            ],
            [
                "QueueCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechLoadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDestroyCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechSetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ControlStreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabasePutCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelTreeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetFullVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ExecCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOffCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDateTimeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayDigitsCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechDeactivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetOptionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseGetCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechUnloadGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AnswerCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "WaitForDigitCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AbstractAgiCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayAlphaCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DialCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "MeetmeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "HangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechRecognizeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendImageCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayNumberCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "StreamFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "DatabaseDelCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AsyncAgiBreakCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetCallerIdCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "RecordFileCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "BridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ConfbridgeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetContextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ReceiveCharCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GosubCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SendTextCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetAutoHangupCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechActivateGrammarCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetDataCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "VerboseCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "TddModeCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "NoopCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetPriorityCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SpeechCreateCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "ChannelStatusCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetMusicOnCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SetExtensionCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "SayPhoneticCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "GetVariableCommand",
                "org.asteriskjava.fastagi.command"
            ],
            [
                "AgiReader",
                "org.asteriskjava.fastagi"
            ],
            [
                "BaseAgiScript",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiChannel",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiSpeechException",
                "org.asteriskjava.fastagi"
            ],
            [
                "AgiWriter",
                "org.asteriskjava.fastagi"
            ],
            [
                "AbstractAgiServer",
                "org.asteriskjava.fastagi"
            ],
            [
                "HtmlEventTracer",
                "org.asteriskjava.tools"
            ],
            [
                "LogFactory",
                "org.asteriskjava.util"
            ],
            [
                "DaemonThreadFactory",
                "org.asteriskjava.util"
            ],
            [
                "MixMonitorDirection",
                "org.asteriskjava.util"
            ],
            [
                "Base64",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "JavaLoggingLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "FastScannerCrNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerNl",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScanner",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "FastScannerFactory",
                "org.asteriskjava.util.internal.streamreader"
            ],
            [
                "Slf4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "LocationAwareWrapper",
                "org.asteriskjava.util.internal"
            ],
            [
                "ServerSocketFacadeImpl",
                "org.asteriskjava.util.internal"
            ],
            [
                "FileTrace",
                "org.asteriskjava.util.internal"
            ],
            [
                "Trace",
                "org.asteriskjava.util.internal"
            ],
            [
                "NullLog",
                "org.asteriskjava.util.internal"
            ],
            [
                "Log4JLogger",
                "org.asteriskjava.util.internal"
            ],
            [
                "AstUtil",
                "org.asteriskjava.util"
            ],
            [
                "DateUtil",
                "org.asteriskjava.util"
            ],
            [
                "SocketConnectionFacade",
                "org.asteriskjava.util"
            ],
            [
                "Log",
                "org.asteriskjava.util"
            ],
            [
                "AstState",
                "org.asteriskjava.util"
            ],
            [
                "ServerSocketFacade",
                "org.asteriskjava.util"
            ],
            [
                "ReflectionUtil",
                "org.asteriskjava.util"
            ],
            [
                "ConfigParseException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigDirective",
                "org.asteriskjava.config"
            ],
            [
                "ConfigElement",
                "org.asteriskjava.config"
            ],
            [
                "IncludeDirective",
                "org.asteriskjava.config"
            ],
            [
                "ExecDirective",
                "org.asteriskjava.config"
            ],
            [
                "Category",
                "org.asteriskjava.config"
            ],
            [
                "MissingDirectiveParameterException",
                "org.asteriskjava.config"
            ],
            [
                "ExtensionsConfigFileReader",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigInclude",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigExtension",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ExtensionsConfigFile",
                "org.asteriskjava.config.dialplan"
            ],
            [
                "ConfigVariable",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileReader",
                "org.asteriskjava.config"
            ],
            [
                "MissingEqualSignException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFile",
                "org.asteriskjava.config"
            ],
            [
                "UnknownDirectiveException",
                "org.asteriskjava.config"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.config"
            ],
            [
                "LockableSet",
                "org.asteriskjava.lock"
            ],
            [
                "Lockable",
                "org.asteriskjava.lock"
            ],
            [
                "LockableList",
                "org.asteriskjava.lock"
            ],
            [
                "Locker",
                "org.asteriskjava.lock"
            ],
            [
                "LockableMap",
                "org.asteriskjava.lock"
            ],
            [
                "AgiChannelActivityHangup",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "BlindTransferResultListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityDial",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ConfiguableAGIServer",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScript",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiMappingStragegy",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiConfiguration",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "ServiceAgiScriptImpl",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "DuplicateScriptException",
                "org.asteriskjava.pbx.agi.config"
            ],
            [
                "AgiChannelActivityHoldForBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityArrivalListener",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBridge",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityTransientHoldSilence",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityQueue",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityHold",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityMeetme",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityPlayMessage",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityVoicemail",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "ActivityAgi",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "AgiChannelActivityBlindTransfer",
                "org.asteriskjava.pbx.agi"
            ],
            [
                "CallStateAnswered",
                "org.asteriskjava.pbx"
            ],
            [
                "Activity",
                "org.asteriskjava.pbx"
            ],
            [
                "InvalidChannelName",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateData",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "PBX",
                "org.asteriskjava.pbx"
            ],
            [
                "CompletionAdaptor",
                "org.asteriskjava.pbx"
            ],
            [
                "AsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "LogTime",
                "org.asteriskjava.pbx.util"
            ],
            [
                "ManagerError",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.pbx.asterisk.wrap.response"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "HangupAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "PingAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "CommandAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.pbx.asterisk.wrap.actions"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelState",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ChannelEventHelper",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "DialEvent",
                "org.asteriskjava.pbx.asterisk.wrap.events"
            ],
            [
                "UserEvent",
                "org.asteriskjava.pbx.asterisk.wrap.userEvents"
            ],
            [
                "NewExtensionListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallImpl",
                "org.asteriskjava.pbx"
            ],
            [
                "PBXException",
                "org.asteriskjava.pbx"
            ],
            [
                "DialPlanExtension",
                "org.asteriskjava.pbx"
            ],
            [
                "FilteredManagerListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerConnection",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallEndedListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerMonitor",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelProxy",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "FilteredManagerListenerWrapper",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "LiveChannelManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "AsteriskPBX",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "PeerState",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "DialLocalToAgiActivity",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "Peer",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EndPointImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentManagerEventQueue",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CoherentEventFactory",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ActiveCallListener",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "CallTracker",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ListenerManager",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "ChannelImpl",
                "org.asteriskjava.pbx.internal.core"
            ],
            [
                "EventLifeMonitor",
                "org.asteriskjava.pbx.internal.eventQueue"
            ],
            [
                "EventListenerBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateResult",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateBaseClass",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "MonitorCall",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "DialToAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Connector",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "OriginateToExtension",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "HoldAtAgi",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "Dial",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "RedirectToMeetMe",
                "org.asteriskjava.pbx.internal.managerAPI"
            ],
            [
                "NoMeetmeException",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DurationRoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "CallerIDImpl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoom",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "RoomOwner",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "MeetmeRoomControl",
                "org.asteriskjava.pbx.internal.asterisk"
            ],
            [
                "DialActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "HoldActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "DialToAgiActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "JoinActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BridgeActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ParkActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "SplitActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "RedirectToActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "BlindTransferActivityImpl",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ActivityHelper",
                "org.asteriskjava.pbx.internal.activity"
            ],
            [
                "ChannelHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataParked",
                "org.asteriskjava.pbx"
            ],
            [
                "ListenerPriority",
                "org.asteriskjava.pbx"
            ],
            [
                "Channel",
                "org.asteriskjava.pbx"
            ],
            [
                "Call",
                "org.asteriskjava.pbx"
            ],
            [
                "ChannelFactory",
                "org.asteriskjava.pbx"
            ],
            [
                "Trunk",
                "org.asteriskjava.pbx"
            ],
            [
                "Tech",
                "org.asteriskjava.pbx"
            ],
            [
                "AgiChannelActivityAction",
                "org.asteriskjava.pbx"
            ],
            [
                "DefaultAsteriskSettings",
                "org.asteriskjava.pbx"
            ],
            [
                "EndPoint",
                "org.asteriskjava.pbx"
            ],
            [
                "TechType",
                "org.asteriskjava.pbx"
            ],
            [
                "HoldActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BridgeActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "JoinActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "RedirectToActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "ParkActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "BlindTransferActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "SplitActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "DialToAgiActivity",
                "org.asteriskjava.pbx.activities"
            ],
            [
                "NewChannelListener",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityCallback",
                "org.asteriskjava.pbx"
            ],
            [
                "CallHangupListener",
                "org.asteriskjava.pbx"
            ],
            [
                "DTMFTone",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataNewInbound",
                "org.asteriskjava.pbx"
            ],
            [
                "PhoneNumber",
                "org.asteriskjava.pbx"
            ],
            [
                "ActivityStatusEnum",
                "org.asteriskjava.pbx"
            ],
            [
                "CallStateDataTransfer",
                "org.asteriskjava.pbx"
            ],
            [
                "CallDirection",
                "org.asteriskjava.pbx"
            ],
            [
                "CallerID",
                "org.asteriskjava.pbx"
            ],
            [
                "ManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerError",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxCountResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MailboxStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ChallengeResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ModuleCheckResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetVarResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreSettingsResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeBuddyResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "GetConfigResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CommandResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ExtensionStateResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "CoreStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SkypeLicenseStatusResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "SipShowPeerResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "PingResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "MixMonitorResponse",
                "org.asteriskjava.manager.response"
            ],
            [
                "ManagerConnectionState",
                "org.asteriskjava.manager"
            ],
            [
                "DefaultManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "EventAttributesHelper",
                "org.asteriskjava.manager.util"
            ],
            [
                "SendEventGeneratingActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnectionFactory",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerEventListenerProxy",
                "org.asteriskjava.manager"
            ],
            [
                "AbstractManagerEventListener",
                "org.asteriskjava.manager"
            ],
            [
                "ExpectedResponse",
                "org.asteriskjava.manager"
            ],
            [
                "ResponseBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "BridgeEnterEventComparator",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgeState",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "BridgesActive",
                "org.asteriskjava.manager.internal.backwardsCompatibility.bridge"
            ],
            [
                "MeetmeCompatibility",
                "org.asteriskjava.manager.internal.backwardsCompatibility.meetme"
            ],
            [
                "BackwardsCompatibilityForManagerEvents",
                "org.asteriskjava.manager.internal.backwardsCompatibility"
            ],
            [
                "EventBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReader",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriter",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilder",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerUtil",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerConnectionImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "EventBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "Dispatcher",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerReaderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "AsyncEventPump",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ResponseEventsImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ProtocolIdentifierWrapper",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ManagerWriterImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "ActionBuilderImpl",
                "org.asteriskjava.manager.internal"
            ],
            [
                "PingThread",
                "org.asteriskjava.manager"
            ],
            [
                "EventTimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "EventGeneratingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbsoluteTimeoutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkedCallsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MessageSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIDeleteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PlayDtmfAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VoicemailUsersListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddiesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipPeersAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MWIUpdateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ParkAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowContactsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbGetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreSettingsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "IaxPeerListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "OriginateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentCallbackLoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapTransferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UserEventAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ListCommandsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxCountAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeLockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapRestartAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "VariableInheritance",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeKickAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "RedirectAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAddBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "HangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetCdrUserFieldAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ShowDialplanAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueSummaryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeRemoveBuddyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeAccountPropertyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOnAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgiAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PingAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueChangePriorityCallerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UpdateConfigAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "EventsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnmuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExtensionStateAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueRemoveAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeSetSingleVideoSrcAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePauseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListRoomsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ExecAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStopRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "GetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueuePenaltyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "FilterAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDndOffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueAddAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "UnpauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapDialOffhookAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueResetAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StopMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChangeMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MailboxStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowRegistryAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SendTextAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DahdiShowChannelsAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AbstractMeetMeMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AgentLogoffAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LocalOptimizeAwayAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeLicenseListAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeUnlockAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CommandAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "BridgeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "JabberSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ConfbridgeStartRecordAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleSendSMSAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MuteAudioAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueLogAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleCheckAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ZapHangupAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "LoginAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ModuleLoadAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbDelTreeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SipShowPeerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SkypeChatSendAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "MixMonitorMuteAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ManagerAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "QueueMemberRingInUseAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "CoreStatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "StatusAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSIPNotifyAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PJSipShowEndpointAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "ChallengeAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DbPutAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AtxferAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "SetVarAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "DongleShowDevicesAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "PauseMixMonitorAction",
                "org.asteriskjava.manager.action"
            ],
            [
                "AsteriskMapping",
                "org.asteriskjava.manager"
            ],
            [
                "TimeoutException",
                "org.asteriskjava.manager"
            ],
            [
                "AuthenticationFailedException",
                "org.asteriskjava.manager"
            ],
            [
                "ManagerConnection",
                "org.asteriskjava.manager"
            ],
            [
                "DtmfEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SuccessfulAuthEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewConnectedLineEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeAccountStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPenaltyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractQueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AttendedTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueStatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MasqueradeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SendFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ProtocolIdentifierReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DeviceStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "StatusCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DndStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentRingNoAnswerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeStopTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleDeviceEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleShowDevicesCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnpausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEnterEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnparkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxDocumentStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeSentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MixMonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnlinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LogChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateSuccessEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalOptimizationEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FullyBootedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeLicenseListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmClearEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerPushEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VarSetEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LinkEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeChatMessageEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AntennaLevelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointList",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetailComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialBeginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeMergeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractUnParkedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractConfbridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupHandlerRunEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MessageWaitingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewExtenEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelReloadEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtpStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidAccountId",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewSMSBase64Event",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateFailureEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "InvalidPasswordEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "OriginateResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UnholdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JitterBufStatsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PriEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ManagerEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialStateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RequestBadFormatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChallengeResponseFailedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DAHDIChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeJoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractAgentEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HangupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CdrEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelUpdateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShowDialplanCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueCallerAbandonEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "T38FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "HoldedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DisconnectEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "FaxStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JoinEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCENDEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "JabberEventEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransportDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ExtensionStatusEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "TransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCallbackLoginEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChannelTalkingStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ReceiveFaxEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactList",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleNewCMGREvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BlindTransferEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberAddedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "VoicemailUserEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ShutdownEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPauseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpReceiverStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RenameEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "UserEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MusicOnHoldEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListRoomsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MonitorStopEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallGiveUpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DongleCallStateChangeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactStatusEnum",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeLeaveEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeDestroyEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMixMonitorEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DbGetResponseEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PickupEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SkypeBuddyListCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberRemovedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeTalkingRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentLogoffEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractChannelTalkingEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ContactListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerEntryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeerlistCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AsyncAgiEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "EndpointListComplete",
                "org.asteriskjava.manager.event"
            ],
            [
                "ModuleLoadReportEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AuthDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeCreateEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "MeetMeMuteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DahdiShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgiExecEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "SoftHangupRequestEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeListEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ZapShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistrationsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AorDetail",
                "org.asteriskjava.manager.event"
            ],
            [
                "PeersEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "CoreShowChannelsCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewAccountCodeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtpSenderStatEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ListDialplanEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractRtcpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueParamsEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AlarmEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "NewCallerIdEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "LocalBridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueSummaryCompleteEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeExecEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "BridgeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "QueueMemberPausedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ParkedCallTimeOutEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentCalledEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RegistryEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "RtcpReceivedEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AgentDumpEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "AbstractMeetMeEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ChanSpyStartEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ConfbridgeEndEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DtmfEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "DialEvent",
                "org.asteriskjava.manager.event"
            ],
            [
                "ResponseEvents",
                "org.asteriskjava.manager"
            ],
            [
                "SendActionCallback",
                "org.asteriskjava.manager"
            ],
            [
                "Cli",
                "org.asteriskjava"
            ],
            [
                "ExampleCallIn",
                "org.asteriskjava.examples.fastagi"
            ],
            [
                "Hold",
                "org.asteriskjava.examples.activities"
            ],
            [
                "ExamplesAsteriskSettings",
                "org.asteriskjava.examples.activities"
            ],
            [
                "BlindTransfer",
                "org.asteriskjava.examples.activities"
            ],
            [
                "Dial",
                "org.asteriskjava.examples.activities"
            ],
            [
                "MeetMeUserState",
                "org.asteriskjava.live"
            ],
            [
                "MeetMeUser",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueEntry",
                "org.asteriskjava.live"
            ],
            [
                "SecureAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "Extension",
                "org.asteriskjava.live"
            ],
            [
                "ExtensionHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "AbstractAsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "RecordingException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelStateHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "QueueEntryState",
                "org.asteriskjava.live"
            ],
            [
                "LiveObject",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueue",
                "org.asteriskjava.live"
            ],
            [
                "LinkedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchChannelException",
                "org.asteriskjava.live"
            ],
            [
                "NoSuchInterfaceException",
                "org.asteriskjava.live"
            ],
            [
                "ChannelState",
                "org.asteriskjava.live"
            ],
            [
                "HangupCause",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgentImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueEntryImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeUserImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "QueueManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AgentManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskQueueMemberImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "OriginateCallbackData",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskServerImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "AbstractLiveObject",
                "org.asteriskjava.live.internal"
            ],
            [
                "ManagerCommunicationExceptionMapper",
                "org.asteriskjava.live.internal"
            ],
            [
                "CallDetailRecordImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoomImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "ChannelManager",
                "org.asteriskjava.live.internal"
            ],
            [
                "AsteriskChannelImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "ConfigFileImpl",
                "org.asteriskjava.live.internal"
            ],
            [
                "Constants",
                "org.asteriskjava.live.internal"
            ],
            [
                "MeetMeRoom",
                "org.asteriskjava.live"
            ],
            [
                "AgentState",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskChannel",
                "org.asteriskjava.live"
            ],
            [
                "AmaFlags",
                "org.asteriskjava.live"
            ],
            [
                "Voicemailbox",
                "org.asteriskjava.live"
            ],
            [
                "QueueMemberState",
                "org.asteriskjava.live"
            ],
            [
                "DefaultAsteriskServer",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueMember",
                "org.asteriskjava.live"
            ],
            [
                "LiveException",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskServerListener",
                "org.asteriskjava.live"
            ],
            [
                "DialedChannelHistoryEntry",
                "org.asteriskjava.live"
            ],
            [
                "CallDetailRecord",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskAgent",
                "org.asteriskjava.live"
            ],
            [
                "AsteriskQueueListener",
                "org.asteriskjava.live"
            ],
            [
                "Disposition",
                "org.asteriskjava.live"
            ],
            [
                "OriginateCallback",
                "org.asteriskjava.live"
            ],
            [
                "ManagerCommunicationException",
                "org.asteriskjava.live"
            ],
            [
                "CallerId",
                "org.asteriskjava.live"
            ],
            [
                "InvalidPenaltyException",
                "org.asteriskjava.live"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "getDetermineVersionFromString",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Determine the Asterisk version from the string returned by Asterisk. The\n * string should contain \"Asterisk \" followed by a version number.\n *\n * @param coreLine\n * @return the detected version, or null if unknown\n */\npublic static AsteriskVersion getDetermineVersionFromString(String coreLine) {\n    for (AsteriskVersion version : knownVersions) {\n        for (Pattern pattern : version.patterns) {\n            if (pattern.matcher(coreLine).matches()) {\n                return version;\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "getChannel",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "/**\n * Returns the AgiChannel associated with the current thread.\n *\n * @return the AgiChannel associated with the current thread or\n * <code>null</code> if none is associated.\n */\npublic static AgiChannel getChannel() {\n    return AgiConnectionHandler.channel.get();\n}"
            ],
            [
                "getExtension",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * Returns the extension (the part after the last \".\") of the given script.\n *\n * @param scriptName the name of the script to return the extension of.\n * @return the extension of the script or <code>null</code> if there is no\n * extension.\n */\nprotected static String getExtension(String scriptName) {\n    if (scriptName == null) {\n        return null;\n    }\n    int filePosition = scriptName.lastIndexOf(\"/\");\n    String fileName;\n    if (scriptName.lastIndexOf(\"\\\\\") > filePosition) {\n        filePosition = scriptName.lastIndexOf(\"\\\\\");\n    }\n    if (filePosition >= 0) {\n        fileName = scriptName.substring(filePosition + 1);\n    } else {\n        fileName = scriptName;\n    }\n    final int extensionPosition = fileName.lastIndexOf(\".\");\n    if (extensionPosition >= 0) {\n        return fileName.substring(extensionPosition + 1);\n    }\n    return null;\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "protected static Reader getReader(File file) throws FileNotFoundException {\n    final InputStream is = new FileInputStream(file);\n    return new InputStreamReader(is, StandardCharsets.UTF_8);\n}"
            ],
            [
                "getLog",
                "org.asteriskjava.util",
                "LogFactory",
                "/**\n * Returns an instance of Log suitable for logging from the given class.\n *\n * @param clazz the class to create the logger for.\n * @return the created logger.\n */\npublic synchronized static Log getLog(Class<?> clazz) {\n    if (slf4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.slf4j.Logger\");\n            slf4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (slf4jLoggingAvailable) {\n        try {\n            return new Slf4JLogger(clazz);\n        } catch (Throwable e) {\n            slf4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"org.apache.logging.log4j.Logger\");\n            log4jLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            log4jLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (log4jLoggingAvailable) {\n        return new Log4JLogger(clazz);\n    }\n    if (javaLoggingAvailable == null) {\n        try {\n            classLoader.loadClass(\"java.util.logging.Logger\");\n            javaLoggingAvailable = Boolean.TRUE;\n        } catch (Exception e) {\n            javaLoggingAvailable = Boolean.FALSE;\n        }\n    }\n    if (javaLoggingAvailable) {\n        return new JavaLoggingLog(clazz);\n    }\n    return new NullLog();\n}"
            ],
            [
                "byteArrayToBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into a Base64 string as per\n * Preferences.put(byte[]).\n */\npublic static String byteArrayToBase64(byte[] a) {\n    return byteArrayToBase64(a, false);\n}"
            ],
            [
                "byteArrayToAltBase64",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified byte array into an \"alternate representation\"\n * Base64 string.  This non-standard variant uses an alphabet that does\n * not contain the uppercase alphabetic characters, which makes it\n * suitable for use in situations where case-folding occurs.\n */\npublic static String byteArrayToAltBase64(byte[] a) {\n    return byteArrayToBase64(a, true);\n}"
            ],
            [
                "base64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified Base64 string (as per Preferences.get(byte[]))\n * into a byte array.\n *\n * @throws IllegalArgumentException if <tt>s</tt> is not a valid Base64\n *                                  string.\n */\npublic static byte[] base64ToByteArray(String s) {\n    return base64ToByteArray(s, false);\n}"
            ],
            [
                "altBase64ToByteArray",
                "org.asteriskjava.util",
                "Base64",
                "/**\n * Translates the specified \"alternate representation\" Base64 string\n * into a byte array.\n *\n * @throws IllegalArgumentException or ArrayOutOfBoundsException\n *                                  if <tt>s</tt> is not a valid alternate representation\n *                                  Base64 string.\n */\npublic static byte[] altBase64ToByteArray(String s) {\n    return base64ToByteArray(s, true);\n}"
            ],
            [
                "getReader",
                "org.asteriskjava.util.internal.streamreader",
                "FastScannerFactory",
                "public static FastScanner getReader(Readable reader, Pattern pattern) {\n    if (!useLegacyScanner) {\n        if (pattern.pattern().equals(\"\\r\\n\")) {\n            return new FastScannerCrNl(reader);\n        }\n        if (pattern.pattern().equals(\"\\n\")) {\n            return new FastScannerNl(reader);\n        }\n    }\n    // fall back to legacy Scanner\n    logger.warn(\"Using legacy scanner\");\n    Scanner scanner = new Scanner(reader);\n    scanner.useDelimiter(pattern);\n    return getWrappedScanner(scanner);\n}"
            ],
            [
                "isTrue",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if a String represents <code>true</code> or <code>false</code>\n * according to Asterisk's logic. <br>\n * The original implementation is <code>util.c</code> is as follows: <br>\n *\n * <pre>\n *     int ast_true(const char *s)\n *     {\n *         if (!s || ast_strlen_zero(s))\n *             return 0;\n * <br>\n *         if (!strcasecmp(s, &quot;yes&quot;) ||\n *             !strcasecmp(s, &quot;true&quot;) ||\n *             !strcasecmp(s, &quot;y&quot;) ||\n *             !strcasecmp(s, &quot;t&quot;) ||\n *             !strcasecmp(s, &quot;1&quot;) ||\n *             !strcasecmp(s, &quot;on&quot;))\n *             return -1;\n * <br>\n *         return 0;\n *     }\n * </pre>\n *\n * <br>\n * To support the dnd property of\n * {@link org.asteriskjava.manager.event.ZapShowChannelsEvent} this method\n * also consideres the string \"Enabled\" as true.\n *\n * @param o the Object (usually a String) to check for <code>true</code>.\n * @return <code>true</code> if s represents <code>true</code>,\n * <code>false</code> otherwise.\n */\npublic static boolean isTrue(Object o) {\n    if (o == null) {\n        return false;\n    }\n    if (o instanceof Boolean) {\n        return (Boolean) o;\n    }\n    return TRUE_LITERALS.contains(o.toString().toLowerCase(Locale.US));\n}"
            ],
            [
                "isEqual",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * @param a an object\n * @param b an object to be compared with {@code a} for equality\n * @return {@code true} if the arguments are equal to each other and\n * {@code false} otherwise\n */\npublic static boolean isEqual(Object a, Object b) {\n    return a == b || a != null && a.equals(b);\n}"
            ],
            [
                "parseCallerId",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Parses a string for caller id information. <br>\n * The caller id string should be in the form\n * <code>\"Some Name\" &lt;1234&gt;</code>. <br>\n * This resembles <code>ast_callerid_parse</code> in <code>callerid.c</code>\n * but strips any whitespace.\n *\n * @param s the string to parse\n * @return a String[] with name (index 0) and number (index 1)\n */\npublic static String[] parseCallerId(String s) {\n    final String[] result = new String[2];\n    final int lbPosition;\n    final int rbPosition;\n    String name;\n    String number;\n    if (s == null) {\n        return result;\n    }\n    lbPosition = s.lastIndexOf('<');\n    rbPosition = s.lastIndexOf('>');\n    // no opening and closing brace? use value as CallerId name\n    if (lbPosition < 0 || rbPosition < 0) {\n        name = s.trim();\n        if (name.length() == 0) {\n            name = null;\n        }\n        result[0] = name;\n        return result;\n    }\n    number = s.substring(lbPosition + 1, rbPosition).trim();\n    if (number.length() == 0) {\n        number = null;\n    }\n    name = s.substring(0, lbPosition).trim();\n    if (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\") && name.length() > 1) {\n        name = name.substring(1, name.length() - 1).trim();\n    }\n    if (name.length() == 0) {\n        name = null;\n    }\n    result[0] = name;\n    result[1] = number;\n    return result;\n}"
            ],
            [
                "isNull",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Checks if the value of s was <code>null</code> in Asterisk. <br>\n * This method is useful as Asterisk likes to replace <code>null</code>\n * values with different string values like \"unknown\", \"&lt;unknown&gt;\" or\n * \"&lt;null&gt;\". <br>\n * To find such replacements search for <code>S_OR</code> in Asterisk's\n * source code. You will find things like\n *\n * <pre>\n * S_OR(chan-&gt;cid.cid_num, \"&lt;unknown&gt;\")\n * fdprintf(fd, \"agi_callerid: %s\\n\", S_OR(chan-&gt;cid.cid_num, \"unknown\"));\n * </pre>\n * <p>\n * and more...\n *\n * @param s the string to test, may be <code>null</code>. If s is not a\n *          string the only test that is performed is a check for\n *          <code>null</code>.\n * @return <code>true</code> if the s was <code>null</code> in Asterisk;\n * <code>false</code> otherwise.\n */\npublic static boolean isNull(Object s) {\n    if (s == null) {\n        return true;\n    }\n    if (!(s instanceof String)) {\n        return false;\n    }\n    return NULL_LITERALS.contains(((String) s).toLowerCase(Locale.US));\n}"
            ],
            [
                "convertAsteriskBooleanStringToStandardBooleanString",
                "org.asteriskjava.util",
                "AstUtil",
                "/**\n * Converts a non-standard Asterisk boolean String value into something the Boolean class\n * String constructor recognizes.\n * <p>\n * Asterisk can return various strings that represent truth values.\n * This method converts them into standard True/False, or null if null.\n *\n * @param value\n * @return <code>true</code> if the String is \"true\" or \"yes\" (case insensitive).\n * <code>false</code> if the String is \"false\" or \"no\" (case insensitive).\n * <code>null</code> if the String is null.\n * @throws <code>IllegalArgumentException</code> if any other value not listed above.\n */\npublic static String convertAsteriskBooleanStringToStandardBooleanString(String value) {\n    if (value == null)\n        return null;\n    switch(value.toLowerCase()) {\n        case \"true\":\n        case \"yes\":\n            return \"True\";\n        case \"false\":\n        case \"no\":\n            return \"False\";\n        default:\n            throw new IllegalArgumentException(\"value of:\" + value + \" was not recognized as a boolean\");\n    }\n}"
            ],
            [
                "getDate",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Returns the real current date or the date set with overrideCurrentDate().\n *\n * @return the real current date or the date set with overrideCurrentDate().\n */\npublic static Date getDate() {\n    if (currentDate == null) {\n        return new Date();\n    }\n    return currentDate;\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the default time zone.\n *\n * @param s date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s) {\n    return parseDateTime(s, null);\n}"
            ],
            [
                "parseDateTime",
                "org.asteriskjava.util",
                "DateUtil",
                "/**\n * Converts a date in the form of \"yy-MM-dd HH:mm:ss\" to a Date object using\n * the given time zone.\n *\n * @param s  date string in the form of \"yy-MM-dd HH:mm:ss\"\n * @param tz the timezone to use or <code>null</code> for the default time\n *           zone.\n * @return the corresponding Java date object or <code>null</code> if it is\n * not parsable.\n */\npublic static Date parseDateTime(String s, TimeZone tz) {\n    DateFormat df;\n    if (s == null) {\n        return null;\n    }\n    df = new SimpleDateFormat(DATE_TIME_PATTERN);\n    if (tz != null) {\n        df.setTimeZone(tz);\n    }\n    try {\n        return df.parse(s);\n    } catch (ParseException e) {\n        return null;\n    }\n}"
            ],
            [
                "str2state",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * This is the inverse to <code>ast_state2str</code> in <code>channel.c</code>.\n *\n * @param str state as a descriptive text.\n * @return numeric state.\n */\npublic static Integer str2state(String str) {\n    Integer state;\n    if (str == null) {\n        return null;\n    }\n    state = inverseStateMap.get(str);\n    if (state == null) {\n        Matcher matcher = UNKNOWN_STATE_PATTERN.matcher(str);\n        if (matcher.matches()) {\n            try {\n                state = Integer.valueOf(matcher.group(1));\n            } catch (NumberFormatException e) {\n                // should not happen as the pattern requires \\d+ for the state.\n                throw new IllegalArgumentException(\"Unable to convert state '\" + str + \"' to integer representation\", e);\n            }\n        }\n    }\n    return state;\n}"
            ],
            [
                "getGetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Returns a Map of getter methods of the given class.\n * <p>\n * The key of the map contains the name of the attribute that can be\n * accessed by the getter, the value the getter itself (an instance of\n * java.lang.reflect.Method). A method is considered a getter if its name\n * starts with \"get\", it is declared public and takes no arguments.\n *\n * @param clazz the class to return the getters for\n * @return a Map of attributes and their accessor methods (getters)\n */\npublic static Map<String, Method> getGetters(final Class<?> clazz) {\n    final Map<String, Method> accessors = new HashMap<>();\n    final Method[] methods = clazz.getMethods();\n    for (Method method : methods) {\n        String name = null;\n        String methodName = method.getName();\n        if (methodName.startsWith(\"get\")) {\n            name = methodName.substring(3);\n        } else if (methodName.startsWith(\"is\")) {\n            name = methodName.substring(2);\n        }\n        if (name == null || name.length() == 0) {\n            continue;\n        }\n        // skip methods with != 0 parameters\n        if (method.getParameterTypes().length != 0) {\n            continue;\n        }\n        accessors.put(name.toLowerCase(Locale.ENGLISH), method);\n    }\n    return accessors;\n}"
            ],
            [
                "getSetters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * The main benefit here is that there will not be repeated errors when\n * inspecting classes for setters on every single Event being processed.\n * <br>\n * <br>\n * While this method adds caching which is 100 times faster, the time\n * Benefit is largely insignificant as the execution time was already very\n * fast.\n *\n * @param clazz\n * @return\n */\npublic static Map<String, Method> getSetters(Class<?> clazz) {\n    return setterMap.computeIfAbsent(clazz, (c) -> {\n        return getSettersInternal(c);\n    });\n}"
            ],
            [
                "stripIllegalCharacters",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Strips all illegal charaters from the given lower case string. Illegal\n * characters are all characters that are neither characters ('a' to 'z')\n * nor digits ('0' to '9').\n *\n * @param s the original string\n * @return the string with all illegal characters stripped\n */\npublic static String stripIllegalCharacters(String s) {\n    char c;\n    boolean needsStrip = false;\n    StringBuilder sb;\n    if (s == null) {\n        return null;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            // continue\n        } else // NOPMD\n        if (c >= 'a' && c <= 'z') {\n            // continue\n        } else // NOPMD\n        {\n            needsStrip = true;\n            break;\n        }\n    }\n    if (!needsStrip) {\n        return s;\n    }\n    sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        c = s.charAt(i);\n        if (c >= '0' && c <= '9') {\n            sb.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
            ],
            [
                "isClassAvailable",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Checks if the class is available on the current thread's context class\n * loader.\n *\n * @param s fully qualified name of the class to check.\n * @return <code>true</code> if the class is available, <code>false</code>\n * otherwise.\n */\npublic static boolean isClassAvailable(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        classLoader.loadClass(s);\n        return true;\n    } catch (ClassNotFoundException e) {\n        return false;\n    }\n}"
            ],
            [
                "newInstance",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * Creates a new instance of the given class. The class is loaded using the\n * current thread's context class loader and instantiated using its default\n * constructor.\n *\n * @param s fully qualified name of the class to instantiate.\n * @return the new instance or <code>null</code> on failure.\n */\npublic static Object newInstance(String s) {\n    final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        Class<?> clazz = classLoader.loadClass(s);\n        Constructor<?> constructor = clazz.getConstructor();\n        return constructor.newInstance();\n    } catch (ClassNotFoundException e) {\n        return null;\n    } catch (IllegalAccessException e) {\n        return null;\n    } catch (InstantiationException e) {\n        return null;\n    } catch (NoSuchMethodException e) {\n        // no default constructor\n        return null;\n    } catch (InvocationTargetException e) {\n        // constructor threw an exception\n        return null;\n    }\n}"
            ],
            [
                "loadClasses",
                "org.asteriskjava.util",
                "ReflectionUtil",
                "/**\n * find and all non abstract classes that implement/extend\n * baseClassOrInterface in the package packageName\n *\n * @param packageName\n * @param baseClassOrInterface\n * @return\n */\n@SuppressWarnings(\"unchecked\")\npublic static <T> Set<Class<T>> loadClasses(String packageName, Class<T> baseClassOrInterface) {\n    Set<Class<T>> result = new HashSet<>();\n    try {\n        Set<String> classNames = getClassNamesFromPackage(packageName);\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = classLoader.loadClass(packageName + \".\" + className);\n                if (!Modifier.isAbstract(clazz.getModifiers()) && baseClassOrInterface.isAssignableFrom(clazz)) {\n                    result.add((Class<T>) clazz);\n                }\n            } catch (Throwable e) {\n                logger.error(e, e);\n            }\n        }\n        logger.info(\"Loaded \" + result.size());\n    } catch (Exception e) {\n        logger.error(e, e);\n    }\n    return result;\n}"
            ],
            [
                "doWithLock",
                "org.asteriskjava.lock",
                "Locker",
                "public static LockCloser doWithLock(final Lockable lockable) {\n    try {\n        if (diags) {\n            synchronized (sync) {\n                keepList.put(lockable.getLockableId(), lockable);\n            }\n            return lockWithDiags(lockable);\n        }\n        return simpleLock(lockable);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}"
            ],
            [
                "getCaller",
                "org.asteriskjava.lock",
                "Locker",
                "/**\n * determine the caller to Locker\n *\n * @param lockable\n * @return\n */\nstatic String getCaller(Lockable lockable) {\n    StackTraceElement[] trace = new Exception().getStackTrace();\n    String name = lockable.getClass().getCanonicalName();\n    for (StackTraceElement element : trace) {\n        if (element.getFileName() != null && !element.getFileName().contains(Locker.class.getSimpleName())) {\n            name = element.getFileName() + \" \" + element.getMethodName() + \" \" + element.getLineNumber() + \" \" + element.getClassName();\n            break;\n        }\n    }\n    return name;\n}"
            ],
            [
                "addArrivalListener",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static AutoCloseable addArrivalListener(OriginateAction originate, ActivityArrivalListener listener) {\n    final String key = UUID.randomUUID().toString();\n    arrivalListeners.put(key, listener);\n    if (arrivalListeners.size() > 100) {\n        // pick one at random to remove\n        ActivityArrivalListener leaked = arrivalListeners.remove(arrivalListeners.keySet().iterator().next());\n        logger.error(\"Arrival Listeners are leaking\" + leaked.getClass().getCanonicalName());\n    }\n    Map<String, String> vars = new HashMap<>();\n    vars.put(\"_\" + ARRIVAL_KEY, key);\n    originate.setVariables(vars);\n    return new AutoCloseable() {\n\n        @Override\n        public void close() throws Exception {\n            arrivalListeners.remove(key);\n        }\n    };\n}"
            ],
            [
                "getActivePBX",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static PBX getActivePBX() {\n    return AsteriskPBX.SELF;\n}"
            ],
            [
                "getActiveProfile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "public static AsteriskSettings getActiveProfile() {\n    AsteriskSettings activeProfile = profile.get();\n    if (activeProfile == null) {\n        throw new RuntimeException(\"you must call setAsteriskSettings() before getActiveProfile() is called the first time\");\n    }\n    return activeProfile;\n}"
            ],
            [
                "valueOfDesc",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelState",
                "static ChannelState valueOfDesc(String description) {\n    ChannelState theState = null;\n    for (ChannelState aState : ChannelState.values()) {\n        if (aState._text.compareToIgnoreCase(description) == 0) {\n            theState = aState;\n            break;\n        }\n    }\n    return theState;\n}"
            ],
            [
                "registerChannel",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ChannelEventHelper",
                "public static Channel registerChannel(final String channelName, final String uniqueId, final String callerIdNum, final String callerIdName) throws InvalidChannelName {\n    final AsteriskPBX pbx = (AsteriskPBX) PBXFactory.getActivePBX();\n    final Channel channel = pbx.internalRegisterChannel(channelName, uniqueId);\n    channel.setCallerId(pbx.buildCallerID(callerIdNum, callerIdName));\n    return channel;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "ExtensionStatusEvent",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx.asterisk.wrap.events",
                "Status",
                "static Status valueOf(Integer status) {\n    Status theStatus = null;\n    for (Status aStatus : Status.values()) {\n        if (aStatus._status == status) {\n            theStatus = aStatus;\n            break;\n        }\n    }\n    return theStatus;\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static synchronized CoherentManagerConnection getInstance() {\n    if (self == null)\n        throw new IllegalStateException(\"The CoherentManagerConnection has not been initialised\");\n    self.checkConnection();\n    return self;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction());\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendEventGeneratingAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "public static ResponseEvents sendEventGeneratingAction(EventGeneratingAction action, int timeout) throws EventTimeoutException, IllegalArgumentException, IllegalStateException, IOException {\n    org.asteriskjava.manager.ResponseEvents events = CoherentManagerConnection.managerConnection.sendEventGeneratingAction(action.getAJEventGeneratingAction(), timeout);\n    ResponseEvents convertedEvents = new ResponseEvents();\n    for (org.asteriskjava.manager.event.ResponseEvent event : events.getEvents()) {\n        convertedEvents.add(CoherentEventFactory.build(event));\n    }\n    return convertedEvents;\n}"
            ],
            [
                "sendAction",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Sends an Asterisk action and waits for a ManagerRespose.\n *\n * @param action\n * @param timeout timeout in milliseconds\n * @return\n * @throws IllegalArgumentException\n * @throws IllegalStateException\n * @throws IOException\n * @throws TimeoutException\n * @throws OperationNotSupportedException\n */\npublic static ManagerResponse sendAction(final ManagerAction action, final int timeout) throws IllegalArgumentException, IllegalStateException, IOException, TimeoutException {\n    if (logger.isDebugEnabled())\n        CoherentManagerConnection.logger.debug(\"Sending Action: \" + action.toString());\n    CoherentManagerConnection.getInstance();\n    if ((CoherentManagerConnection.managerConnection != null) && (CoherentManagerConnection.managerConnection.getState() == ManagerConnectionState.CONNECTED)) {\n        final org.asteriskjava.manager.action.ManagerAction ajAction = action.getAJAction();\n        org.asteriskjava.manager.response.ManagerResponse response = CoherentManagerConnection.managerConnection.sendAction(ajAction, timeout);\n        ManagerResponse convertedResponse = null;\n        // UserEventActions always return a null\n        if (response != null)\n            convertedResponse = CoherentEventFactory.build(response);\n        if ((convertedResponse != null) && (convertedResponse.getResponse().compareToIgnoreCase(\"Error\") == 0)) {\n            CoherentManagerConnection.logger.warn(\"Action '\" + ajAction + \"' failed, Response: \" + convertedResponse.getResponse() + \" Message: \" + convertedResponse.getMessage());\n        }\n        return convertedResponse;\n    }\n    throw new IllegalStateException(\"not connected.\");\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.core",
                "PeerMonitor",
                "public static synchronized PeerMonitor getInstance() {\n    if (PeerMonitor.self == null) {\n        //$NON-NLS-1$\n        throw new IllegalStateException(\"You must call PeerMonitor.init()\");\n    }\n    return PeerMonitor.self;\n}"
            ],
            [
                "getSIPADDHeader",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "static public String getSIPADDHeader(final boolean inherit, final boolean targetIsSIP) {\n    //$NON-NLS-1$\n    String sipHeader = \"SIPADDHEADER\";\n    if (!targetIsSIP || inherit) {\n        //$NON-NLS-1$\n        sipHeader = \"__\" + sipHeader;\n    }\n    return sipHeader;\n}"
            ],
            [
                "valueByName",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByName(final String value) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(value) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    return status;\n}"
            ],
            [
                "valueByChannelState",
                "org.asteriskjava.pbx.internal.core",
                "PeerState",
                "public static PeerState valueByChannelState(final ChannelState state) {\n    PeerState status = NOTSET;\n    for (PeerState aState : PeerState.values()) {\n        if (aState.getAsteriskStateName().compareToIgnoreCase(state.name()) == 0) {\n            status = aState;\n            break;\n        }\n    }\n    if (status == NOTSET)\n        //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        logger.warn(\"Unknown channelState: \" + state + \" recieved\", new Throwable(\"Unknown channelState\"));\n    return status;\n}"
            ],
            [
                "getShadowEvent",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static Class<? extends ManagerEvent> getShadowEvent(org.asteriskjava.manager.event.ManagerEvent event) {\n    Class<? extends ManagerEvent> result = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (result == null) {\n        Class<? extends ResponseEvent> response = CoherentEventFactory.mapResponses.get(event.getClass());\n        result = response;\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerEvent build(final org.asteriskjava.manager.event.ManagerEvent event) {\n    ManagerEvent iEvent = null;\n    Class<? extends ManagerEvent> target = null;\n    if (event instanceof org.asteriskjava.manager.event.ResponseEvent)\n        target = CoherentEventFactory.mapResponses.get(event.getClass());\n    else\n        target = CoherentEventFactory.mapEvents.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            iEvent = target.getDeclaredConstructor(event.getClass()).newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return iEvent;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ResponseEvent build(org.asteriskjava.manager.event.ResponseEvent event) {\n    ResponseEvent response = null;\n    final Class<? extends ResponseEvent> target = CoherentEventFactory.mapResponses.get(event.getClass());\n    if (target == null) {\n        //$NON-NLS-1$ //$NON-NLS-2$\n        logger.warn(\"The given event \" + event.getClass().getName() + \" is not supported \");\n    } else {\n        try {\n            final Constructor<? extends ResponseEvent> declaredConstructor = target.getDeclaredConstructor(event.getClass());\n            response = declaredConstructor.newInstance(event);\n        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            CoherentEventFactory.logger.error(e, e);\n        }\n    }\n    return response;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static ManagerResponse build(org.asteriskjava.manager.response.ManagerResponse response) {\n    ManagerResponse result;\n    if (response instanceof org.asteriskjava.manager.response.CommandResponse) {\n        result = new CommandResponse(response);\n    } else if (response instanceof org.asteriskjava.manager.response.ManagerError) {\n        result = new ManagerError(response);\n    } else {\n        result = new ManagerResponse(response);\n    }\n    return result;\n}"
            ],
            [
                "build",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "public static org.asteriskjava.manager.action.ManagerAction build(ManagerAction action) {\n    org.asteriskjava.manager.action.ManagerAction result = null;\n    // final Class<? extends org.asteriskjava.manager.action.ManagerAction>\n    // target = CoherentEventFactory.mapActions.get(action.getClass());\n    if (logger.isDebugEnabled())\n        //$NON-NLS-1$\n        logger.debug(\"Action \" + action);\n    // if (target == null)\n    // {\n    // logger.warn(\"The given action \" + action.getClass().getName() + \" is\n    // not supported \"); //$NON-NLS-1$ //$NON-NLS-2$\n    // }\n    // else\n    {\n        result = action.getAJAction();\n    }\n    return result;\n}"
            ],
            [
                "buildFromComponents",
                "org.asteriskjava.pbx.internal.asterisk",
                "CallerIDImpl",
                "/**\n * This is a little helper class which will buid the name component of a\n * clid from the first and lastnames. If both firstname and lastname are\n * null then the name component will be an empty string.\n *\n * @param firstname the person's firstname, may be null.\n * @param lastname  the person's lastname, may be null\n * @param number    the phone number.\n * @return\n */\npublic static CallerID buildFromComponents(final String firstname, final String lastname, final String number) {\n    //$NON-NLS-1$\n    String name = \"\";\n    if (firstname != null) {\n        name += firstname.trim();\n    }\n    if (lastname != null) {\n        if (name.length() > 0) {\n            //$NON-NLS-1$\n            name += \" \";\n        }\n        name += lastname.trim();\n    }\n    return PBXFactory.getActivePBX().buildCallerID(number, name);\n}"
            ],
            [
                "getInstance",
                "org.asteriskjava.pbx.internal.asterisk",
                "MeetmeRoomControl",
                "public static MeetmeRoomControl getInstance() {\n    if (MeetmeRoomControl.self.get() == null) {\n        throw new IllegalStateException(//$NON-NLS-1$\n        \"The MeetmeRoomControl has not been initialised. Please call MeetmeRoomControl.init().\");\n    }\n    return MeetmeRoomControl.self.get();\n}"
            ],
            [
                "getNextChannelId",
                "org.asteriskjava.pbx",
                "ChannelFactory",
                "public static long getNextChannelId() {\n    return nextChannelId.incrementAndGet();\n}"
            ],
            [
                "getTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * Extracts the technology from a fully qualified endpoint string of the form:\n * TECH/NNNN\n *\n * @param fullyQualifiedEndPoint\n * @return\n */\npublic static TechType getTech(final String fullyQualifiedEndPoint) {\n    if (!TechType.hasValidTech(fullyQualifiedEndPoint)) {\n        throw new IllegalArgumentException(//$NON-NLS-1$\n        \"The provided end point '\" + fullyQualifiedEndPoint + //$NON-NLS-1$\n        \"' must contain a tech prefix. e.g. SIP/100\");\n    }\n    //$NON-NLS-1$\n    final String techName = fullyQualifiedEndPoint.substring(0, fullyQualifiedEndPoint.indexOf(\"/\"));\n    return TechType.valueOf(techName.toUpperCase());\n}"
            ],
            [
                "hasValidTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a valid tech descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasValidTech(final String endPointName) {\n    TechType tech = UNKNOWN;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index >= 1) {\n        final String techName = endPointName.substring(0, index);\n        try {\n            tech = TechType.valueOf(techName.toUpperCase());\n        } catch (final IllegalArgumentException e) {\n            //$NON-NLS-1$\n            TechType.logger.error(\"Invalid tech for endpoint:\" + endPointName);\n        }\n    }\n    return tech != UNKNOWN;\n}"
            ],
            [
                "hasTech",
                "org.asteriskjava.pbx",
                "TechType",
                "/**\n * returns true if the endPoint name contains a tech descriptor even if it isn't\n * a known descriptor.\n *\n * @param endPointName\n * @return\n */\npublic static boolean hasTech(final String endPointName) {\n    boolean hasTech = false;\n    //$NON-NLS-1$\n    final int index = endPointName.indexOf(\"/\");\n    if (index != -1) {\n        hasTech = true;\n    }\n    return hasTech;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.pbx",
                "CallDirection",
                "public static CallDirection valueOf(final int dbValue) {\n    CallDirection result = null;\n    for (final CallDirection direction : CallDirection.values()) {\n        if (direction.dbValue == dbValue) {\n            result = direction;\n            break;\n        }\n    }\n    return result;\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "ManagerEventListenerProxy",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "getThreadQueueSize",
                "org.asteriskjava.manager",
                "Access",
                "public static int getThreadQueueSize(ManagerEventListenerProxy proxy) {\n    return proxy.executor.getQueue().size();\n}"
            ],
            [
                "toHexString",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Converts a byte array to a hex string representing it. The hex digits are\n * lower case.\n *\n * @param b the byte array to convert\n * @return the hex representation of b\n */\npublic static String toHexString(byte[] b) {\n    final StringBuilder sb;\n    sb = new StringBuilder(b.length * 2);\n    for (byte aB : b) {\n        sb.append(hexChar[(aB & 0xf0) >>> 4]);\n        sb.append(hexChar[aB & 0x0f]);\n    }\n    return sb.toString();\n}"
            ],
            [
                "getInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Returns the internal action id contained in the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the internal action id that has been added before.\n * @see #addInternalActionId(String, String)\n */\npublic static String getInternalActionId(String actionId) {\n    final int delimiterIndex;\n    if (actionId == null) {\n        return null;\n    }\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        return actionId.substring(0, delimiterIndex);\n    }\n    return null;\n}"
            ],
            [
                "stripInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Strips the internal action id from the given action id.\n *\n * @param actionId the action id prefixed by the internal action id as\n *                 received from Asterisk.\n * @return the original action id, that is the action id as it was before\n * the internal action id was added.\n * @see #addInternalActionId(String, String)\n */\npublic static String stripInternalActionId(String actionId) {\n    int delimiterIndex;\n    delimiterIndex = actionId.indexOf(INTERNAL_ACTION_ID_DELIMITER);\n    if (delimiterIndex > 0) {\n        if (actionId.length() > delimiterIndex + 1) {\n            return actionId.substring(delimiterIndex + 1);\n        }\n        return null;\n    }\n    return null;\n}"
            ],
            [
                "addInternalActionId",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "/**\n * Adds the internal action id to the given action id.\n *\n * @param actionId         the action id as set by the user.\n * @param internalActionId the internal action id to add.\n * @return the action id prefixed by the internal action id suitable to be\n * sent to Asterisk.\n */\npublic static String addInternalActionId(String actionId, String internalActionId) {\n    if (actionId == null) {\n        return internalActionId + INTERNAL_ACTION_ID_DELIMITER;\n    }\n    return internalActionId + INTERNAL_ACTION_ID_DELIMITER + actionId;\n}"
            ],
            [
                "determineSetterName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineSetterName(String getterName) {\n    if (getterName.startsWith(\"get\")) {\n        return \"set\" + getterName.substring(3);\n    } else if (getterName.startsWith(\"is\")) {\n        return \"set\" + getterName.substring(2);\n    } else {\n        throw new IllegalArgumentException(\"Getter '\" + getterName + \"' doesn't start with either 'get' or 'is'\");\n    }\n}"
            ],
            [
                "determineFieldName",
                "org.asteriskjava.manager.internal",
                "ActionBuilderImpl",
                "static String determineFieldName(String accessorName) {\n    if (accessorName.startsWith(\"get\")) {\n        return lcFirst(accessorName.substring(3));\n    } else if (accessorName.startsWith(\"is\")) {\n        return lcFirst(accessorName.substring(2));\n    } else if (accessorName.startsWith(\"set\")) {\n        return lcFirst(accessorName.substring(3));\n    } else {\n        throw new IllegalArgumentException(\"Accessor '\" + accessorName + \"' doesn't start with either 'get', 'is' or 'set'\");\n    }\n}"
            ],
            [
                "getSerialVersionUID",
                "org.asteriskjava.manager.event",
                "InvalidAccountId",
                "public static long getSerialVersionUID() {\n    return serialVersionUID;\n}"
            ],
            [
                "getSerialversionuid",
                "org.asteriskjava.manager.event",
                "TransportDetail",
                "public static long getSerialversionuid() {\n    return serialVersionUID;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "ChannelState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.AbstractChannelStateEvent#getChannelState()}.\n *\n * @param status integer representation of the status.\n * @return corresponding ChannelState object or <code>null</code> if none matches.\n */\npublic static ChannelState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (ChannelState tmp : ChannelState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "getByCode",
                "org.asteriskjava.live",
                "HangupCause",
                "/**\n * Returns the HangupCode by its numeric cause code.<p>\n * Using this method in client code is discouraged.\n *\n * @param code the numeric cause code.\n * @return the corresponding HangupCode enum or\n * <code>null</code> if there is no such HangupCause.\n */\npublic static synchronized HangupCause getByCode(int code) {\n    if (causes == null) {\n        causes = new HashMap<>();\n        for (HangupCause cause : values()) {\n            causes.put(cause.code, cause);\n        }\n    }\n    return causes.get(code);\n}"
            ],
            [
                "mapSendActionException",
                "org.asteriskjava.live.internal",
                "ManagerCommunicationExceptionMapper",
                "/**\n * Maps exceptions received from\n * {@link org.asteriskjava.manager.ManagerConnection} when sending a\n * {@link org.asteriskjava.manager.action.ManagerAction} to the corresponding\n * {@link org.asteriskjava.live.ManagerCommunicationException}.\n *\n * @param actionName name of the action that has been tried to send\n * @param exception  exception received\n * @return the corresponding ManagerCommunicationException\n */\nstatic ManagerCommunicationException mapSendActionException(String actionName, Exception exception) {\n    if (exception instanceof IllegalStateException) {\n        return new ManagerCommunicationException(\"Not connected to Asterisk Server\", exception);\n    } else if (exception instanceof EventTimeoutException) {\n        return new ManagerCommunicationException(\"Timeout waiting for events from \" + actionName + \"Action\", exception);\n    } else {\n        return new ManagerCommunicationException(\"Unable to send \" + actionName + \"Action\", exception);\n    }\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "QueueMemberState",
                "/**\n * Returns value specified by int. Use this to transform\n * {@link org.asteriskjava.manager.event.QueueMemberEvent#getStatus()}.\n *\n * @param status integer representation of the status.\n * @return corresponding QueueMemberState object or <code>null</code> if none matches.\n */\npublic static QueueMemberState valueOf(Integer status) {\n    if (status == null) {\n        return null;\n    }\n    for (QueueMemberState tmp : QueueMemberState.values()) {\n        if (tmp.getStatus() == status) {\n            return tmp;\n        }\n    }\n    return null;\n}"
            ],
            [
                "valueOf",
                "org.asteriskjava.live",
                "CallerId",
                "/**\n * Parses a caller id string in the form\n * <code>\"Some Name\" &lt;1234&gt;</code> to a CallerId object.\n *\n * @param s the caller id string to parse.\n * @return the corresponding CallerId object which is never <code>null</code>.\n * @see AstUtil#parseCallerId(String)\n */\npublic static CallerId valueOf(String s) {\n    final String[] parsedCallerId;\n    parsedCallerId = AstUtil.parseCallerId(s);\n    return new CallerId(parsedCallerId[0], parsedCallerId[1]);\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "ASTERISK_1_0",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.0 series.\n */\npublic static final AsteriskVersion ASTERISK_1_0 = new AsteriskVersion(100, \"Asterisk 1.0\");"
            ],
            [
                "ASTERISK_1_2",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.2 series.\n */\npublic static final AsteriskVersion ASTERISK_1_2 = new AsteriskVersion(120, \"Asterisk 1.2\");"
            ],
            [
                "ASTERISK_1_4",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.4 series.\n *\n * @since 0.3\n */\npublic static final AsteriskVersion ASTERISK_1_4 = new AsteriskVersion(140, \"Asterisk 1.4\");"
            ],
            [
                "ASTERISK_1_6",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.6 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_6 = new AsteriskVersion(160, \"Asterisk 1.6\");"
            ],
            [
                "ASTERISK_1_8",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 1.8 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_1_8 = new AsteriskVersion(180, \"Asterisk 1.8\");"
            ],
            [
                "ASTERISK_10",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 10 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_10 = new AsteriskVersion(1000, \"Asterisk 10\");"
            ],
            [
                "ASTERISK_11",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 11 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_11 = new AsteriskVersion(1100, \"Asterisk 11\");"
            ],
            [
                "ASTERISK_12",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 12 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_12 = new AsteriskVersion(1200, \"Asterisk 12\");"
            ],
            [
                "ASTERISK_13",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 13 series.\n *\n * @since 1.0.0\n */\npublic static final AsteriskVersion ASTERISK_13 = new AsteriskVersion(1300, \"Asterisk 13\", VERSION_PATTERN_13, VERSION_PATTERN_CERTIFIED_13);"
            ],
            [
                "ASTERISK_14",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 14 series.\n *\n * @since 1.1.0\n */\npublic static final AsteriskVersion ASTERISK_14 = new AsteriskVersion(1400, \"Asterisk 14\", VERSION_PATTERN_14);"
            ],
            [
                "ASTERISK_15",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 15 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_15 = new AsteriskVersion(1500, \"Asterisk 15\", VERSION_PATTERN_15);"
            ],
            [
                "ASTERISK_16",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 16 series.\n *\n * @since 2.1.0\n */\npublic static final AsteriskVersion ASTERISK_16 = new AsteriskVersion(1600, \"Asterisk 16\", VERSION_PATTERN_16, VERSION_PATTERN_CERTIFIED_16);"
            ],
            [
                "ASTERISK_17",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 17 series.\n *\n * @since 3.7.0\n */\npublic static final AsteriskVersion ASTERISK_17 = new AsteriskVersion(1700, \"Asterisk 17\", VERSION_PATTERN_17);"
            ],
            [
                "ASTERISK_18",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 18 series.\n *\n * @since 3.13.0\n */\npublic static final AsteriskVersion ASTERISK_18 = new AsteriskVersion(1800, \"Asterisk 18\", VERSION_PATTERN_18, VERSION_PATTERN_CERTIFIED_18);"
            ],
            [
                "ASTERISK_19",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 19 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_19 = new AsteriskVersion(1900, \"Asterisk 19\", VERSION_PATTERN_19);"
            ],
            [
                "ASTERISK_20",
                "org.asteriskjava",
                "AsteriskVersion",
                "/**\n * Represents the Asterisk 20 series.\n *\n * @since 3.36.2\n */\npublic static final AsteriskVersion ASTERISK_20 = new AsteriskVersion(2000, \"Asterisk 20\", VERSION_PATTERN_20);"
            ],
            [
                "DEFAULT_VERSION",
                "org.asteriskjava",
                "AsteriskVersion",
                "// current debian stable version, as of 09/10/2018\npublic static final AsteriskVersion DEFAULT_VERSION = ASTERISK_16;"
            ],
            [
                "AGI_CONNECTION_HANDLERS",
                "org.asteriskjava.fastagi.internal",
                "AgiConnectionHandler",
                "public static final ConcurrentMap<AgiConnectionHandler, AgiChannel> AGI_CONNECTION_HANDLERS = new ConcurrentHashMap<>(32);"
            ],
            [
                "REQUEST",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI request is made available to scripts.\n */\npublic static final String REQUEST = \"request\";"
            ],
            [
                "CHANNEL",
                "org.asteriskjava.fastagi",
                "ScriptEngineMappingStrategy",
                "/**\n * The binding under which the AGI channel is made available to scripts.\n */\npublic static final String CHANNEL = \"channel\";"
            ],
            [
                "CRNL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern CRNL_PATTERN = Pattern.compile(\"\\r\\n\");"
            ],
            [
                "NL_PATTERN",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "public static final Pattern NL_PATTERN = Pattern.compile(\"\\n\");"
            ],
            [
                "MAX_SOCKET_READ_TIMEOUT_MILLIS",
                "org.asteriskjava.util.internal",
                "SocketConnectionFacadeImpl",
                "/**\n * 3 hrs = 3 * 3660 * 1000\n */\npublic static final int MAX_SOCKET_READ_TIMEOUT_MILLIS = 10800000;"
            ],
            [
                "FQCN",
                "org.asteriskjava.util.internal",
                "Slf4JLogger",
                "static String FQCN = Slf4JLogger.class.getName();"
            ],
            [
                "TRACE_DIRECTORY_PROPERTY",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "public static final String TRACE_DIRECTORY_PROPERTY = \"org.asteriskjava.trace.directory\";"
            ],
            [
                "FILE_PREFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_PREFIX = \"aj-trace\";"
            ],
            [
                "FILE_SUFFIX",
                "org.asteriskjava.util.internal",
                "FileTrace",
                "protected static final String FILE_SUFFIX = \".txt\";"
            ],
            [
                "AST_STATE_DOWN",
                "org.asteriskjava.util",
                "AstState",
                "/* from include/asterisk/channel.h */\n/**\n * Channel is down and available.\n */\npublic static final int AST_STATE_DOWN = 0;"
            ],
            [
                "AST_STATE_RSRVD",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is down, but reserved.\n */\npublic static final int AST_STATE_RSRVD = 1;"
            ],
            [
                "AST_STATE_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel is off hook.\n */\npublic static final int AST_STATE_OFFHOOK = 2;"
            ],
            [
                "AST_STATE_DIALING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed.\n */\npublic static final int AST_STATE_DIALING = 3;"
            ],
            [
                "AST_STATE_RING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is ringing.\n */\npublic static final int AST_STATE_RING = 4;"
            ],
            [
                "AST_STATE_RINGING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Remote end is ringing.\n */\npublic static final int AST_STATE_RINGING = 5;"
            ],
            [
                "AST_STATE_UP",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is up.\n */\npublic static final int AST_STATE_UP = 6;"
            ],
            [
                "AST_STATE_BUSY",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Line is busy.\n */\npublic static final int AST_STATE_BUSY = 7;"
            ],
            [
                "AST_STATE_DIALING_OFFHOOK",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Digits (or equivalent) have been dialed while offhook.\n */\npublic static final int AST_STATE_DIALING_OFFHOOK = 8;"
            ],
            [
                "AST_STATE_PRERING",
                "org.asteriskjava.util",
                "AstState",
                "/**\n * Channel has detected an incoming call and is waiting for ring.\n */\npublic static final int AST_STATE_PRERING = 9;"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.agi.config",
                "ServiceAgiScriptImpl",
                "static transient Log logger = LogFactory.getLog(ServiceAgiScriptImpl.class);"
            ],
            [
                "ARRIVAL_KEY",
                "org.asteriskjava.pbx.agi",
                "ActivityAgi",
                "public static final String ARRIVAL_KEY = \"ActivityAgiArrivalKey\";"
            ],
            [
                "profile",
                "org.asteriskjava.pbx",
                "PBXFactory",
                "final static AtomicReference<AsteriskSettings> profile = new AtomicReference<>();"
            ],
            [
                "eventStatistics",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "static Map<String, Integer> eventStatistics = new HashMap<>();"
            ],
            [
                "connector",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * Used to instantiate the manager connection including the initial login.\n */\nstatic Connector connector = null;"
            ],
            [
                "managerConnection",
                "org.asteriskjava.pbx.internal.core",
                "CoherentManagerConnection",
                "/**\n * The actual manager connection. AJ actually maintains two socket\n * connections one for reading events and the other writing events.\n */\nstatic ManagerConnection managerConnection = null;"
            ],
            [
                "ACTIVITY_AGI",
                "org.asteriskjava.pbx.internal.core",
                "AsteriskPBX",
                "public static final String ACTIVITY_AGI = \"activityAgi\";"
            ],
            [
                "mapEvents",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Events\nstatic Hashtable<Class<org.asteriskjava.manager.event.ManagerEvent>, Class<ManagerEvent>> mapEvents = new Hashtable<>();"
            ],
            [
                "mapResponses",
                "org.asteriskjava.pbx.internal.core",
                "CoherentEventFactory",
                "// Response\nstatic Hashtable<Class<? extends org.asteriskjava.manager.event.ResponseEvent>, Class<? extends ResponseEvent>> mapResponses = new Hashtable<>();"
            ],
            [
                "ZOMBIE",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String ZOMBIE = \"<ZOMBIE>\";"
            ],
            [
                "MASQ",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String MASQ = \"<MASQ>\";"
            ],
            [
                "UNKNOWN_UNIQUE_ID",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$\npublic static final String UNKNOWN_UNIQUE_ID = \"-1\";"
            ],
            [
                "_actions",
                "org.asteriskjava.pbx.internal.core",
                "ChannelImpl",
                "//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\npublic static final String[] _actions = new String[] { \"PARKED/\", \"ASYNCGOTO/\", \"BRIDGE/\" };"
            ],
            [
                "logger",
                "org.asteriskjava.pbx.internal.managerAPI",
                "OriginateBaseClass",
                "/*\n     * this class generates and issues ActionEvents to asterisk through the\n     * manager. This is the asterisk coal face.\n     */\nprotected static final Log logger = LogFactory.getLog(OriginateBaseClass.class);"
            ],
            [
                "INTERNAL_ACTION_ID_DELIMITER",
                "org.asteriskjava.manager.internal",
                "ManagerUtil",
                "public static final char INTERNAL_ACTION_ID_DELIMITER = '#';"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbsoluteTimeoutAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 3073237188819825503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LogoffAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7576797478570238525L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreShowChannelsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIDeleteAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddiesAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MWIUpdateAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "GetConfigAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreSettingsAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "OriginateAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxCountAction",
                "static final long serialVersionUID = -6900421919824575941L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "RedirectAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1869279324159418150L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAddBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "HangupAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeRemoveBuddyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AbstractManagerAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -7667827187378395689L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "PROPERTY_SKYPENAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_SKYPENAME = \"skypename\";"
            ],
            [
                "PROPERTY_TIMEZONE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_TIMEZONE = \"timezone\";"
            ],
            [
                "PROPERTY_AVAILABILITY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_AVAILABILITY = \"availability\";"
            ],
            [
                "PROPERTY_FULLNAME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_FULLNAME = \"fullname\";"
            ],
            [
                "PROPERTY_LANGUAGE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_LANGUAGE = \"language\";"
            ],
            [
                "PROPERTY_COUNTRY",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_COUNTRY = \"country\";"
            ],
            [
                "PROPERTY_PHONE_HOME",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_HOME = \"phone_home\";"
            ],
            [
                "PROPERTY_PHONE_OFFICE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_OFFICE = \"phone_office\";"
            ],
            [
                "PROPERTY_PHONE_MOBILE",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_PHONE_MOBILE = \"phone_mobile\";"
            ],
            [
                "PROPERTY_ABOUT",
                "org.asteriskjava.manager.action",
                "SkypeAccountPropertyAction",
                "public static final String PROPERTY_ABOUT = \"about\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgiAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AgentsAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -320228893513973367L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "ACTION_NEWCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "/* Actions accepted by commands in the sequence */\npublic static final String ACTION_NEWCAT = \"NewCat\";"
            ],
            [
                "ACTION_RENAMECAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_RENAMECAT = \"RenameCat\";"
            ],
            [
                "ACTION_DELCAT",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELCAT = \"DelCat\";"
            ],
            [
                "ACTION_UPDATE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_UPDATE = \"Update\";"
            ],
            [
                "ACTION_DELETE",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_DELETE = \"Delete\";"
            ],
            [
                "ACTION_APPEND",
                "org.asteriskjava.manager.action",
                "UpdateConfigAction",
                "public static final String ACTION_APPEND = \"Append\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "EventsAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -8042435402644984875L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExtensionStateAction",
                "static final long serialVersionUID = 6537408784388696403L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ExecAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "FilterAction",
                "static final long serialVersionUID = 5537508784388696503L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseStatusAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "MailboxStatusAction",
                "static final long serialVersionUID = -3845028207155711950L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeLicenseListAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CommandAction",
                "static final long serialVersionUID = 4753117770471622025L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "DongleSendSMSAction",
                "static final long serialVersionUID = 8194597741743334704L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleCheckAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "LoginAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -2600694249339115032L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "SUBSYSTEM_CDR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_CDR = \"cdr\";"
            ],
            [
                "SUBSYSTEM_ENUM",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_ENUM = \"enum\";"
            ],
            [
                "SUBSYSTEM_DNSMGR",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_DNSMGR = \"dnsmgr\";"
            ],
            [
                "SUBSYSTEM_EXTCONFIG",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_EXTCONFIG = \"extconfig\";"
            ],
            [
                "SUBSYSTEM_MANAGER",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_MANAGER = \"manager\";"
            ],
            [
                "SUBSYSTEM_RTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_RTP = \"rtp\";"
            ],
            [
                "SUBSYSTEM_HTTP",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String SUBSYSTEM_HTTP = \"http\";"
            ],
            [
                "LOAD_TYPE_LOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_LOAD = \"load\";"
            ],
            [
                "LOAD_TYPE_UNLOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_UNLOAD = \"unload\";"
            ],
            [
                "LOAD_TYPE_RELOAD",
                "org.asteriskjava.manager.action",
                "ModuleLoadAction",
                "public static final String LOAD_TYPE_RELOAD = \"reload\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "SkypeChatSendAction",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "CoreStatusAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "StatusAction",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "ChallengeAction",
                "static final long serialVersionUID = 7240516124871953971L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.action",
                "AtxferAction",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "STATUS_LOGGED_IN",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_IN = \"Logged In\";"
            ],
            [
                "STATUS_LOGGED_OUT",
                "org.asteriskjava.manager.event",
                "SkypeAccountStatusEvent",
                "static final String STATUS_LOGGED_OUT = \"Logged Out\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREGISTERED = \"Unregistered\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_LAGGED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_LAGGED = \"Lagged\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "PeerStatusEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -0L;"
            ],
            [
                "CEL_EVENT_CHAN_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_START = \"CHAN_START\";"
            ],
            [
                "CEL_EVENT_CHAN_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_CHAN_END = \"CHAN_END\";"
            ],
            [
                "CEL_EVENT_ANSWER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ANSWER = \"ANSWER\";"
            ],
            [
                "CEL_EVENT_HANGUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_HANGUP = \"HANGUP\";"
            ],
            [
                "CEL_EVENT_BRIDGE_ENTER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_ENTER = \"BRIDGE_ENTER\";"
            ],
            [
                "CEL_EVENT_BRIDGE_EXIT",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BRIDGE_EXIT = \"BRIDGE_EXIT\";"
            ],
            [
                "CEL_EVENT_APP_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_START = \"APP_START\";"
            ],
            [
                "CEL_EVENT_APP_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_APP_END = \"APP_END\";"
            ],
            [
                "CEL_EVENT_PARK_START",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_START = \"PARK_START\";"
            ],
            [
                "CEL_EVENT_PARK_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PARK_END = \"PARK_END\";"
            ],
            [
                "CEL_EVENT_BLINDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_BLINDTRANSFER = \"BLINDTRANSFER\";"
            ],
            [
                "CEL_EVENT_ATTENDEDTRANSFER",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_ATTENDEDTRANSFER = \"ATTENDEDTRANSFER\";"
            ],
            [
                "CEL_EVENT_PICKUP",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_PICKUP = \"PICKUP\";"
            ],
            [
                "CEL_EVENT_FORWARD",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_FORWARD = \"FORWARD\";"
            ],
            [
                "CEL_EVENT_LINKEDID_END",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LINKEDID_END = \"LINKEDID_END\";"
            ],
            [
                "CEL_EVENT_LOCAL_OPTIMIZE",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_LOCAL_OPTIMIZE = \"LOCAL_OPTIMIZE\";"
            ],
            [
                "CEL_EVENT_USER_DEFINED",
                "org.asteriskjava.manager.event",
                "CelEvent",
                "public static final String CEL_EVENT_USER_DEFINED = \"USER_DEFINED\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "MasqueradeEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DndStateEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "AST_DEVICE_UNKNOWN",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNKNOWN = 0;"
            ],
            [
                "AST_DEVICE_NOT_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "/**\n * Queue member is available.\n */\npublic static final int AST_DEVICE_NOT_INUSE = 1;"
            ],
            [
                "AST_DEVICE_INUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INUSE = 2;"
            ],
            [
                "AST_DEVICE_BUSY",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_BUSY = 3;"
            ],
            [
                "AST_DEVICE_INVALID",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_INVALID = 4;"
            ],
            [
                "AST_DEVICE_UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_UNAVAILABLE = 5;"
            ],
            [
                "AST_DEVICE_RINGING",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGING = 6;"
            ],
            [
                "AST_DEVICE_RINGINUSE",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_RINGINUSE = 7;"
            ],
            [
                "AST_DEVICE_ONHOLD",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final int AST_DEVICE_ONHOLD = 8;"
            ],
            [
                "MEMBERSHIP_STATIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_STATIC = \"static\";"
            ],
            [
                "MEMBERSHIP_DYNAMIC",
                "org.asteriskjava.manager.event",
                "QueueMemberEvent",
                "public static final String MEMBERSHIP_DYNAMIC = \"dynamic\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelStateEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "MODULE_MANAGER",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_MANAGER = \"Manager\";"
            ],
            [
                "MODULE_CDR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_CDR = \"CDR\";"
            ],
            [
                "MODULE_DNS_MGR",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_DNS_MGR = \"DNSmgr\";"
            ],
            [
                "MODULE_RTP",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_RTP = \"RTP\";"
            ],
            [
                "MODULE_ENUM",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String MODULE_ENUM = \"ENUM\";"
            ],
            [
                "STATUS_ENABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_ENABLED = \"Enabled\";"
            ],
            [
                "STATUS_DISABLED",
                "org.asteriskjava.manager.event",
                "ReloadEvent",
                "public static final String STATUS_DISABLED = \"Disabled\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "QueueEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -8554382298783676181L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnlinkEvent",
                "/**\n * Serial version identifier.\n */\nstatic final long serialVersionUID = -2943257621137870024L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LogChannelEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = 650153034857116588L;"
            ],
            [
                "AGENT_STATUS_LOGGEDOFF",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent isn't logged in.\n */\npublic static final String AGENT_STATUS_LOGGEDOFF = \"AGENT_LOGGEDOFF\";"
            ],
            [
                "AGENT_STATUS_IDLE",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and waiting for call.\n */\npublic static final String AGENT_STATUS_IDLE = \"AGENT_IDLE\";"
            ],
            [
                "AGENT_STATUS_ONCALL",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Agent is logged in and on a call.\n */\npublic static final String AGENT_STATUS_ONCALL = \"AGENT_ONCALL\";"
            ],
            [
                "AGENT_STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "AgentsEvent",
                "/**\n * Don't know anything about agent. Shouldn't ever get this.\n */\npublic static final String AGENT_STATUS_UNKNOWN = \"AGENT_UNKNOWN\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "BUDDYSTATUS_WAITAUTHORIZATION",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_WAITAUTHORIZATION = \"Waiting for Authorization\";"
            ],
            [
                "BUDDYSTATUS_BLOCKED",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKED = \"Blocked\";"
            ],
            [
                "BUDDYSTATUS_BLOCKEDSKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_BLOCKEDSKYPEOUT = \"Blocked Skypout\";"
            ],
            [
                "BUDDYSTATUS_SKYPEOUT",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEOUT = \"Skypeout\";"
            ],
            [
                "BUDDYSTATUS_OFFLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINE = \"Offline\";"
            ],
            [
                "BUDDYSTATUS_ONLINE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_ONLINE = \"Online\";"
            ],
            [
                "BUDDYSTATUSS_AWAY",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUSS_AWAY = \"Away\";"
            ],
            [
                "BUDDYSTATUS_NOTAVAILABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_NOTAVAILABLE = \"Not Available\";"
            ],
            [
                "BUDDYSTATUS_DONTDISTURB",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_DONTDISTURB = \"Do Not Disturb\";"
            ],
            [
                "BUDDYSTATUS_SKYPEME",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_SKYPEME = \"Skype Me\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEVOICEENABLE",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEVOICEENABLE = \"Offline (Voicemail Enabled)\";"
            ],
            [
                "BUDDYSTATUS_OFFLINEFORWARDENABLEL",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_OFFLINEFORWARDENABLEL = \"Offline (Call Forwarding Enabled)\";"
            ],
            [
                "BUDDYSTATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "SkypeBuddyStatusEvent",
                "public static final String BUDDYSTATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerPushEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "VarSetEvent",
                "static final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AbstractChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 5906599407896179295L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LinkEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = -4023240534975776225L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupHandlerRunEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewExtenEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -467486409866099387L;"
            ],
            [
                "REASON_LOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been loaded for the first time.\n */\npublic static final String REASON_LOAD = \"LOAD\";"
            ],
            [
                "REASON_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded.\n */\npublic static final String REASON_RELOAD = \"RELOAD\";"
            ],
            [
                "REASON_CLI_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded from the command line.\n */\npublic static final String REASON_CLI_RELOAD = \"CLIRELOAD\";"
            ],
            [
                "REASON_MANAGER_RELOAD",
                "org.asteriskjava.manager.event",
                "ChannelReloadEvent",
                "/**\n * The channel module has been reloaded due to a manager action.\n */\npublic static final String REASON_MANAGER_RELOAD = \"MANAGERRELOAD\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LeaveEvent",
                "/**\n * Serializable version identifier\n */\nstatic final long serialVersionUID = -7450401017732634240L;"
            ],
            [
                "STATUS_CREATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_CREATED = \"Created\";"
            ],
            [
                "STATUS_REACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REACHABLE = \"Reachable\";"
            ],
            [
                "STATUS_REMOVED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_REMOVED = \"Removed\";"
            ],
            [
                "STATUS_UNKNOWN",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNKNOWN = \"Unknown\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "STATUS_UPDATED",
                "org.asteriskjava.manager.event",
                "ContactStatusEvent",
                "public static final String STATUS_UPDATED = \"Updated\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "UnholdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ManagerEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 2L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "HangupEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "DISPOSITION_NO_ANSWER",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_NO_ANSWER = \"NO ANSWER\";"
            ],
            [
                "DISPOSITION_FAILED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_FAILED = \"FAILED\";"
            ],
            [
                "DISPOSITION_BUSY",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_BUSY = \"BUSY\";"
            ],
            [
                "DISPOSITION_ANSWERED",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_ANSWERED = \"ANSWERED\";"
            ],
            [
                "DISPOSITION_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String DISPOSITION_UNKNOWN = \"UNKNOWN\";"
            ],
            [
                "AMA_FLAG_OMIT",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_OMIT = \"OMIT\";"
            ],
            [
                "AMA_FLAG_BILLING",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_BILLING = \"BILLING\";"
            ],
            [
                "AMA_FLAG_DOCUMENTATION",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_DOCUMENTATION = \"DOCUMENTATION\";"
            ],
            [
                "AMA_FLAG_UNKNOWN",
                "org.asteriskjava.manager.event",
                "CdrEvent",
                "public static final String AMA_FLAG_UNKNOWN = \"Unknown\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "CoreShowChannelEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "JoinEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "NOT_INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * No device INUSE or BUSY.\n */\npublic static final int NOT_INUSE = 0;"
            ],
            [
                "INUSE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices INUSE.\n */\npublic static final int INUSE = 1;"
            ],
            [
                "BUSY",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices BUSY.\n */\npublic static final int BUSY = 1 << 1;"
            ],
            [
                "UNAVAILABLE",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * All devices UNAVAILABLE/UNREGISTERED.\n */\npublic static final int UNAVAILABLE = 1 << 2;"
            ],
            [
                "RINGING",
                "org.asteriskjava.manager.event",
                "ExtensionStatusEvent",
                "/**\n * One or more devices RINGING.\n */\npublic static final int RINGING = 1 << 3;"
            ],
            [
                "TRANSFER_METHOD_SIP",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_METHOD_SIP = \"SIP\";"
            ],
            [
                "TRANSFER_TYPE_ATTENDED",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_ATTENDED = \"Attended\";"
            ],
            [
                "TRANSFER_TYPE_BLIND",
                "org.asteriskjava.manager.event",
                "TransferEvent",
                "public static final String TRANSFER_TYPE_BLIND = \"Blind\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "ShutdownEvent",
                "/**\n * Serial version identifier\n */\nstatic final long serialVersionUID = 2028136082664018423L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has started.\n */\npublic static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AgiExecEvent",
                "/**\n * Execution of an AGI command has finished.\n */\npublic static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "RenameEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 3400165738000349767L;"
            ],
            [
                "STATE_START",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_START = \"Start\";"
            ],
            [
                "STATE_STOP",
                "org.asteriskjava.manager.event",
                "MusicOnHoldEvent",
                "public static final String STATE_STOP = \"Stop\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "SUB_EVENT_START",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_START = \"Start\";"
            ],
            [
                "SUB_EVENT_EXEC",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_EXEC = \"Exec\";"
            ],
            [
                "SUB_EVENT_END",
                "org.asteriskjava.manager.event",
                "AsyncAgiEvent",
                "public static final String SUB_EVENT_END = \"End\";"
            ],
            [
                "CHANNEL_TYPE_SIP",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_SIP = \"SIP\";"
            ],
            [
                "CHANNEL_TYPE_IAX",
                "org.asteriskjava.manager.event",
                "PeerEntryEvent",
                "public static final String CHANNEL_TYPE_IAX = \"IAX\";"
            ],
            [
                "MODULE_SELECTION_PRELOAD",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_PRELOAD = \"Preload\";"
            ],
            [
                "MODULE_SELECTION_ALL",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_SELECTION_ALL = \"All\";"
            ],
            [
                "MODULE_LOAD_STATUS_DONE",
                "org.asteriskjava.manager.event",
                "ModuleLoadReportEvent",
                "public static final String MODULE_LOAD_STATUS_DONE = \"Done\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "SoftHangupRequestEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "NewCallerIdEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 6639570533512201213L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "LocalBridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "RESPONSE_FAILED",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_FAILED = \"Failed\";"
            ],
            [
                "RESPONSE_SUCCESS",
                "org.asteriskjava.manager.event",
                "BridgeExecEvent",
                "public static final String RESPONSE_SUCCESS = \"Success\";"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 0L;"
            ],
            [
                "BRIDGE_STATE_LINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_LINK = \"Link\";"
            ],
            [
                "BRIDGE_STATE_UNLINK",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "public static final String BRIDGE_STATE_UNLINK = \"Unlink\";"
            ],
            [
                "BRIDGE_TYPE_CORE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A <code>channel.c</code> bridge.\n */\npublic static final String BRIDGE_TYPE_CORE = \"core\";"
            ],
            [
                "BRIDGE_TYPE_RTP_NATIVE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP native bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_NATIVE = \"rtp-native\";"
            ],
            [
                "BRIDGE_TYPE_RTP_DIRECT",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * An RTP peer-2-peer bridge (NAT support only).\n */\npublic static final String BRIDGE_TYPE_RTP_DIRECT = \"rtp-direct\";"
            ],
            [
                "BRIDGE_TYPE_RTP_REMOTE",
                "org.asteriskjava.manager.event",
                "BridgeEvent",
                "/**\n * A remote (re-invite) bridge.\n */\npublic static final String BRIDGE_TYPE_RTP_REMOTE = \"rtp-remote\";"
            ],
            [
                "STATUS_REGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REGISTERED = \"Registered\";"
            ],
            [
                "STATUS_UNREGISTERED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREGISTERED = \"Registered\";"
            ],
            [
                "STATUS_REQUEST_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REQUEST_SENT = \"Request Sent\";"
            ],
            [
                "STATUS_AUTH_SENT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_AUTH_SENT = \"Auth. Sent\";"
            ],
            [
                "STATUS_REJECTED",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_REJECTED = \"Rejected\";"
            ],
            [
                "STATUS_TIMEOUT",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_TIMEOUT = \"Timeout\";"
            ],
            [
                "STATUS_NO_AUTHENTICATION",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_NO_AUTHENTICATION = \"No Authentication\";"
            ],
            [
                "STATUS_UNREACHABLE",
                "org.asteriskjava.manager.event",
                "RegistryEvent",
                "public static final String STATUS_UNREACHABLE = \"Unreachable\";"
            ],
            [
                "PT_SENDER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a sender report.\n */\npublic static final int PT_SENDER_REPORT = 200;"
            ],
            [
                "PT_RECEIVER_REPORT",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "/**\n * Payload identifier for a receiver report.\n */\npublic static final int PT_RECEIVER_REPORT = 201;"
            ],
            [
                "PT_H261_FUR",
                "org.asteriskjava.manager.event",
                "RtcpReceivedEvent",
                "public static final int PT_H261_FUR = 192;"
            ],
            [
                "serialVersionUID",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "/**\n * Serializable version identifier.\n */\nstatic final long serialVersionUID = 1L;"
            ],
            [
                "DIRECTION_RECEIVED",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_RECEIVED = \"Received\";"
            ],
            [
                "DIRECTION_SENT",
                "org.asteriskjava.manager.event",
                "DtmfEvent",
                "public static final String DIRECTION_SENT = \"Sent\";"
            ],
            [
                "SUBEVENT_BEGIN",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_BEGIN = \"Begin\";"
            ],
            [
                "SUBEVENT_END",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String SUBEVENT_END = \"End\";"
            ],
            [
                "DIALSTATUS_CHANUNAVAIL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CHANUNAVAIL = \"CHANUNAVAIL\";"
            ],
            [
                "DIALSTATUS_CONGESTION",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CONGESTION = \"CONGESTION\";"
            ],
            [
                "DIALSTATUS_NOANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_NOANSWER = \"NOANSWER\";"
            ],
            [
                "DIALSTATUS_BUSY",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_BUSY = \"BUSY\";"
            ],
            [
                "DIALSTATUS_ANSWER",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_ANSWER = \"ANSWER\";"
            ],
            [
                "DIALSTATUS_CANCEL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_CANCEL = \"CANCEL\";"
            ],
            [
                "DIALSTATUS_DONTCALL",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_DONTCALL = \"DONTCALL\";"
            ],
            [
                "DIALSTATUS_TORTURE",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_TORTURE = \"TORTURE\";"
            ],
            [
                "DIALSTATUS_INVALIDARGS",
                "org.asteriskjava.manager.event",
                "DialEvent",
                "public static final String DIALSTATUS_INVALIDARGS = \"INVALIDARGS\";"
            ],
            [
                "VARIABLE_TRACE_ID",
                "org.asteriskjava.live.internal",
                "Constants",
                "static final String VARIABLE_TRACE_ID = \"AJ_TRACE_ID\";"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1024",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1024",
                "int"
            ],
            [
                "\"ludicrous time\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "file",
                "java.lang",
                "String"
            ],
            [
                "timeout",
                "",
                "long"
            ],
            [
                "maxDigits",
                "",
                "int"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getFile",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the name of the file to stream.\n *\n * @return the name of the file to stream.\n */\npublic String getFile() {\n    return file;\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String arg0)"
            ],
            [
                "buildCommand",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "@Override\npublic String buildCommand() {\n    if (maxDigits == DEFAULT_MAX_DIGITS) {\n        if (timeout == DEFAULT_TIMEOUT) {\n            return \"GET DATA \" + escapeAndQuote(file);\n        }\n        return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout;\n    }\n    return \"GET DATA \" + escapeAndQuote(file) + \" \" + timeout + \" \" + maxDigits;\n}"
            ],
            [
                "getAsteriskVersion",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "AsteriskVersion getAsteriskVersion()"
            ],
            [
                "getMaxDigits",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the maximum number of digits to read.\n *\n * @return the maximum number of digits to read.\n */\npublic int getMaxDigits() {\n    return maxDigits;\n}"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getTimeout",
                "org.asteriskjava.fastagi.command",
                "GetDataCommand",
                "/**\n * Returns the timeout to wait for data.\n *\n * @return the timeout in milliseconds to wait for data.\n */\npublic long getTimeout() {\n    return timeout;\n}"
            ],
            [
                "toString",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "public String toString()"
            ],
            [
                "escapeAndQuote",
                "org.asteriskjava.fastagi.command",
                "AbstractAgiCommand",
                "protected String escapeAndQuote(String[] arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]